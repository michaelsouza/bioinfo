(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.4' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1238337,      23892]
NotebookOptionsPosition[   1223696,      23462]
NotebookOutlinePosition[   1227811,      23553]
CellTagsIndexPosition[   1227735,      23548]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["DG Package", "Title",
 CellChangeTimes->{{3.6793495261201363`*^9, 3.6793495384395885`*^9}, 
   3.679349644788345*^9, 3.67934974754046*^9, {3.698080393349868*^9, 
   3.698080394373047*^9}},
 Background->RGBColor[0.88, 1, 0.88]],

Cell[CellGroupData[{

Cell["1) Instance Creation and Plot Routines", "Chapter",
 CellChangeTimes->{{3.6793500520209*^9, 3.679350065056984*^9}, {
   3.6950585832964363`*^9, 3.6950585871556697`*^9}, {3.695721180314636*^9, 
   3.695721206866439*^9}, 3.698079604394558*^9, {3.6980801756029487`*^9, 
   3.698080180840421*^9}, {3.6980803985611115`*^9, 3.698080400318778*^9}, 
   3.698157038028053*^9, {3.7002280176828976`*^9, 3.7002280179629517`*^9}},
 Background->RGBColor[1, 1, 0.85]],

Cell[CellGroupData[{

Cell[TextData[{
 "Instance Creation: DG \n",
 StyleBox["DGProblem", "Text",
  FontFamily->"Arial Narrow",
  FontSize->18,
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[",", "Text",
  FontFamily->"Arial Narrow",
  FontSize->18,
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" DGSaveProblem", "Text",
  FontFamily->"Arial Narrow",
  FontSize->18,
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[", \nDGAllEdges, DGEdgeWeight, DGEdgeDistanceBounds, DGGraphGetIJD",
   "Text",
  FontFamily->"Arial Narrow",
  FontSize->18,
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 "\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
nvyLqXl3VcsVH3dWOr2iR1zqH6zH/phUWJyaWY6Y3CHa+l4P2qnWV/pw60pg
8KCKp55jvslezZxeRHLq1Zy9QZeD12l28eway7z/fGD4U6v1c++MQkd4uLDM
LTODnBs+eXakPA99iHI9qFnGd33w8uB1n7hakJm/n79PU8gUDMlpia2NQnLV
P3Q8KWmMbFhrKoN5X0TxZJkT0pA7j2SiiK5H3PBjLMT2T358kdwJ0ec/2jpZ
30TVeHGEdy87KQ1Ienn3N7HK7/Q1qlqsozx7W5ldj8QrUNc4OHDvSWroc+SJ
7+pxuri8YzK9IG7eXI94FXWCr2wcNd7umpqO6jv3sN/IZ354Ka4HW49gC0WK
bPLB2U4ZMiNthKdHBrV7KcO13fptBqXHOPV8VdXerL+YuGVqOTLg/TW5b9kN
qXiHktE5d+9B61hCHhjp10xfbRZGzkGPlGqk0XmP+UjScitbHCdu+6V/IdPp
AMavyXBxtkxhciKy6KznjE7b+ZutQUUvnvcmLVSKbxNZbM44j6R3E6cQeLQN
Hf1VtV8/MDyZ4sbSuYCa+NY9pMNt6KecuNl4MfZBo6qysf/rlJEs9RE45Hdl
9sEvQ6p8NSwXW0Vs7XFEHzuPNdTsUadqbHpxyZziApAzN4+fYcxXct5r2idQ
NzY3IpMO3V5Cc8I+8bKAZrIY14OpAt9RHWv8tdDIxUaV8IiSAONwsfNt9mN6
4mDHczyvPrnku9S3tTlYZohxPbZGfmXT4D+zN8TW9/kGuTKfipAk40kKLvg2
HhhPvctvvetRJpsZa+RkS29VJPHkmBMSkTmPpBKZ9tisHOe0NYm5Cuu05t9x
n1zxTEsIMn3ud1yhfvQ7Y3PcHq7Rnst+pejzidvvt2toTaOq1V380188o//l
Hx/13Pz0opZNY7KnfeA/J14IuIbcW6auNf314Y+3+ltqGoyffhX45UVkkzmJ
OHZr4AjtNaj26ax3gsnT1sa050pKC6ibjfTTX3H4U9bQ1hb8X5ia2V2G6uae
K47bXp9/3Od1O//0nra2gqhKTJ68sez/szW5LVKvvOx30N+wGJu3HItmo4X+
m8O/zN+esWtY/+xfZqf9J/esRzmfiLafbwem58PRyPKvj8ZuXWqvbu4f+flf
js5YtfOallPmD6y//3T0Sc77u7EH5Eh8iq1OZ3s+tSW5wjQcqqahgAKboQnQ
Ga0ppgKu/kbmySuMrscpichmg4HR/7za11pFe6MXbgayvvzMrFrRafsxlsOT
jCxSQ8uqb+36g2cqPWSMPYbDLhFsRma/GzKcTrMcpF4z6xnwrW/KOuhBeSW3
uzW7GJ25EZ74vKvj40Dy+8KGf7Q7fxH4Qob7Zr84Y2LVxI4sbUZCY/buY/3u
4BJdQZXV5JEZ58kDSXOT+DaRzer07TMN6sPWsadMN5HR5Uduy2FN7fFB7y88
0SXRaVd3p/n2o4TydpuRxYduS0ej4bpgFWwJxDb0W3537YOu7ptBWgby1ezo
h1rNXgEPWuIjMN/JoSvFDH7pUuWpYbm8dpzLRkZm7l02vTvy02OXUUPsH/Cx
i+KUbMER28Bl4embXLjbQ01hPKWEFYAMP7BT3oeqXv+xN71urNL3mn3gp6bf
WwNtGqLZ6uGCgkYdxhqitsc+Mub3/xhcjFtfZGTikxZVjd7upb81/pWNkpOo
bjE7RqdzCKRlainGZkWFduvZeYcNgyFfBm++25uyTri9IaPh57HZ7dE923F2
rVWjs90LznB/XwwnNeRWHWRxtRi2vs8XrKvMpyIkyZz1evWfg02V3OwWffbD
0Nn37qXGZ8qFdT2yrcwXTTyp5oQMZMwj6TDNqKpp7tQKcKS5pkLiW8/sHfBc
k75U1iuRkdAD703bQJ+evTV9HZ2+75LN6X0Qymib0q5HQrRMdCnovW7t0zZU
Mb5MTbPW+O7H1z3+mZV0AZgNBVVVw+FEcZmKGALLBdGVGb/nuu0SJWVbA/Vy
axratPo+q919f2o50TNiwwIrapqPCF6Z8ZhSW4utxsGdWOFtT6ZxksY/fWTb
bb9iNmqZj+iHrmroMFqufcMq/8jMqP3Cia0yH4okfmcfkHp8wQEk3JJkdGH8
urmjRqVpNAwp9FLESTwZlAGqa46bBumxJfqVWVsIDFuNR9vaqUc+rte/leXn
1Ozm/n13O/Vtnd78+fezvDk6JV1zM+y3tTe09Xv+ne2l3AyP/75Rvd90N/2b
zEd8AfOsPKGxPxpbWtq0OsPAMJ+zvxa695GB+sIJQ8+l9C9kuK+Yi1NmzyO3
tae9rUN7wmDst3MDmPqh79p5bTuFbsAzkxRyKb5NcoHqpr8OmY61tR1lUqaf
HXKNJb/vyUTnA3fslr5eo16n1epO6Lt7+j9y3gvKL2KeBLu3zpykiM757Baj
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
zd2UjC4HvfwfZWAzEvrnHfsAXTxJ29nedtRovRNM+VX0yb3BU+2UGB0Dw0E2
sQMZXfA7L/UZTlB3atWa0w9eUcI8HnMNmfTMddvadaYP3RPPlQkvJ1dD/uEh
07G2tqNabbfZPhaKshN05rhcEU8qXxhtQ5VKVdNhvvkwzDNVPR811xNCCE7x
otuwEONEeoeSr2Z9/2PQZNAy6HquuIM5ZwWR1/Wi+kg0JdfaYk5MyBn8ZOSJ
/84n5hMdbe2dWu2xHutwIDUdllzNJlLsnDqO3S/Iv+shaZwrrC7WX0zcztj+
4oXceOE9pxG4ZerLJbVfyJUpz5ChUUNUtZoSvxx97NTpHdO8YosYsTlNyumP
I3VCKcAcJ2Xk50Pfitcb5Mr06A2r8SitK3RvW92PaIHJlxOOs/1fJW475qIx
4veSqRZEKLSkr8vqXymaNi9dBsqJlcDgsW7XdPTNq0nbIULd7ZqLhCedvdoz
Dt+/w/Q7QkZnburUqureu/OpQ4eMBL/o7r42QQ0/8hdn+y51lyu1yO7KPXO1
iiD0rlDiuBa+6f0nESa9NHdT08gSuRGeuN7dbkr9iEeeBKJzY7buWnVTj+N+
KMLM/+TLh1e1uw2uma0XP7rgOd8x5A+TjKlAp7bejIb+fumM3RdiklxHF8cH
29T7r068jv2EfDXjHdLV1rZb/xZcZs94rs3f+12T+rf9I7/mqJnJ8E93LIer
NMevssUI6DShJzs+vPaHzHG5op5UrjCqev3HX0/OhkJT952mo2/d9o/RuSjP
3A1tnW8lI8tPQwx+WwsdZNLrejzH/uHpcoRHAgltmP9xIqNDyWdjlzvrtB+O
zrLHCjYjM3f7W43OqVUJ7ZtySVldL76PxFF6rZ31xIScwU9ZCMP9Lbs12iHv
9ArzJfp8etP+ocBWFS3Zmk2U2Dl3HJPhKt+x+lLGudLqYiMc+Lij6/NM7S9J
SO6uM35bO31Po+sxe8vQ83DCOJHeL5EZlzHBqWnsH11gLrex5DXX069J2i9E
jdhcJuW0TpE6oRRgjpM08vOgb8XrDTL80NnTpG68cDu4RD97dH7M2vWWe/KR
Q68h2uzBSPyLOWkM2Y1DI0ahJd5GVv9K0rT56DJQXpDzbsNvhgK0ac1OZ5XN
5/sNrZaRRJ+deZUIlSH1lVmftB865Zxh3j7yZ0drJaE65V5I9ILJNb91T1om
Q56bvjfQc5D3pvo/f3ftmEh54p+HHzgM9SpV2qv0atRcmaAuyGnn0T73fDQm
Rk3f3+5dP/unQHxRN/R1f2MlQbTaJplXhisZsFdnf5C8FrHsszQwE0QOCWci
kw7dXkLdefVhwuIAl4JecPtA7JPKE4ZoMHlm45clV8YGmutq6DgS3pbn9vGz
BJlIacN8jxNZHboecvdqqk2e+cRrbix5+mosYzIVq6yul9VHmSjB1s58YkLW
4F8LeX/XUqXW6Bizdovno+aWrTxLcjWbGLGV6LhXgcEDRH6PmUsZ54qri8gD
2xEzd2v+9pcuJA2b2amy1fEzj4qS/BSs/V/dYr424vvB5/nU2FBJVL/jnotE
Q3dNTb2umdQRKHLE5jQppzyOVK1SgDlO2jhRXt+K1xvUN+2UwBpjYleSS56e
6qoqyofYY/XHs1vnpjFoZKoFcQptSwo5/StR0+ZhigTlRnTe3dvAbbyy0xk1
yNuGAsvJI3bWpa1Km+k2V0bf+01sLNHaUp0+20aC9jbqkpXm0YRDfbw3bbWO
L/HdlPqo3TaRMsPyyhODDHnPNBDErhbbg1TVv+az7IofMCTXJ6/+lkuxyGZc
VO3SdAwF4guVq5O2VkaATsfUWmyBi3ehiZ1Gc8hVSC5SKkZFaDocweQ3n50r
BeJyxT6pPGHUdQNjK0k3jQnDX/lXTOS2pDbM8ziR16GrP1jrKnYnqVAyErxh
qK0gtK6Q4IMLI7Pr5fVRBkqwtTOemJAz+Kmeuq7TqBj7MMGKi/7qHThMiV5l
9UdZeWRqNjFiK9JxzzzGPRmWTxVA/DhXXl3QQ7He+gPX/jPODpWAHyf1ZWRt
Qt4FfzlP8dJvbW0c+P5FfEs8/G+fy9Z/6mCNqsZA71mk3ELkiM1lUk55HIla
pRBznMRxory+Fa03uG/WdLtTip+wb19ifuYcNYbsl0ikQtuSQU7/StW0incZ
KEOol6iNiwrg1LK6Lqbzt6CryVLaP8W9pX57yOJbZv6f0pbM6T2DO2lIkzMu
nSatCi3fTVPfuPhN+QY8vzxvOEk8pmrqVa0+701d1SFX/Zfrqt8d5RQC5Vl0
xpYF2NhsoqLHk2BpUe/LcL/hNBPbSa4/vt5BPyH/sgBz6lN2haaNF6MXa6mf
0xFfKb/PkIBd/JPKEobnsmG/lVJBqj3WcZ4oUi51TIZsolLbMK/jRF6HsitX
KTH2rIu666DjJ+nNLa/r5fZRJkqwtTOcmJAz+MmV+9Ym6rmqu1wzifeJFcuu
6nCy5phszZZVbIU6jg3oymNJQfHjPA/qgi72cWQwwFrUXM3B1PaXJmQMepGW
IHjqoch6CvJXz7t/8C4kG3f0qvJbrRe+XUiVVvyIzWVSTn4caVqlIHOctHGi
uL4V3wsbS97z1bxtyBWj0ei21EiOGkPmSyRaoXFfl9W/UjWt4l0GypGNoLPv
cy4gkE39wZdincvFl+LFJ/6WnHZ2VNEBS97FpF+yaduJo0mn7STdVG10z6ev
HvHJw0J73PTbtW/wx+QrboSn3ObG+q3FKHru03GCcbHZDTHtkQY56+6uoQTd
zb9jGMsZkrbKIIr1SXvrLj6ZMyZgF/+kcoThe1JuHkzrZfbDrAkbpbZhXseJ
zA5l4x+ICsPwk8QQ8Uho8sEvyzJO1sjrerl9lIkSbO0MJybkDP7VoP0IJSDR
dHVyPTWc+2b/qR7r3Sn2qIFszZZVbKU6bsGtV+W1FLXocZ4PdUG1v+mLSfZ4
3eZPjoO7BGoOSn4ZuTrm6VpaqX6h/Q59HW/0u/gRm8uknPQ4ErVKIeY4qS2s
tL4V3wucwHwLCNy7n+D05agxZDaOaIXG/VVW/0rWtEp3GShzYinWefb1ssfw
C+yJZwtuFHPTDudM6k0zyBN7fYhmbtEsGl4MTU98f9t+UVerOdQ//GgrvpFc
nv5xmt3D5qakygujAuXINqccB+mXXMg34fZSib2DAcm70eSq79LuRJkTPxOc
oKU8qRxh+J6Uy0vJY3aKSdiYQxsqPk5kC8PF0lBXrWo2Wu2ubwKzYfnqVF7X
y+4jsVKVSGsLn5iQM/jJpRETfcYzZSUwCzI0m7DYSnUc20F5LUUtcpznUV2w
11+fvNpEr7jybuBKfRljgXB694IyT5EiLON3pIbcs8hT1/ImZXlapTBznNQW
Vlbfiu+FuMDpm0qxdz/xoEfix5I1hszGkarQZPWvjHGrbJeBsofdEePd18ua
KJLbE08IfWTJGNyY5aYZIoEXvX01Ah8xR6Voz72hjc3ppu+zWIfsTrfX//Ni
RGivj/LTDcxSrkcg5UfsrRT0Tbjgz7RJTQwxmXlUWYYJWt6TihaG50kz1//K
mrAxlzZUfJzIF4Z88V1/LaNZOSgFe84ZkJd2Mreul9xHIimR1s5wYkLG4Oei
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
b1u6Lnj+de9SLesvk0u+gSPd7sT6V/JCysXIQy9GNVZ02n6MJXMjI4vBsVtW
fWvXHzxTKcWZRRyi51idvn2mQX3YOvaUuSwZXX7kthzW1B4f9P4SyfGVikw6
dDXVPe45+t1k9cbR/pFf12hdwS6wRGacJw8M/jP59Zf0pHKFCY3Zu4/1u4NL
dCFUIWE2w773ub5m5Tectk+8TBNARhvmb5xIFCY67eruNN9+lFAUaTOy+NBt
6Wg0XM90wjQz8rpeTh+JoWRamyu8yz7L6mOH4WDqioeMwR8OOvQadcJP3kTD
M/47V01t7e+5JvhyP0rWbNnEzq3jmEz+6mrTyBLvy8KVt2aQV/ftjfRxnjd1
wdg8rKeQNqhkvIzc2vKBwQBf0IfEpyDn7/bu09u5fKEbL8Y+aEzM5qM5waf9
pE1MOU3KMieUAs5xWcdJnvSt+F5IEnh9Ofg3a1f3pYtdlcIHPZirybCFZKsF
qQpNXv+KbrF8dRkoVzbD479vVO833f0332S1Fhr7o7GlpU2rMwwMT7xY5/kK
PRhnvncM6OmvdemN/UPuhy+o4Ue+DLp/393efrSty3T9x+WksZ3hpsxHfBGD
ouVZWwgMW41H29o7tdrjev1bpkGn90GI7+XaDPtt7Q1t/R7eZ0+/7F+HTMfa
2o4yCa7PDrnGppb5G0QqZPiR29rT3tahPWEw9tu/mWbf6LWQ79p5bXt7+xGD
9e8zPGlexD+pgsK06wY8qcLE+rpTq9ObP/9+Vkg1S23DfI8TKcJE5wN37Ja+
XqNep9XqTui7e/o/ct4L5lihVV7Xy+mj7JRSaye2wOB3IZ5Glj74ydWQf3hL
Bq2hz/qZ2/c4Qw9K12xZxM6h45jixYJbHhQvxq0tKjpEo2bvwRwKu0gc53lT
F2uhex8ZqJY/Yei5lDaopL6M2XJqSXmKZZ9Fe8abuK1EiTqkq61Q1Rw0WocD
gifspExMuU3KOUwoxZrj0sZJfvSt+F5gBH6rpblNqz3WQ3frChuzJ1z/i/mV
ZI0hq3G4n0lVaPL6V/S4zVeXAQAAAKDQ0Cvt1RWCpzy4L0WWnz4Pz7hOIY9l
MvSOkMCeHQDiYIvuKZ3QPlfYyCveOukAAAAAALKg4zT2E7UXR19kNS9ezzj7
rX7+w6c7lfVZZ5fMcngAsKyNW/eoMhz0KBKZq6sDAAAAAEhlY2X8SpO6eWBs
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
UQqWGC8FFIx84jbsJojdBvcTYWW0uTI6cLD/7kwkeSiRT++92z0wVg5BozuC
zUf2/RUEUWceLWKXsWObEC0GZRKcs/he5keYtYXAl3bLyZaaCiI7lQfsj5R+
H2FP5pVysicxVPJKOQ0VIdamHUfL56AHKE24gOrSO8VQOpSEJcZHIQVb8fZR
t1Idc868zvu9QFEhQy6dqtjnKLmxTQ25U+6FdDFeTd+fWEzygV8FBrsHA6+U
lmMjHHQPsMleqhq1dFmxG67MDP89sKD4Pj7sybyitD1JPhsbunBp+JG4WhrU
GPvrQO/QqDLV6jBU8spOcD3K6aAHKFFK9hRD6VASlhgfBRSMfDV6gYn9dExD
GZU5myvesxXF7mtubBMC+XLXxq3a/7+9s/tp49oavv+AufFlLpCQkCUuIkUR
4oIIVXBBlAgJokaWxYcsE4FslFSGEwWnVUyqBnLUOmprqy30wzqNlZ7jvCcW
54nzNm5P3KfQRyYq7htHwcrjNpBjGpwAAYIcZIJheOdjjz0e7xl7xjaf63eX
4JnZs2bN7LX2Xh83Moe3NvPTD6F4UT9i5Kuw+0IdoSLqer/5YXJhJyP0wJ4s
KUV3PZ6PXj5JqI4aXOFcTRHI9Sl3h4Yg6gdHwfXYAxwA12MfJXoAuxVI9MjJ
rrDEcGznwFaCtgaIyis9ZHL5ScDjsBgNer2+XaszWD7zTr7EzHDrT32DXVpt
c6Ou/0bwBfsDMv7kp+t/vWDqMui1jY0Gy9CPU/FcPim5GguOOCxntNo2vb7b
6gzEkuyzlo7i20zEfrvjHDQzw9Rp28y2O5Gc15IBp9sqVZl1LGsng3wT+kxX
6iBD1D6srN7qzS3GkgP2ZBbJZ6OO87SqN521eVP7Cxvx6H2P45LZ2Kln3wLH
ncml9ZznKr49SWe9nSSIk/33/hQ/I5mM/dhfX0bUX7lXtIxXUJUsdrmqSFHi
L21yMTL6D1tPO/X9NxjP9tl/oL51eyDRg3w9M/5PuwV1njX0fOKNiBeqQnOc
vq6CIKparDcf5bcXmfdcXATkX0uWBPJlIx65c81ytkvb1GT6fDTji0SuR+9e
bjpa3X1ral3kOvLknE+iR95ioV5w+zs6yhxqGRxBciCT80H31T5TF/VuN+ut
2SUF5LxZJZG24BK70xKTNbD1pcnbIvojOKe0PF+OWWtF49mxWy35616xLGe6
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
     "], {{0, 277}, {1065, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{579.7714285714296, Automatic},
   ImageSizeRaw->{1065, 277},
   PlotRange->{{0, 1065}, {0, 277}}]], "Input"]
}], "Subchapter",
 CellChangeTimes->{{3.698064786393987*^9, 3.6980648085765533`*^9}, {
   3.6980677551920414`*^9, 3.698067772324468*^9}, 3.6980678077804627`*^9, {
   3.6980730442932186`*^9, 3.698073084912524*^9}, {3.6980731592026176`*^9, 
   3.698073183521519*^9}, {3.698135205349147*^9, 3.698135224691476*^9}, {
   3.698135487529049*^9, 3.6981354882540293`*^9}, {3.6981356287527127`*^9, 
   3.6981356329327507`*^9}, {3.6982407844204545`*^9, 3.698240789311618*^9}, 
   3.6982595805552015`*^9, {3.7094577652569113`*^9, 3.7094577950823245`*^9}, {
   3.7094585970903807`*^9, 3.709458604987862*^9}, {3.70945923452619*^9, 
   3.709459237160941*^9}, {3.709459452202067*^9, 3.7094594635680685`*^9}, {
   3.709459601569294*^9, 3.7094596077594037`*^9}, {3.709459826982396*^9, 
   3.7094598363919325`*^9}, {3.7094598932261105`*^9, 3.70945990300428*^9}, {
   3.7094599350934324`*^9, 3.709459956349964*^9}, {3.709460032234243*^9, 
   3.709460100496899*^9}, {3.7094601368686814`*^9, 3.709460367457959*^9}, {
   3.7094604068737235`*^9, 3.7094604736255846`*^9}, {3.7094605272097664`*^9, 
   3.709460549665037*^9}, 3.709460580061155*^9, 3.7094625031059456`*^9, 
   3.7094672702962694`*^9, {3.7094673140215015`*^9, 3.709467320279315*^9}}],

Cell[CellGroupData[{

Cell["Source Code", "Section",
 CellChangeTimes->{{3.698067812774536*^9, 3.698067816768963*^9}, {
  3.6981354925538797`*^9, 3.6981354928866024`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "\[IndentingNewLine]", 
    RowBox[{
    "DGAllEdges", ",", "\[IndentingNewLine]", "DGEdgeWeight", ",", 
     "\[IndentingNewLine]", "DGEdgeDistanceBounds", ",", 
     "\[IndentingNewLine]", "DGProblem", ",", "\[IndentingNewLine]", 
     "DGPrintGraph", ",", "\[IndentingNewLine]", "DGPrintX", ",", 
     "\[IndentingNewLine]", "DGSaveProblem", ",", "\[IndentingNewLine]", 
     "DGGraphGetIJD"}], "\n", "  ", "]"}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGAllEdges", "[", "n_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", " ", "j", ",", " ", 
        RowBox[{"k", " ", "=", " ", "0"}], ",", " ", "pij"}], "}"}], ",", 
      "\n", "   ", 
      RowBox[{
       RowBox[{"pij", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", " ", 
               RowBox[{"(", 
                RowBox[{"n", " ", "-", " ", "1"}], ")"}]}], ")"}], "/", 
             "2"}]}], "}"}]}], "]"}]}], ";", "\n", "   ", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", " ", "=", " ", "1"}], ",", " ", 
         RowBox[{"i", " ", "<=", " ", "n"}], ",", " ", 
         RowBox[{"i", "++"}], ",", "\n", "    ", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", " ", "=", " ", 
             RowBox[{"(", 
              RowBox[{"i", " ", "+", " ", "1"}], ")"}]}], ",", " ", 
            RowBox[{"j", " ", "<=", " ", "n"}], ",", " ", 
            RowBox[{"j", "++"}], ",", "\n", "      ", 
            RowBox[{
             RowBox[{"k", "++"}], ";", "\n", "      ", 
             RowBox[{
              RowBox[{"pij", "[", 
               RowBox[{"[", "k", "]"}], "]"}], " ", "=", " ", 
              RowBox[{"i", " ", "<->", " ", "j"}]}], ";"}]}], "\n", "      ", 
           "]"}], ";"}]}], "\n", "    ", "]"}], ";", "\n", "   ", 
       RowBox[{"Return", "[", "pij", "]"}]}]}], "\n", "   ", "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGEdgeWeight", "[", 
     RowBox[{"G_", ",", " ", "E_"}], "]"}], " ", ":=", "\n", "  ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"Gets", " ", "edge", " ", 
       RowBox[{"weight", ".", " ", "'"}], 
       RowBox[{"E", "'"}], " ", "can", " ", "be", " ", "a", " ", "single", 
       " ", "edge", " ", "or", " ", "a", " ", "list", " ", "of", " ", 
       "edges"}], ";"}], " ", "*)"}], "\n", "  ", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", " ", "eij", ",", "wij", ",", " ", 
        RowBox[{"D", " ", "=", " ", 
         RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{"FailureQ", "[", 
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"G", ",", " ", 
               RowBox[{"E", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
             "EdgeWeight"}], "]"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "E", " ", "is", " ", "a", " ", "list", " ", "of", " ", "edges"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"i", " ", "=", " ", "1"}], ",", " ", 
           RowBox[{"i", " ", "<=", " ", 
            RowBox[{"Length", "[", "E", "]"}]}], ",", " ", 
           RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"eij", " ", "=", " ", 
             RowBox[{"E", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eij", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", ">", " ", 
               RowBox[{"eij", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
              RowBox[{"eij", " ", "=", " ", 
               RowBox[{
                RowBox[{"eij", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "<->", " ", 
                RowBox[{"eij", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"FailureQ", "[", 
               RowBox[{"wij", "=", 
                RowBox[{"PropertyValue", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"G", ",", " ", "eij"}], "}"}], ",", " ", 
                  "EdgeWeight"}], "]"}]}], "]"}], ",", 
              RowBox[{"Throw", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<InvalidEdge:\>\"", ",", "eij"}], "}"}], "]"}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"D", ",", " ", "wij"}], "]"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"E", " ", "is", " ", "a", " ", "single", " ", "edge"}], " ",
           "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"eij", " ", "=", " ", "E"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"eij", "[", 
              RowBox[{"[", "1", "]"}], "]"}], " ", ">", " ", 
             RowBox[{"eij", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
            RowBox[{"eij", " ", "=", " ", 
             RowBox[{
              RowBox[{"eij", "[", 
               RowBox[{"[", "2", "]"}], "]"}], " ", "<->", " ", 
              RowBox[{"eij", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FailureQ", "[", 
             RowBox[{"D", " ", "=", " ", 
              RowBox[{"PropertyValue", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"G", ",", " ", "E"}], "}"}], ",", " ", 
                "EdgeWeight"}], "]"}]}], "]"}], ",", 
            RowBox[{"Throw", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<InvalidEdge:\>\"", ",", "eij"}], "}"}], "]"}]}], 
           "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "D", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGEdgeDistanceBounds", "[", 
     RowBox[{"G_", ",", " ", "E_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", "\n", "   ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"eij", " ", "=", " ", "E"}], ",", " ", "Lij", ",", " ", "Uij",
         ",", " ", "Vij"}], "}"}], ",", "\n", "   ", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"eij", "[", 
           RowBox[{"[", "1", "]"}], "]"}], " ", ">", " ", 
          RowBox[{"eij", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{"eij", " ", "=", " ", 
          RowBox[{
           RowBox[{"eij", "[", 
            RowBox[{"[", "2", "]"}], "]"}], " ", "<->", " ", 
           RowBox[{"eij", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}]}]}], "]"}], ";", "\n", "   ", 
       RowBox[{"Vij", " ", "=", " ", 
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"G", ",", " ", "eij"}], "}"}], ",", " ", 
          "\"\<DistanceBounds\>\""}], "]"}]}], ";", "\n", "   ", 
       RowBox[{"Return", "[", "Vij", "]"}]}]}], "\n", "   ", "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGProblem", "[", 
     RowBox[{"x_", ",", 
      RowBox[{"eij_:", " ", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"dijEps_:", " ", 
       RowBox[{"{", "}"}]}]}], "]"}], " ", ":=", "\n", "  ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "Creates", " ", "a", " ", "problem", " ", "P", " ", "such", " ", "that",
        " ", 
       RowBox[{"P", "[", "\"\<G\>\"", "]"}], " ", "is", " ", "the", " ", 
       "problem", " ", "graph", " ", "and", " ", 
       RowBox[{"P", "[", "\"\<X\>\"", "]"}], " ", "is", " ", "a", " ", 
       "problem", " ", "solution"}], ";"}], " ", "*)"}], "\n", "  ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "i", ",", "j", ",", "d", ",", "dij", ",", "k", ",", "numberOfAtoms", 
        ",", "G", ",", "E", ",", "DijEps"}], "}"}], ",", "\n", "   ", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "default", " ", "values"}], " ", "*)"}], "\n", 
      "   ", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "eij", "]"}], ">", "0"}], ",", 
         RowBox[{"E", "=", "eij"}], ",", 
         RowBox[{"E", "=", 
          RowBox[{"DGAllEdges", "[", 
           RowBox[{"Length", "[", "x", "]"}], "]"}]}]}], "]"}], ";", "\n", 
       "   ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "dijEps", "]"}], ">", "0"}], ",", 
         RowBox[{"DijEps", "=", "dijEps"}], ",", 
         RowBox[{"DijEps", "=", 
          RowBox[{"Table", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}]}], "]"}], 
       ";", "\n", "   ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "unpacks", " ", "the", " ", "edges", " ", "and", " ", "calculate", 
         " ", "distances"}], " ", "*)"}], "\n", "   ", 
       RowBox[{"i", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"E", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", 
            RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", "\n", 
       "   ", 
       RowBox[{"j", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"E", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", 
            RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", "\n", 
       "   ", 
       RowBox[{"d", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"Norm", "[", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", 
               RowBox[{"i", "[", 
                RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], " ", "-", " ", 
             RowBox[{"x", "[", 
              RowBox[{"[", 
               RowBox[{"j", "[", 
                RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}]}], "]"}], "]"}], 
          ",", " ", 
          RowBox[{"{", 
           RowBox[{"k", ",", " ", 
            RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", "\n", 
       "   ", 
       RowBox[{"numberOfAtoms", " ", "=", " ", 
        RowBox[{"Max", "[", 
         RowBox[{"i", ",", " ", "j"}], "]"}]}], ";", "\n", "   ", 
       RowBox[{"(*", " ", 
        RowBox[{"creates", " ", "distance", " ", "matrix"}], " ", "*)"}], 
       "\n", "   ", 
       RowBox[{"G", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"Infinity", ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "numberOfAtoms"}], "}"}], 
          ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "1", ",", " ", "numberOfAtoms"}], "}"}]}], 
         "]"}]}], ";", "\n", "   ", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "1"}], ",", 
         RowBox[{"k", "\[LessEqual]", 
          RowBox[{"Length", "[", "i", "]"}]}], ",", 
         RowBox[{"k", "++"}], ",", "\n", "      ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"G", "[", 
             RowBox[{"[", 
              RowBox[{"i", "[", 
               RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"j", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "=", 
           RowBox[{"d", "[", 
            RowBox[{"[", "k", "]"}], "]"}]}], ";", "\n", "      ", 
          RowBox[{
           RowBox[{
            RowBox[{"G", "[", 
             RowBox[{"[", 
              RowBox[{"j", "[", 
               RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"i", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "=", 
           RowBox[{"d", "[", 
            RowBox[{"[", "k", "]"}], "]"}]}]}]}], "\n", "    ", "]"}], ";", 
       "\n", "   ", 
       RowBox[{"(*", " ", 
        RowBox[{"creates", " ", "the", " ", "graph"}], " ", "*)"}], "\n", 
       "   ", 
       RowBox[{"G", " ", "=", " ", 
        RowBox[{"WeightedAdjacencyGraph", "[", "G", "]"}]}], ";", "\n", "   ", 
       RowBox[{"(*", " ", 
        RowBox[{"adds", " ", "distance", " ", "bounds"}], " ", "*)"}], "\n", 
       "   ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "DijEps", "]"}], "!=", 
          RowBox[{"Length", "[", "i", "]"}]}], ",", 
         RowBox[{
         "Throw", "[", 
          "\"\<InvalidInput: eij and dijEps must have the same size\>\"", 
          "]"}]}], "]"}], ";", " ", "\n", "   ", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "1"}], ",", 
         RowBox[{"k", "\[LessEqual]", 
          RowBox[{"Length", "[", "i", "]"}]}], ",", 
         RowBox[{"k", "++"}], ",", "\n", "    ", 
         RowBox[{
          RowBox[{"dij", "=", 
           RowBox[{"DGEdgeWeight", "[", 
            RowBox[{"G", ",", 
             RowBox[{
              RowBox[{"i", "[", 
               RowBox[{"[", "k", "]"}], "]"}], "\[UndirectedEdge]", 
              RowBox[{"j", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}]}], "]"}]}], ";", "\n", "    ", 
          RowBox[{
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"G", ",", 
               RowBox[{
                RowBox[{"i", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], "\[UndirectedEdge]", 
                RowBox[{"j", "[", 
                 RowBox[{"[", "k", "]"}], "]"}]}]}], "}"}], ",", 
             "\"\<DistanceBounds\>\""}], "]"}], "=", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "-", 
                RowBox[{"DijEps", "[", 
                 RowBox[{"[", "k", "]"}], "]"}]}], ")"}], ",", 
              RowBox[{"(", 
               RowBox[{"1", "+", 
                RowBox[{"DijEps", "[", 
                 RowBox[{"[", "k", "]"}], "]"}]}], ")"}]}], "}"}], "*", 
            "dij"}]}]}]}], "\n", "    ", "]"}], ";", "\n", "   ", 
       RowBox[{"Return", "[", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<X\>\"", "\[Rule]", "x"}], ",", 
          RowBox[{"\"\<G\>\"", "\[Rule]", "G"}]}], "|>"}], "]"}]}]}], "\n", 
     "   ", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGPrintGraph", "[", "G_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "edges", ",", "table", ",", "eij", ",", "i", ",", "j", ",", "k", ",", 
        "Lij", ",", "Uij", ",", "Dij"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"edges", "=", 
        RowBox[{"EdgeList", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"table", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "edges", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "5"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "1"}], ",", 
         RowBox[{"k", "\[LessEqual]", 
          RowBox[{"Length", "[", "edges", "]"}]}], ",", 
         RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"eij", "=", 
           RowBox[{"edges", "[", 
            RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"eij", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"eij", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Lij", ",", "Uij"}], "}"}], "=", 
           RowBox[{"DGEdgeDistanceBounds", "[", 
            RowBox[{"G", ",", "eij"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Dij", "=", 
           RowBox[{"DGEdgeWeight", "[", 
            RowBox[{"G", ",", "eij"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"table", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "=", 
           RowBox[{"{", 
            RowBox[{"i", ",", "j", ",", "Dij", ",", "Lij", ",", "Uij"}], 
            "}"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"TableForm", "[", 
         RowBox[{"table", ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{"i", ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "edges", "]"}]}], "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<i\>\"", ",", "\"\<j\>\"", ",", "\"\<dij\>\"", ",", 
               "\"\<lij\>\"", ",", "\"\<uij\>\""}], "}"}]}], "}"}]}]}], "]"}],
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGPrintX", "[", "X_", "]"}], ":=", 
    RowBox[{"Print", "[", 
     RowBox[{"TableForm", "[", 
      RowBox[{"X", ",", " ", 
       RowBox[{"TableHeadings", " ", "->", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{"i", ",", " ", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", 
              RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x\>\"", ",", " ", "\"\<y\>\"", ",", " ", "\"\<z\>\""}], 
           "}"}]}], "}"}]}]}], "]"}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"DGPrintDistanceMatrix", "[", 
    RowBox[{"X_", ",", "edges_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"E", "=", "edges"}], ",", "table", ",", "i", ",", "j", ",", 
       "k"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"table", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"i", "=", 
            RowBox[{
             RowBox[{"E", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"j", "=", 
            RowBox[{
             RowBox[{"E", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", 
           RowBox[{"N", "[", 
            RowBox[{"Norm", "[", 
             RowBox[{
              RowBox[{"X", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "-", 
              RowBox[{"X", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"TableForm", "[", 
        RowBox[{"table", ",", 
         RowBox[{"TableHeadings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"i", ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<i\>\"", ",", "\"\<j\>\"", ",", "\"\<dij\>\""}], 
             "}"}]}], "}"}]}]}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGPrintDistanceMatrix", "[", "X_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "edges", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"edges", "=", 
        RowBox[{"DGAllEdges", "[", 
         RowBox[{"Length", "[", "X", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"DGPrintDistanceMatrix", "[", 
        RowBox[{"X", ",", "edges"}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGSaveProblem", "[", 
     RowBox[{"P_", ",", " ", "fname_"}], "]"}], " ", ":=", "\n", "  ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"Create", " ", "the", " ", "files", " ", 
       RowBox[{"fname", ".", "csv"}], " ", "and", " ", 
       RowBox[{"fname_xsol", ".", "csv"}], " ", "with"}], ",", " ", 
      "respectively", ",", " ", 
      RowBox[{
      "the", " ", "DG", " ", "constraints", " ", "given", " ", "by", " ", 
       RowBox[{"P", "[", "\"\<G\>\"", "]"}], " ", "and", " ", "one", " ", 
       "associated", " ", "solution", " ", 
       RowBox[{"P", "[", "\"\<X\>\"", "]"}]}]}], " ", "*)"}], "\n", "  ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "edges", ",", " ", "fid", ",", " ", "table", ",", " ", "eij", ",", " ",
         "i", ",", " ", "j", ",", " ", "k", ",", " ", "X", ",", " ", "G", ",",
         " ", "Dij", ",", " ", "Lij", ",", " ", "Uij"}], "}"}], ",", "\n", 
      "   ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "creates", " ", "and", " ", "saves", " ", "solution", " ", "table"}], 
       " ", "*)"}], "\n", "   ", 
      RowBox[{
       RowBox[{"table", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"P", "[", "\"\<X\>\"", "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", "j", "]"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", 
            RowBox[{"Length", "[", 
             RowBox[{"P", "[", "\"\<X\>\"", "]"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "3"}], "}"}]}], "]"}]}], ";", "\n", "   ", 
       RowBox[{"fid", " ", "=", " ", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"fname", ",", " ", "\"\<_xsol.csv\>\""}], "]"}]}], ";", "\n",
        "   ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Saving solution file \>\"", ",", " ", "fid"}], "]"}], 
       ";", "\n", "   ", 
       RowBox[{"Export", "[", 
        RowBox[{"fid", ",", " ", "table", ",", " ", 
         RowBox[{"TableHeadings", " ", "->", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x\>\"", ",", " ", "\"\<y\>\"", ",", " ", "\"\<z\>\""}], 
           "}"}]}]}], "]"}], ";", "\n", "   ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "creates", " ", "and", " ", "saves", " ", "constraints", " ", 
         "table"}], " ", "*)"}], "\n", "   ", 
       RowBox[{"G", " ", "=", " ", 
        RowBox[{"P", "[", "\"\<G\>\"", "]"}]}], ";", "\n", "   ", 
       RowBox[{"edges", " ", "=", " ", 
        RowBox[{"EdgeList", "[", "G", "]"}]}], ";", "\n", "   ", 
       RowBox[{"table", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", 
            RowBox[{"Length", "[", "edges", "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "5"}], "}"}]}], "]"}]}], ";", "\n", "   ", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", " ", "=", " ", "1"}], ",", " ", 
         RowBox[{"k", " ", "<=", " ", 
          RowBox[{"Length", "[", "edges", "]"}]}], ",", " ", 
         RowBox[{"k", "++"}], ",", "\n", "    ", 
         RowBox[{
          RowBox[{"eij", " ", "=", " ", 
           RowBox[{"edges", "[", 
            RowBox[{"[", "k", "]"}], "]"}]}], ";", "\n", "    ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "j"}], "}"}], " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"eij", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
             RowBox[{"eij", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], ";", "\n", "    ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Lij", ",", " ", "Uij"}], "}"}], " ", "=", " ", 
           RowBox[{"DGEdgeDistanceBounds", "[", 
            RowBox[{"G", ",", " ", "eij"}], "]"}]}], ";", "\n", "    ", 
          RowBox[{"Dij", " ", "=", " ", 
           RowBox[{"DGEdgeWeight", "[", 
            RowBox[{"G", ",", " ", "eij"}], "]"}]}], ";", "\n", "    ", 
          RowBox[{
           RowBox[{"table", "[", 
            RowBox[{"[", "k", "]"}], "]"}], " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "j", ",", " ", 
             RowBox[{"N", "[", "Dij", "]"}], ",", " ", 
             RowBox[{"N", "[", "Lij", "]"}], ",", " ", 
             RowBox[{"N", "[", "Uij", "]"}]}], "}"}]}]}]}], "\n", "    ", 
        "]"}], ";", "\n", "   ", 
       RowBox[{"fid", " ", "=", " ", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"fname", ",", " ", "\"\<.csv\>\""}], "]"}]}], ";", "\n", 
       "   ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Saving constraints file \>\"", ",", " ", "fid"}], "]"}], 
       ";", "\n", "   ", 
       RowBox[{"Export", "[", 
        RowBox[{"fid", ",", " ", "table", ",", " ", 
         RowBox[{"TableHeadings", " ", "->", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<I\>\"", ",", " ", "\"\<J\>\"", ",", " ", "\"\<D\>\"", ",", 
            " ", "\"\<L\>\"", ",", " ", "\"\<U\>\""}], "}"}]}]}], "]"}], 
       ";"}]}], "\n", "   ", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGGraphGetIJD", "[", "G_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "j", ",", "k", ",", "d", ",", "E"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"E", "=", 
      RowBox[{"EdgeList", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"E", "[", 
          RowBox[{"[", "k", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", 
          RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"j", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"E", "[", 
          RowBox[{"[", "k", "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", 
          RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"d", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"DGEdgeWeight", "[", 
         RowBox[{"G", ",", 
          RowBox[{"E", "[", 
           RowBox[{"[", "k", "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", 
          RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"i", ",", "j", ",", "d"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.6980648378091593`*^9, 3.698064854788249*^9}, {
   3.698064906159929*^9, 3.698064909325801*^9}, {3.698064955176897*^9, 
   3.698064986006858*^9}, {3.698065109038253*^9, 3.698065150671424*^9}, {
   3.69806518659297*^9, 3.698065193368532*^9}, {3.6980654001540194`*^9, 
   3.6980654244181046`*^9}, {3.6980655393665404`*^9, 3.698065555128313*^9}, {
   3.6980659794963894`*^9, 3.6980660041682944`*^9}, {3.698066341867444*^9, 
   3.6980663567706394`*^9}, {3.6980665592012296`*^9, 
   3.6980666992461824`*^9}, {3.69806673177922*^9, 3.698066780054468*^9}, {
   3.6980668153666925`*^9, 3.69806686656289*^9}, {3.69806701658186*^9, 
   3.698067018994828*^9}, {3.698067996394244*^9, 3.698068042764223*^9}, {
   3.698068155902776*^9, 3.6980682384338694`*^9}, {3.6980684167789364`*^9, 
   3.6980684192427177`*^9}, 3.6980700592523394`*^9, {3.6980704236155825`*^9, 
   3.6980707185421805`*^9}, {3.6980707610011263`*^9, 3.698070854882349*^9}, {
   3.6980708951572204`*^9, 3.69807095084225*^9}, {3.698070990102256*^9, 
   3.6980710197514257`*^9}, {3.69807108328992*^9, 3.6980710851061954`*^9}, {
   3.698071134927409*^9, 3.6980711366806107`*^9}, {3.6980714781002245`*^9, 
   3.698071690621649*^9}, 3.6980717752567205`*^9, {3.698071824174859*^9, 
   3.698071835213976*^9}, {3.698071886342635*^9, 3.6980718929859667`*^9}, {
   3.698072224182354*^9, 3.6980722489870024`*^9}, {3.698072475433307*^9, 
   3.698072476001685*^9}, {3.698072507681114*^9, 3.6980725095555162`*^9}, {
   3.698072661011775*^9, 3.698072730186365*^9}, {3.698072802711589*^9, 
   3.698072810574417*^9}, {3.6980747631397576`*^9, 3.6980747665630274`*^9}, {
   3.698078742239861*^9, 3.6980787427962303`*^9}, {3.6980788044556255`*^9, 
   3.698078886289402*^9}, 3.698079529602953*^9, {3.698079562825487*^9, 
   3.6980795628394966`*^9}, {3.6980841826292048`*^9, 
   3.6980841893896885`*^9}, {3.6981352488359904`*^9, 3.698135531631914*^9}, {
   3.698135642417054*^9, 3.6981356548828564`*^9}, {3.698135687148699*^9, 
   3.69813569447806*^9}, {3.6982216004241915`*^9, 3.698221739589205*^9}, {
   3.6982218524675703`*^9, 3.698221872903125*^9}, {3.6982219257613215`*^9, 
   3.6982220862061243`*^9}, {3.698222983461506*^9, 3.6982231253506966`*^9}, {
   3.698223285203043*^9, 3.698223303981498*^9}, {3.698232826843835*^9, 
   3.6982329751758366`*^9}, {3.6982330643710318`*^9, 
   3.6982331580395837`*^9}, {3.6982332202168217`*^9, 
   3.6982332369894466`*^9}, {3.6982333007459803`*^9, 
   3.6982333251156435`*^9}, {3.6982334452210298`*^9, 3.69823386830234*^9}, {
   3.698233971233729*^9, 3.6982341107259865`*^9}, {3.698234157087762*^9, 
   3.698234166227824*^9}, {3.6982342008682995`*^9, 3.6982342078039*^9}, {
   3.698240819715974*^9, 3.6982408474903955`*^9}, {3.6983191649781866`*^9, 
   3.698319169648599*^9}, {3.7003057978269615`*^9, 3.7003059781893115`*^9}, {
   3.700306014054883*^9, 3.700306041788701*^9}, {3.7003060781106386`*^9, 
   3.70030613384301*^9}},
 CellTags->"DGProblem"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples:", "Section",
 CellChangeTimes->{{3.6980677784161177`*^9, 3.6980677937658424`*^9}, {
   3.6980678280050044`*^9, 3.6980678367016196`*^9}, 3.7002279528025875`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Creates", " ", "a", " ", "DGProblem", " ", "with", " ", "complete", " ", 
    RowBox[{"(", 
     RowBox[{"all", " ", "edges"}], ")"}], " ", "graph"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGProblem", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"DGPrintGraph", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"N", "[", 
     RowBox[{"DistanceMatrix", "[", "x", "]"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.6980678514006224`*^9, {3.6980679034188004`*^9, 3.698067938519929*^9}, {
   3.698070087795181*^9, 3.6980701309785995`*^9}, {3.6980701806363125`*^9, 
   3.6980701917162457`*^9}, {3.6980707240828867`*^9, 3.698070728339967*^9}, {
   3.698071156019414*^9, 3.698071173038784*^9}, {3.698071267726063*^9, 
   3.698071268937364*^9}, {3.698071306434246*^9, 3.6980713142584715`*^9}, {
   3.69807140802295*^9, 3.698071409104385*^9}, {3.698072476108756*^9, 
   3.698072476123766*^9}, 3.6980795296284704`*^9, {3.6980796656206665`*^9, 
   3.698079665626671*^9}, 3.6982328268823624`*^9, 3.698233064406555*^9, {
   3.6982338813554974`*^9, 3.6982339037413445`*^9}, {3.6982342329371486`*^9, 
   3.698234244522332*^9}, {3.7094585337684536`*^9, 3.70945853597015*^9}, {
   3.709458627412224*^9, 3.7094586515435295`*^9}, {3.709458713897605*^9, 
   3.709458716630452*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Creates", " ", "a", " ", "DGProblem", " ", "with", " ", "specific", " ", 
    "edges"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"eij", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", " ", 
       RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", " ", 
       RowBox[{"3", "\[UndirectedEdge]", "4"}], ",", " ", 
       RowBox[{"4", "\[UndirectedEdge]", "5"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGProblem", "[", 
      RowBox[{"x", ",", " ", "eij"}], "]"}]}], ";"}], " ", "\n", 
   RowBox[{"DGPrintGraph", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.698070175421965*^9, 3.698070175861757*^9}, {
   3.698070213177312*^9, 3.698070315300525*^9}, {3.6980713539418945`*^9, 
   3.6980713662326765`*^9}, {3.6980714206781745`*^9, 
   3.6980714208693013`*^9}, {3.698072476186808*^9, 3.698072476201317*^9}, 
   3.698079529705022*^9, {3.698079678277562*^9, 3.6980796782830653`*^9}, 
   3.698232826904878*^9, 3.69823306442557*^9, {3.6982342604183755`*^9, 
   3.6982342641588564`*^9}, {3.709304383847331*^9, 3.7093044062435465`*^9}, {
   3.709458699435253*^9, 3.7094587088909597`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Creates", " ", "a", " ", "DGProblem", " ", "with", " ", "specific", " ", 
    "edges", " ", "and", " ", "inexact", " ", "distances"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"eij", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", " ", 
       RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", " ", 
       RowBox[{"3", "\[UndirectedEdge]", "4"}], ",", " ", 
       RowBox[{"4", "\[UndirectedEdge]", "5"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"dijEps", "=", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0.1", ",", " ", "0", ",", " ", "0.2"}], "}"}]}],
     ";"}], "\n", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGProblem", "[", 
      RowBox[{"x", ",", " ", "eij", ",", " ", "dijEps"}], "]"}]}], ";"}], 
   "\n", 
   RowBox[{"DGPrintGraph", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6980720809289303`*^9, 3.6980721673125477`*^9}, {
   3.698072476261857*^9, 3.698072476270364*^9}, {3.698074794128626*^9, 
   3.698074795245368*^9}, 3.6980795297355413`*^9, {3.6980796883057127`*^9, 
   3.698079688311717*^9}, 3.698232826928891*^9, 3.698233064442582*^9, 
   3.6982342864456387`*^9, {3.7027178221035633`*^9, 3.702717834985159*^9}, {
   3.7094585529093294`*^9, 3.7094585610341253`*^9}, {3.709458682357025*^9, 
   3.7094586952947807`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Saving", " ", "a", " ", "DGProblem"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"x", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"P", " ", "=", " ", 
     RowBox[{"DGProblem", "[", "x", "]"}]}], ";"}], "\n", 
   RowBox[{"DGSaveProblem", "[", 
    RowBox[{
    "P", ",", " ", 
     "\"\<c:\\\\Users\\\\Michael\\\\gitrepos\\\\github\\\\bioinfo\\\\dg_\
problem_small\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6980724323259354`*^9, 3.6980724456790857`*^9}, 
   3.6980724763684278`*^9, {3.6980725466797047`*^9, 3.6980726421410055`*^9}, {
   3.6980727654041586`*^9, 3.6980727682410746`*^9}, 3.698078867840667*^9, 
   3.6980795298060875`*^9, {3.6980797088881145`*^9, 3.6980797089077563`*^9}, {
   3.709460730269199*^9, 3.7094607303853207`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7094616031728334`*^9, 3.709461603826394*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Instance Creation: MDGP\n",
 StyleBox["DGSetXByHomogeneousCoords, DGRandom3DBackbone, DGRandomMDGP", 
  "Text",
  FontFamily->"Arial Narrow",
  FontSize->18,
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[",\nDGSetXByCartesianSystem, DGCalculateProteinAngles, \
DGCalculateProteinAnglesForAtomAtPosition, DGCalculateTorsionAngles", "Text",
  FontFamily->"Arial Narrow",
  FontSize->18,
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]]
}], "Subchapter",
 CellChangeTimes->{{3.6957166751540866`*^9, 3.695716678572562*^9}, {
   3.69571845100841*^9, 3.695718453293476*^9}, {3.695718950695672*^9, 
   3.695718956236369*^9}, {3.698065008555179*^9, 3.6980650333441176`*^9}, {
   3.6980731201361957`*^9, 3.6980731887764435`*^9}, {3.7094577282029247`*^9, 
   3.709457742179528*^9}, {3.7094577821234193`*^9, 3.7094577997823915`*^9}, {
   3.7094588551747*^9, 3.7094588561106615`*^9}, {3.709458991242319*^9, 
   3.709459009930315*^9}, {3.709459044226798*^9, 3.7094590465551*^9}, {
   3.709459092081094*^9, 3.7094591161047726`*^9}, {3.7094592728489027`*^9, 
   3.709459318300932*^9}, {3.709459380565092*^9, 3.7094594002184925`*^9}, {
   3.709459472808541*^9, 3.709459484693895*^9}, {3.7094608059907064`*^9, 
   3.7094608163747168`*^9}, 3.709461595244866*^9, {3.709461724303547*^9, 
   3.709461725003809*^9}, {3.709467326482188*^9, 3.7094673329850245`*^9}}],

Cell[CellGroupData[{

Cell["Main concepts ", "Section",
 CellChangeTimes->{{3.6957166751540866`*^9, 3.695716678572562*^9}, {
  3.69571845100841*^9, 3.695718453293476*^9}, {3.695718950695672*^9, 
  3.695718956236369*^9}, {3.698065008555179*^9, 3.6980650333441176`*^9}, {
  3.6980731201361957`*^9, 3.6980731887764435`*^9}, {3.7094577282029247`*^9, 
  3.709457742179528*^9}, {3.7094577821234193`*^9, 3.7094577997823915`*^9}, {
  3.7094588551747*^9, 3.7094588561106615`*^9}, {3.709458991242319*^9, 
  3.709459009930315*^9}, {3.709459044226798*^9, 3.7094590465551*^9}, {
  3.709459092081094*^9, 3.7094591161047726`*^9}, {3.7094592728489027`*^9, 
  3.709459318300932*^9}, {3.709459380565092*^9, 3.7094594002184925`*^9}, {
  3.709459472808541*^9, 3.709459484693895*^9}, {3.709460843120756*^9, 
  3.7094608488423786`*^9}, {3.7094613123021*^9, 3.709461344745573*^9}, {
  3.7094616176655083`*^9, 3.709461755780712*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "- ",
 StyleBox["Protein structure",
  FontSlant->"Italic"]
}], "Subsection",
 CellChangeTimes->{{3.6957166751540866`*^9, 3.695716678572562*^9}, {
   3.69571845100841*^9, 3.695718453293476*^9}, {3.695718950695672*^9, 
   3.695718956236369*^9}, {3.698065008555179*^9, 3.6980650333441176`*^9}, {
   3.6980731201361957`*^9, 3.6980731887764435`*^9}, {3.7094577282029247`*^9, 
   3.709457742179528*^9}, {3.7094577821234193`*^9, 3.7094577997823915`*^9}, {
   3.7094588551747*^9, 3.7094588561106615`*^9}, {3.709458991242319*^9, 
   3.709459009930315*^9}, {3.709459044226798*^9, 3.7094590465551*^9}, {
   3.709459092081094*^9, 3.7094591161047726`*^9}, {3.7094592728489027`*^9, 
   3.709459318300932*^9}, {3.709459380565092*^9, 3.7094594002184925`*^9}, {
   3.709459472808541*^9, 3.709459484693895*^9}, {3.709460843120756*^9, 
   3.7094608488423786`*^9}, {3.7094613123021*^9, 3.709461344745573*^9}, {
   3.7094616176655083`*^9, 3.7094616826222973`*^9}, {3.7094617508923426`*^9, 
   3.709461811737402*^9}, {3.709461851631161*^9, 3.7094618541108217`*^9}, 
   3.7094618940975432`*^9}],

Cell[TextData[Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
bxeWHlWdUhgfw+43n/favG3btpmbm4PuYHOx5GJlZWXNxYaLra0tncbDV4JI
gQuBT4lvfESyv+SWI83/5ELoCE3A5WwQfPLJJ/PmzTPnMmxoZ8+e3b9//wEu
B3lMnTpVS0tL/Lj4xkd8zIXddMHVT67xiowLpYfsYMKGMAMcyQgz4G70IJGR
ZKjxwS+7AulxnCc9rlUN32Twzp2eZJ70cOkavcmgv78/NvhAxguU9HDMKPQo
pIyPEcquxDc+mlPP8qRHbH1xU9NVrvFRkx/64wzuh1dvC69tv8WXHvqBjXc7
bnTQxofs+81fe/U1SUuS/vnPf8LfkMCLb3xEBhrs+n/cloJbzIPj4pRgfLz2
2ihxPffcc8ueZvny5TNnzty7d6/4cfGNj9ho66Ma3G3ma1l+qamKi4vFYqH0
kBFM2BBmgCMZYQDcw6Y8L18mw6oPvvFRU8mTHsfycm8M32Swra0n6fSg9HDu
fKrJ4LDGRwoXVd8ABBGLQDee9JCH8dEkID3qipsacxqbcrnqI+Hghzzj42p9
xkWe9Ai4dbejsqOzqlMuZVdsNru7u1vSO7B48WJIgMU3PsLCAn2Ovc/tt7f8
K9twEcZHXl5mnLmlX2GJjAbB6tWrpXhL0dTUPH78uESGDm18REUFOdAHCE//
9mxkiuIMnaNHj6L0kBFM2BBmgCMZYQD19fWWlpFhYSQ8nFy5QkYqu6quyDw2
R+wV0ldMnTpGbzKI0gMZR8QGx8bZxhW6F4o2PsTcb/5EeujE1hU2UtLjKlV2
1VpdHH9kPvczb67ziReUHu0V7ZTxIY+yK6n7ehw7dkwi4yMi3O706he5yfma
LVZBMfHxQ42Pa1dDvX9eoqb+i0NhiYwGwbx586Q4N+/w4cPfffedRHHxjI/w
COstb1PhzV9jFqE4Q2fNmjX4VikjmLAhzABHMsIA4NnHZkeGhpKRjA+67Krq
usTSo7X1KeNjaNlVcnI6Pk+R8UJ2UnaUdVSBWwGoj6KLRTLuN29K4UuPmNpC
qr85rT6arzW3Zp77L1119YHWvg086dHQ2X69vaOyQ5ayK9r4aGtsc7R3lOIO
QIq+bds2S0tLyXZ8eOpu5ZZdTZr0msbO40esg+KTkmiDIDve3eL0ru/e4X72
5UMOnGK+QVBeXlIUaWl1cKk6/Zay4qdD4fn1jY2tzckem5+nOr+zr7Z1dgoa
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
xUzRY2MvOWnN5W7x+O5cTLoSeny89dZb0p3bz2Kx/vvf/0I2JbaqemJ8pKXF
XzH8gGt3vL7kZ/eI/IKhcVVVlVwN+vGLyUu+jbghRVyQHbHZbCniQiSClh72
9vYoPYZCNzr/7rvvYJoYGhrCcBc8e0177dq9c+eSs2fJuXMwnYiREWV80GVX
VlZU2ZWk+81BfUi33xzSEfH2m/OB+QVvHcq4iU+D0gNhBtKNZFNTt6CgFsFZ
Lmh81NX1RB+nWpFOesXUsnHEsqvu5L2vUF/04edpvXyrc9iyK1nqsRFEhdid
t0uyTOI4cwpcCyj14VEo9X7zm9eqCyxo6bF03Y9frKCNDx3K+BAsu+rM50mP
0yA95NbmA9JpUAFS3IGZM2caGRmJmaLHx9roaKhRV6/J8ktNVUKPjwMHDkjX
AVxTU/PYsWMuLi5SGB+ZoUe4dVbT5+67mJCbKyKuumw3m/hKKeIC3SFLLRki
Jig9RMNXHzBNtLS0+I3OLU6e/OSvf+07coScOUP09YmBAWV8GBsPGh/i7DcH
9aGi/eaEuygK0kP5O6pQeiDMQIqRnJ9fYWp6iW9v0sWVguqjpqYn6tig9GDf
GrHsqktAeogou+rv74fUZSwcqY0gkqKrq5vvmJ/vlE8ZHzKWXeVW8aTHim2B
CW5fPM/998YD8bcE23x05vGlR0rrrU7x23yINj4SuEgaPl3R5OTkJGaKHh91
Yfds6uL/+pNrXJIympvDJUl3FC1cpJmZmbOzs6TGR3JyqNtu7tvj9B2spKsK
OuoKbp1KVmUnGrT0sLOzW7NmDUqPYYG5P2XKlFOnTsFc09bWBvUBH4Hhf+v7
7wncsdOnCWj/c+eosisjI6rsatj95qA+xtJ+c8I7Ik/Jvc5ReiDMQIqRbG3t
5+19k7+va2jZVXV1TyRPelg0DFN2RRsfd5P20dLjs7Re0WVXMLtxxwcy7qC3
SOTZ54H64DhzZCy7qr9axTHnS4/KmqAdXONj0uSv3DNp44OrPjqEpIec+puX
lZWBgpD0DkBi9tFHHzk6OoqZosf7HlgziZYezrFKaW4udYoOF+ng4CC+quIb
H6lJZnu58krtW/uorCxaVSnC0MEsRQkISo/jx4+r+nLGKLT6OH36NEz/Tz75
5C9//GPURx8RXV0Cd+zUKcr4OHuWMj5YrMH95qA+5LjfHJIS6fabg/oYeb85
4WYmMh7QLSk4qRFmIOlIpjdfREY+4tub/FnONz6qqp5ID/ObI552dTeRJz1S
egWtzqHGR2trK9YtI+OO2tpaF5bLNbtreQ55lPEhS9kVSI+cGwLSo6rpeu6l
H2Zw//vJttAqvvHRcY0nPU6ltDTIrb85xCKF9IBH88qVK8VP0eN89q+mpcdu
55ghp9EqwviA1F2Kpzlc1bvvvmtvby++quIbHymeu96lQpy9xPCyQnt8SL2D
HhEfQelx8OBBVV/O2OXUqVOgPqhOH9Onv/nss+TwYXL0KDl2jJw4MWh86OvL
Z7855CXK2m8OfMZFabcRpQfCDCQdyfBktLRMoRcY+PamUNnVjRs9EbpPpMdI
+807EvfT0mNjSu+op11hjw9k3EFJDwOXa7bXaONDqOxKUuOjLvsGx+yJ9GjI
aGiO2b9yiPHR/kR6JLfUy62/eV1N3eHDh1MkZPv27Zs2bRI/RY++YqRNF1xp
O0UP14ZPEcYHvftVTPS40JtMIeGUwvhIsv+aG+I/v3ZOElRVco8LrlBwVy+i
CGjpYWtri9JjVLZs2TJt2jQY+o3//S/55Rdy5AjR0aGMD7rsSrr95qA+VLrf
nO7gqbSJhtIDYQaSjmR//yRX1yq6slLQ+BAsu6qsfCI9TOuGOe2KXmnoSOBJ
j+TeUU+7gkc5PJ0VcgsQRDFQTsEZJ5Ae8jE+siv50uNbkB7pDU3lBTGH5nM/
8uY6z+t0f/P23HObedKjua5drP7mYpRd1dfUw8/8fwL8gwf8G7KvhUNYtGjR
lClTPvjgA/FT9MgI9qF/creZrznnxd1dogTjQzCuxYsXLxiCYFBr16794osv
3nzzzVmzZkHCKanxERNzJeTMe5No6eGUoNDm5itXrkTpoWhQekjE/BdeOPf6
6+Tnnwncq0OHKONDV5cyPuiyq1H3m4P6kON+c1AfMu83B/T09JS2rwqlB8IM
JB3J9vaXfX076AUGIXuTb3xUVPRE6PCkR+2ITQbbEw7Q0mNDUq/gHq9hjQ94
h8ftHsj4gpIep51ybXJHMj4k2m9em1WZz5ceAVVUk8GMhqZU/f/QVVcfsKOr
b4P6aL/Kkx4nk5trqf7mHZVyKLsq5hTDz7S2traxsbHlAoLCnosDF8jAnbg4
cwGVAdk4ZGXLly8XP0UPD/ez2cl9V5j+n9PhCUPb8CnC+ODHJX5oW7duBekB
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
NSsrS4SjffnyZXJYcqJf4qXIS9LxmzeWNcJvTIpKgl8t5lRLR5MmTYLYOzY2
VtHucrDk1NXVt23bFhISsnfv3hEjRojDC/v37//888+DgoLi4+MnT56sp6cn
1E8D8AEgCtq//6flyxdMmrRo4kTNfv2owfXXQ4bYTp48e+rUvVu2wPXSk6mQ
FvS4cePXlNVfElixtvxvEj3uHNpv6pax5fiz2w/wlx6/3L+euF4fPvWvrSV1
vysceqz9+uumr77CEx9Tp0rEb870bPEhEh9K/aftqE/Lwc9oZ79525H1jFm9
WGdqcdqJSx39zeF0EokPuvzmcCL//lvRblNIiiy02pHkQ2Ku5JKSCuCO0tI3
RMKcSh98Eh98yq4IkfRB7KA7evRoCOSAO3x8fMaOHQv/K2YFy8Wii56enrmM
3CtxVyTnN39Y8bAwtRB+0aXSS7yqyHqgIE5WTPQAVVdXDxkyhNiu2cHBYdSo
UeLE8/b29oMHDwZYTkxMnDJlSrf0AbiRnJy81tp6SN++8GeFoWHwsmXHnZxu
JSbeOnToNwjYKIUoDwoLrx8/fj0nJ8LJyWnJEsAQOF96Q4f+uHIlMEuPwhBa
0KO0FGvIIxIfmp/uqi5s5On1+O1+zlYNJaVpiVmvFA493ObNyxo8GJs0CU98
0OU3B/qg+s2jDz7fP5qgDyUDu/AN+xvST7ITH1m7zu00XklkoTRsQtOKO/U3
z8tjl12J5jcnzyXFb95UXa2trS3rWUdCkpIU8KGMJJcSZyXX1tYDd5w794aI
AYiEOVmuy6fsilfig9InCqePBQsWwOHNnj3b29sbgoRdu3b179/f2tqalrAK
fkhOag7Th3k65HRNQg29fvMHFx6UpJcw/ZgZSRk9KggURIAeu3fvjomJUcy7
XGZmJtAHAGN4eDjQx0yI3MTQxIkTR4wYAZMZEREBMRLXVoOwQmIYjFn6+Lv6
HZMm5WzZ8hDCcY5CFDIeoxaikPv/tF9RtQUFIXv3Thg7Fn6Ura1tD9lfiy70
qL/1c8QC1ic09jhda+OPHoqZ9WAyme6ffYaZmeH0IZrfHOijW795qHdL8Ewn
/Q+7VrqxNX5lWvIZdpsPsr951zMqtt88JzbWDngKCUkxpJgPZST5k8gr+cWL
F8AdeXm/kSFS18SHsGVX1MQH6Kuvvvr888/d3d0hQli2bJkk2rQ9fPgQAATi
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
AJgR6zOmoGICSbYOSnngav5f3w+Ybyf/d7v/LJiFXQ/9kKHHr//3f6QvXuzl
RW18lD7fnIw+1PPNt/Wmi+t2X/hq+3b6fnPGfPOD2/KXNpJ/t92SPy4UHzpU
nJBARR8nTpiSb05GH+z55tWrV08nvwwAAMAcWJ8xBRUTSLJ1UPo081nFIdMW
iOR7H982uByjG3ocez1x5paOob1tqK/4zFxQlFxhQ4/ExMSw6tWLW7emNj6+
/55zvjkZfejPN18/6XJwdXkg2DNh617F/ebM+eZ/TlvbVH6loHvEnQuXiw8c
oDY+jhyhjl0ZzDcnow8u+ebWN44AAPAegUkYWAeQZOuAlwpX0fmeP8gX0AU+
w/sXadzrcSy/V297tZNZFT70CLazK/bwKP7uO2rjowzyzYuWtJAfo7Jz6fvr
azLE+O03Ot+cjD5U+eb712X/LJYPS/3Bvx2n7zc/eJDe+OA13/xJWpr1jSMA
ALxHYBIG1gEk2TrgJfSYWTx0fsx/5aGFuM7xdVqhR/cW3dtunTI2e94M7/9X
wUOPly9fUo1q1Yra+GjTpkzyzddPuhwk3/gQ1Ok8YsXrbdu0883jV//1W+s+
8gsgq3da+PjPs/T95gcOUMeuFBsffOWbFxZePHasDdlSAAAAZsL6jCmomECS
rQNeQo9RxaPW5Hv7y5fRK/WfMKooVjfX40zRNIQeJPWrVs1zcaE3PrTyzcno
w7R8czL6UM833zTmhP9HAsXeR8DIreOWv46LozY+Nq96vSJkR79PFdtQ1X1n
pBz+U/1+c2rjQ3Hsir9883WLFvUloycAAABmwiqNKaiAQJKtA75CjznFI6Po
jQ9X50sbEXqwMdDZ+Vq9esUtW1LRR9nlm6+fem/sV56sFclqNuk5987+k/Q1
H6r7zffv5z3ffExwcAQZEwEAADATVmlMQQUEkmwd8BV6jCse93t2Ky/FxseE
OdOKNyH0YGTl+PG/16pV7O5OH7sqo3xzxf3mvw872ttrYZsqJTGHnc/0ceGH
V+7TuN88Lo6+33zfPt7zzVt88w0q6wIAgBmxSmMKKiCQZOuAx9Djt+Kh0yfI
y1gJWrrfj0PowciePXv6ikTFzZvTGx/G5JuT0Ydp95svXFgcFVW8eHHx0qXM
+eZa95vrzzcnow+O+eZvsrKschABAOA9AvMwsA4gydYBj6HHpOJJm++7fStQ
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
uHdmG0T2Vut/LC9IXqbE/D63w7D28gLFVMgWFrz6RGIeu1jK4hbWFao3R17c
WK7gpn1EPzbjzuEp8/q7OnUa4h8aGjbY1ys0egWVbkPIslb/0se+rtBNPG5d
LJer5EuWtaVvss/9PDfEvX1b544tazt4Dfb/ZffOLK0AUrFS7agSSIVy6T15
lZd9dsHycS29xWJHz8Zisa/7uOXzz2Yxul+KNypM/z1mnLtfzZq1+wz1nbj7
pPYSSsljf5vk1aOhQ23fzi4uP3jN2rRW/SipZmfS76lYqNHXz9RSjHqFwE4d
HVyEdUukrgyGwKjmGEQ+gWi9OXUWWWfrVpK1a/cvAX08HcUubVzELk5BU0Zs
U/kkKuRLUmqTYbt2X1KTidbTykjO5Rq3YaZ3J6cAz1GTQkf4h3iNGXHwATV9
Sa+fimzaumblah0nh/6p1ct00/o3Ifuwo3P7zm1Gr45OyZWpX4okUO8Q0vwl
nlgdPMS3kUu/CQMGdBveo63/L0eTKHkreHKs/2B3W6HLjz5Lz3K5q6hkvU4q
uXEhts/AAFc/1watHRo69pnG1M8akG7G+a2jZg1s3NDBpcF3fi4/DAlefTJJ
Tf7l2qqjfWXbIo0Xa17DWewb5N5D+8XUvmqUvutpiGkfKTr/0pwv6GNLskc3
dw8dFeDq6+TkJRbXC2HsfG2LryaH2h8p5F/uRcjnQLWC2KRh8mv0gdo6v4mj
YFwnl0o1DGk9B8i3vbBtxLQQsUNDH6cWvq4hk8fuv5Mlk6rltDL4tAYlnNMr
yPJOJkR3ljfKy6lFN/ceYfKukGm+A7XoXTbyxq85yE2ObOp35DE1b2zqFejh
4kvP46FsXcSlM0kBiNs2r4Pa3Lh2XYnbyWK+yXBy/9jwIGexuJmT0/fN/X70
+/UY9XwNP1An+740kxj1ZPtqnl1VpqEH5Spr7TlSwrwrKnBU9y9q1GnrHNi7
TdfZ4UdS1bbu9Oi1AtOUyFwU5pwIkN+H/q3TggN772amaPLo0ZVbZ2IPx3Tr
21ixPcElEx8AM1GqMoAAvAe8yDq/e29yGjlLUwXGy/a3SlMdC4D3naLCx8fi
Em9cffQoJS2XU944v++w8+K9W/fvm+8d3hNMq+lUmHJx58Wk9IyUlIysUkSv
wCjouxQNVlslo91Z8rMoOhX8ALA8EHoAwB8IPUDpKEWFTwC4AWGzfFShR7tV
Cfp3q5VVpHitYg1AmYDQAwD+QOgBSse/SfvGdZkUYm9j4+UycT3no5sAGA9C
j/cAyV97WsnTt791Wnia5awsIXtxZFeYvMKJbj1SACwPhB4A8AdCD8ALBdk7
mtsLBMLOG7nU1gaACwg93guIp2l7eytSOYRuIb7z1kbtS4yTc/Dg1oTtU5dP
c++guN/cJ3x80lOsVgBLR1XKyW7w+NTXOBULQGlQ1Wap1HfrWZyCBiYiK8xJ
ODijjkhgbzf+KNNFDwCUHlWVtvrO6++yF34BFgEhSb1zPHLpNL+Q7+V1LWhE
VMGWTkMCZq9ffiqVvdwoABaCoVJOAADjMao2CwBs5KftGRgYGDh0aJeRXV3c
h0wOnrdu8dH78CVAGWCwShsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAgIIiyZ2FQ7bdfWXu9wAAAAAAqED8m7R3TPcJfV2dnJy6+tSw6b0r
xdxvVC5IC26MH/pNZZsOkdHZ/5j7ZTQgCvavD3aoPSY+SVqqh2wc8ImwbreA
hMeFRv1FftqegeGjPDs5ObVr96W7zeCIJzLTf/49IO3E+GoC+wmLc9//ZvKp
wparF6Zi1hYR2bdimrsJ69WOOHZLSpT3r5fx3P5v6uJJIzsNbu/s6tqgY6Pq
TnGPeX08kEOJkHvNVlMiH7w196sYCy8mTIfyslDW6xFBYcsHomDfss5rDhX8
a743MKvdMRIi696hHX/uHz2hdWUBSZ8/rEbR9HI3IVREtVdg98nyFD4nyFJC
3DkV/hn1Zo5TovNMFl1p3oHWdvLmCTxWJhj1mH9e3N17+uiv60d/Ku+XoVYe
ejyLHEZ1kLNrfLalaqbR8KnClqoXpmPWFuUuHkPrYcDAm+XuOpbx3E7kJZ04
uunIKi8vqoPF8GTKgMKcEwHy7nX3PJJj7pcxDn5MmC7lZaGs1yOCwpYDZNwR
86NdtcYNqvf6/bC5og/z2h1uSDI3N7IyRdNL3r1VX8tnsJZeR3Msxvl8kRbr
5igQCN1Gjb38dymWaAnpndAAqnmiqhOOZ3D6y8zwntYfevzzbI+7QjUr9fvj
psUMf+ngRYUtUy9Kg1lbJD0S80MV6sfrT4vONdciWBnP7cSFbd2rwJMhcmLH
7krjNbYlpKnh/b8SCkQerjFXM2XvhTryZcJYKS8LZb0eERS2zCDjjjVdP3Ve
df0lkX1rhYvdj+vNE31YhN0xkn/+2uFinYrGhizz/qGVKy9kv7KUGV2afz6o
rVBoG7x6x7PSz9mSF/e2Rm+8mCIp4vZ3TyL6WH3oQSRt9f3Mp60t1VDRgPCM
d+Z+IV7gSYUtTi9KjTlbRMjyziZE/7Ev6435urOs5/aru3rbwJORXQisNv8y
j842kb9lkWdlgeOgQeefGndo1uzwa8JYKCcLZcUeERS2TCDjjlXe9f0OPFIa
moInCf5fBKwzR/RhCXbHSKxY0d4LCGlW5KiqdR3nnDTz2bwKEHoQGeFff73p
+mFve6qldepsuG8VTYUKA0YQepQDhU92uNouuMKbwy27vG/Ex7bdl8S8NylX
5WXCEHqUFihsWZB3d0WPIdqrBJK8y2EdVt+WmOmd3gesWNHeC/6+tbRt55J4
2XxYf+iRf2/FN1SKR37M9HpCqq0+6xI5bg1ZJFBhwAhCj7KHuLwrpKrNAr52
PYh3N0Y3m3ToCtc9a3NSXiYMoUdpgcICy8GKFQ1wwepDj6Ljqz8bHvmMbF1W
UkQNecJHx+Brr839WqUHKgwYQehR1rx7cbJTU4GAv9ADsIPQo7RAYYHlYMmK
RsjyH6akpGTeTti5715WWS+qyJ4/SUnJSE+6uPNkUp6Vut96sPLQg3h3NaTG
8MPplBQVvT3b2Vle++jjJclvzP1mpcaSVVgfhCQrjda4qymFxqq34q8eP0hM
jOPwVxqYU9Nlkr/v0XPaxaz8sv0taws9zCYwjMiepB3u1fMrav+07EOP8jWF
lom1hh5Efm5ayoMHN+4mxSc8LtOqRAg9zEqF9TBlGXcOT5k/qIlY3MzJqY2L
Rx//6KOJeW/1Khohfbp39y8BfZuJxV7eXmJxvZDpY/ffySpNzQ3Zo5t/hE7o
4ta+rbNPuzoODQO9Zu+IY0iKeX45UrE0LUe8KI4cK+m9K7F9Bga4/uDxdfMa
zo79IyMuKY/YkY/d0U/5UROn4YtmXXqmnaP3Ii56aJcxPb7RrW4tuxAoLvkx
z8ALr4uLJS9vr1gV2rZX128CvOxreAzyjz6WxJ43REhuXNg2IrzHN04KWgT7
/7J7J2uyjyQveclvYR6+3o09PL5u6NCiyaCFs85l6d2zJmR5iSdWB4/o8rVY
3Ma5ffsm3w0JXn0iMU9VW+XRxWVBU4e4tzBQllzyMiVmw0zvLmKxo6enc/vO
bUavjk7Jlemf2Im87LMLlo9r2YJu3vfu45bPP8v4wtLX99f9PvUH37DpYSGB
gWPDwnpMCNufdHGLj3hRsvnyup8nL3DyPPI3/V9vty9qXolqrvO82Le8GnK5
ls0b4OIidmnwnd93Tfy8Zm2KScnT8UwIWW7Cvl8Cunu4+Do5dWzoUDswLGTz
hVv6D1qYosKU1lzdNmJK7wak2Hh+5yhu1lf+V2oledj1olRvqw+lfachpU6q
EO/+HVy7+4odHLxcBswLT9CaanT/SlZccPbokvbd233ZuNp37otPpyhOm5el
phsaYunLpInjwnyDWuheQ6Aw/Uqo8ZLKlbFt5++aBLSs7dA6iEVaTBsFvpwo
5czjX0/s4uXUwtc1ZDJpBfJkV9g9mfdNYEqQSbJ2kSYvSDnTOQdNGbHtouab
v3ue0Nmv0QcCZhRCpcXrnEsLl49zbyZ2cWlWn7Sm7uPWkLOu2kDrERsmUyjL
uLt/7Lj+Hr2+a9CuZs3a/WaOPfDgOfNMZoKtMRqDc4spmGChyms6NdZ7MRq6
UfTQUqokf6u5Ic3bt3du7dBQ3H20ppXXxXgnTU/owbEDC86dWB3S2XfsmDE9
AwNHjhzZK/jXQ5fOTR0p/nWvCanVxNO0hCkz/Lp0/2lsSGBI7yG9e4StiE5K
2N7PLeSqztIgB5GjJq5jK/uPD/nawaG1c/uOzYdFr0jNl/fLk8uzGpfoqb4r
XUrcqk4dHb62XRDHGDQYeiuz2h21DinvUSZk2asWdhEJvSaHq+Yc4lXO5WnD
nPvPGeXAomgFTxK6dbBp4LTweFKBog8leVcmjm5uW31grInJ+9LT29q26rHz
qrL+EtkVB3eO+VQobO93hOkKPNmTB9tb15fPtzvyzqxp1aPP8bQchU5Jzu4O
tROIOgaceU5Ijm1g+0j9aYUplw9uPRnbwd9OwKSAhQWpEWOpLABSMP5K29HN
a/YhpfC8zjnRTV7BI/akRFejpQU3wkPr2znOPnBSJWykadjTo2tVz5abbulU
9nyRtsXXbebuvaopS/bo1ta2XsJPa045ypKp9zonKXRwQ5vqA2M2PXqlEDai
8P6tQyH+X8xYnq3ouRdZF3adSwif3sGGdeaUXj81p/5XQl+vDSpjKit8Fr99
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
UW4z1a7NJaRZiya6fUCakhFX/lYKp/R16sKpHsv+fLiE2kQjlfF2+t1d/h7b
M4pKHm6CChOy3Pgtw2sJv+odGH9T2bTCgodbY/s39dv7KF/9m8x6YdrbGo2y
6mmbBTNbu0atTVepz/Vza1q3EdarPemPk9pWVSZ5NG2Y/PiB08rkLBnb0JaF
phs5xMXUFHSmpxfzFKTa9Ri7KKo1qSlX6V+RSbI2byAHq24Xv223ta6+NmUU
9E4FxkLOPFvbegmbOC08rtRosveOH5je1G3FzpggqkZ99Z/2nstXPf/9FRjy
Ne9ejG7mWsnHa8PFW8pBKczasXXMp5VcR469/LfO5oHSWyanzT0PybmRkCRu
bjUsMlvrEo2HyevbtBE2cpy9PyFHkehNyPIvX1jv1yhs/xWNnS89YqPHFMok
qROonTJBY9ctqWoOkEm2xliMn1u4PJSzhSqv6dQU78V4lLse45cucesSciJD
ZWefnB5L+mA2HSJm3dbxbOWdY7STxs8MT8jiFtYV2gb86BSwuKTr5GqyZfQX
tSYf4VjHUt5wxwAnpyC1Eafdp1q1ZmhOqlxEjp64Pq0ZFneYFn5qgo3p1bLz
vvWz2RYiVOsPcnWme/j6jJFNlyTdnkq59KLA4DNPNN0JTkbWXHbHnKNMjuaF
bSOmhYgdGvo4tfB1DZk8dv+dLJlUWVlCwBgJkn91fuuoWQMbN3RwafCdn8sP
Q4JXn0zSntuNRpZx5/CUef1dnToN8Q8NDRvs6xUavSKVHElClrX6lz72dYVu
4nHrYqnOlMuk2FPs7U3XiWv3ZZu6QjIklJn00T+0xXes4dPF4Eeurg26NLel
I1wqitSojtjDs5pId3dA3r3hQc5icTNvF7HYe4D/L7t3ZjEeJ5W8TInZMNO7
k1OA56hJoSP8Q7zGjDj4gIqNpddPRTZtXbNytY6TQ//UCnFJxdm1KypwVPcv
atRp6xzYu03X2eFHUksiarm02Lh3ZmiCxovmZZ9dED2+WRNyQF29XDz6+Ecf
TSQ9EzpYptGptEb91fJxLb3FYkfPxmKxr/u45fPPal0eXSy72l88gQyFXmef
i5jZ3a19W2f5uwR4zdq0VicziCjYv3HAJ8K63QISHvOZfE7tFX6iNcrsiWMl
g17SaabetFWspi/NaziLfYPcezDqCzkFJZ5YHTzEt5FLvwkDBnQb3qOt/y9H
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
    "], {{0, 487}, {1065, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{593.0714285714305, Automatic},
  ImageSizeRaw->{1065, 487},
  PlotRange->{{0, 1065}, {0, 
   487}}]],ImageCache->GraphicsData["CompressedBitmap", "\<\
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
bGIKaK56RqiXKSYWJnimFmkoz70UpAdga2GAvokNXgmy90I12qORFGaPjZUl
1k5+ZFW1KcZ1oqksCXcHU/RNbYWNTFccVWyTvSjqYKqNhWcQpc2q02bU5RDs
YibQscAxIpnM0JuM7TqJx6l1quVaKjPxczXHQM8IK2FS8+vVBG8oS8MvwAtP
Lx+Cw4QEJEbxoqKpt+KxlFeaG18RDrGN+tQ78puEtMPeVSJS9xx/F3OMjCyx
84ultFU5cwfKn0fgYmqAmZmZIExBRyXAwl7GC69tqG+KhXs4z3P8mfLNR1IZ
Xb0rLzLcuEBbTI0Emx29yahWKHlTCTHeVpgLfvgkZyvxa6t5RoCjGVaGBlgG
xclC5U4Kg5X9xJFL545z/LQ+yUVlstfvbQRUhvZ+ZNe0yTndi+eJzlw6e5TD
x3VIKa0mQzhCY1NnnkoS0lJGtJdSCp4rpCBVJQW2MflCCrLbS4Ec2R6UPQvF
zlKIs6k9fsl5CmmvIzXaUVbjdPNNQpZS1edgq3uRE8cPoR+SSmVJMn5ORhhb
WuGWkKu+tKaRp5Gu2Bs8FuLvTEJZk6rW397fKu+VK0z3EzJmgr6NB7G5eWhv
n8Rn62SFctUxaJqKiPCwwsZAD1OvEApb1MQrzvLnysWTHD8s1P1ZKTnJQgaF
TBtYuZNYUq+09qXPgtC8cJIjB68R9qKK/GR3TIysic2rUi8jou8XCd7YmOij
b2lHQPpLdapSkYbV/R2MEZFOz+8WcffuXfFjROzLWpU0PY/3lL27bGBuR8SL
SqWGvswKxMXWGDfnYMUbQy3E+Rpw9uRBTtxxpLSliUwx1Mn4Ecauok9rey1s
5Vm8B9bm+kLzHcVydYoYVHrWREacF042lpjYOBNbVK++rU+6DMHPBhMTIcG+
UTx/4cq8fp/JiuLKuVursvATWiyJpFVIguy8bkeFTuWl+GBhYoKhpUgucnM4
tX4kw7fpqMBqyCfc0xwLC0NMPCKkHQUVQ4qSvLh+/iTHLt4i5mWpoKgX9mYG
GNt7kvyqWXlXYFG6vxA7I4zMrfF7Wqja81V7SBVd81P8cDQSrLeyJiSnUrmd
UV+Uio+nJ56yuzQiiAmNI7+iSfXqtxTEJAbh4e6Jm7fINGKiiEpJancsuSM1
L2NwthVomljgFJ0pOzIpX/U9+ZvnbmY8FsbRPS5T5o+Lc56QKzs6XEVyoGTj
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
RByonNFSsW/1S4cXWN+qOLygRx5npYs7a4aha0tFTBwxBgvGjcP8Mf3Qq00T
TFukgkwPMgwPMgxPr493YbDeow+5Dx/FxTWcxkStrK253Q4UlnLvLfCaIoAe
ActJeowbffrgxZAhSBg7FoXEIapYdGORTXwcimwV9Cqg/8fR+SdE+bToe0cp
Al6/dAmxCQm6X28n/MhgMzLqd7C1dSYZhXHkg3UhsH5O+R42cchFviuBOUtA
wDuKNM/JzryGf4G98P3Dk6GM2YT7rNtlDSX6m7CHiJoKvX/tKCFvL705PnKO
7CGCDZWwIPIhMfu7+QVsJFAaDiHIuHcbObqq0F0+HWvJiTcuWAfHG1aE9mQj
rwg6Xn2GmH0YSHhiJhUYZZARwL5Hvy3m3psinL57kdqm3rcvnvXogXzWZcFg
UJzuJz+aLD6PCINc991JFqTOn1eohSzyh/vkM6cpsOpToCTjUdD+euuRatYR
AXz40J2k9loarBP7Z1nHh9gpKHZEyXMjBrBMSjEx1YTAz+l8yE9faEX/k2PN
Yte2tZERng4ezEv7izjjGQGGhJEclviKIzkW5Fn3yKscxWTXjRT08gVjaB9S
RjHv/TxllKr2kW3tIP0XFhYqLOLOtUcRMchbZMMHKXd82aUL390lTr/8J3MX
5Z+KDRHeuIFKejJHArZDxKyNyRjKq6q0vpU5tSRPCCJT8uc4GuvqZwNfdiS2
ZwysXgDOgvjEfjSWGRF/RewbmdyY08XHV5E5PmXNURj2lTa1jxu5UsNZOr7O
pnpyE441R47kySwL9yKRFSfsfozIslEpJv2PjUrJzyr7VMeWPJEVU0VGZBl6
MSLLMncismJEuk/XO8fuS78t5N47Io6+t4cikHnr1ihn7WdILKbAIkGXn+kp
T9DlB54/HG0TB56F2bBFFHG1iTIdIatMTk298vWWxQ99tqbQm0/nnAicyznL
YoJjluX2LB+7V6zB7J2OeEYC8xCFxyZ1+MZh0/wV2KTlhxiC/bhYXoBMeMHB
mUSXnEhwFQpDBQvbo74HCrEKqE1HIzra0NGVjn50DKNjHB3T6JgrjI2upWM7
HWyO4x46TtBxlQ4DOizouEeHIx1u3BQNX8664unIpKNQqEKoelwVUZFRgoXV
5LDvEkk/avJkhgGbNil0/TxxZnjHIpaO0G3KNPGlo20fI84sZH1InFlHRHW1
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
br55nPzuj/JaiWhEkfx6aan8dEmJ/HRxcZHIEE0Ja49QIRJUtv1n8aS7iBcJ
c3WOR0NdVzkeK1GAK+ouPUbuauuXNcfjiuHZTpfK2o5eLKFbi4OCwuTm75DD
kwdby7bzmwe/ufPbNn7bym9b+G1zd/m2iX/byG8b+G29G19cJ5e+nk/InKO5
BNvkif44eDBqSL3Hbi4OSdEiaFaKjjqBXXGnapdtZaVwJliQ+9UmEvS7vO80
cfctbW1uA7rKNDyK0oJS+M/zR8pSe2tVu6kMD/tUhqok+otpiK1G3LJPlA//
/I8UHClphs/3T6rxnB888xCx6FW49RqFJYElOFzUaEs66UqiTu9qs9Da2Iq2
A2043GK0hy1dshRXXXWVSn5yIJUOnN6TeV/+na+z7HjDDTeodnN6Ulc1jm3b
d8Bz1XRcdm53THxvNmLiohASZKlxxEpwkZqGXZkZyBDx2+2kfEzCUvmYB6by
6c1NbO+6QkTgmWeeEdskVya+jdfGcr2+PnZecQyFtRhe3/G6Wrz8dsJrxZcY
eNY5eOKLVYhLikWUU1eLtUapk8Q6YKbHZ4WNKIP1Z0J0tpUeO3ZMs36waYGZ
NDZaGsnkkXhVTNyTIs3KDesOq5Ohl7OSAZwavZyNLqlJXmNbnIAaN50FZIw7
efKlcko382B290w5zpdjgBxD5Rgpx+VyXCfHTXLcKsddcjwgxyNyPCXHC3K8
Jsfbcnwgx6dyTJFjmhw/yzFbjgVyLJePuoDX4Xalea9WiGhNu+ACtHIGgOOR
1qnfEy0f02Ddma/3RKSyjEHMkbE1YkmmSyROC9C/qyzAVSjNNyxA6vJUe2/N
ekvRVLeYWXprWDQti69B/HLDAny5MhuH9oThnqFuGHz3l6gQex0w6zmxAKOx
ZGcpDhfvdyiaWjNfLXV29N52sA1HWo3uIh8vH9wqoRzdq9Yq0TBD2S5VRoFK
dv3116sCDb2uqwrMDm8/rPnpDZxzWl+889smxEaGKc+t+zOPV4FxhtNULqao
+cXfu1GALC9LjEB39ljKZdFG8YrZzMfGOXYL0Sa5CsV1ypqht/ui/6Dv6Wfj
mW/XISElHjFObTtMWe+xhOIaGOhQnO6atonggApk8jndYbrEwwJzmc7jFI6Y
R80wyUT3M3Ijr7z8cqwncz3V3uqcOpu/cuZXcLWu8HjMFUb+SlsAduYTUdmd
+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
W6u2uxflEA+N/8Jj6iBRheHwyP5D/s1jPma/dwn69TsTw257DBn7Rc+QcEIb
seWPPxDG3SQMGE4lIfjNNJUIbPvlY7g/fweeu+ZqPHbdDfj+xf+i5A/2Q2yy
51w7kxB0NV8kkr5XkMS3U6Z0gY24xPzOOJquix1edCpPPPkEPnr/I0Sti0JJ
SImSOAey0zgLYkhxRAx1OXWK687luKsLxHCk7YgDYqB+M0AQJTMzx30V7P1W
BIjpLrpuKm2UpVrPJjciBd3kRqSg8wS6yc3ME9jOw3vAbloyYRsh7EBVpmeX
Lc/PHICGB85tP9mWuThXQYmGBow0eA62m3cz1ZT2+A6RMnbRUud438W4GMn6
wahrqIP7Knds/HojYmfGIml+EhIXJho8tUuT7DSF1inlrU4ctaQotJj30uhS
VCZWIjs4G9uWb0NUeJQxqnmGspy0uiyvsKef0IGrLbhc4OWXX+7GPkC5WWxS
0hnbIeYH4UPhzeEHogyyWiLIohvfw62XejcWQ2njzWkG9Ro5uvTGC9p5mioa
GMImeYZmGvNMxbVUJ/a9UO5vFls15Zlzq8VuufdF8pr8P/NSOmNFbsDzt/XA
TS/TivzLtCKC8Zuewu1D3PC3D97HMVqQo4LrQVIXlgw3Y+2PE/Dc97MltN11
AityLWbKLUiX6M/Wvn+iZKNLUhuJM379GXs/exC3XHQubrz2Frx++114454J
ePCa/hg4ZCzWzRUr4rPDQBnWvr7jJRudSW3khu2Xv38u6KbpwAFTz07JlBhv
0UtEv1neokJUpECg417xpYVc/C7e6ZCJQ0crX0scSjdNNeAQCwMAfnlt9ELC
5gTsi9hnQJMoJ2iS4gRNclxAEwYolc32LKXuJNC1xiP2WiNVlnVEUUEjW9df
ZQpZC2CzDi+VWk8L05mmPw0NiFaoEHqpXV/zvZl1JPSm0hB2UKms9JnHi3Wo
q/zi31m+oDVky04PUyHprjUFLcuU7PaRa9brD+oa67B+/np4fu2JxN8SEf97
POLnxyvCRwcosrZjHuC9fnvtZI/MIUfYyU8rUypRkVyhlkYF+gQqtjojFDhf
XTJtCI0hExVMlZDUgMiMcRmfAKuorLBy1IpMAzSMlA5Ba4PMt6HJYXWGgsMB
DVorBh3EfGrU2nwrVlfYbsW7T5923XXXsbKjzQ4fHiExu0C55JBNRlf/ZVPC
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
OwM01jYiOTEZHts8EBwUrMKg59R7j1IZDk1Z+dF/P8LVV1yN7T9sR+aKTHv3
8mqn3gMdBlrqVrYdAcGOYWBJbEn7FTC7nNyP6GBLRQtSw1NJgmomiS5U2RZe
G2MLZiBp5DpiXKExtBq64JBQxCemiPiJxqSnGsTceQWoqarEooUL8NF/PpRw
tNk2i8hJU2JKEoN241nk/DyP8/SZ9Tw6oc9YRWeV1Hy4PFyGrLxGzvwwQucX
Pw/9ExEPsYW8r9stpy6K00xRPHbssLjDcNHWcmVZNSuIj1jVGBG/sCDHXjJa
VxL2FIsIZlvov9ie8uOPK3DllVeJ5jyhiF/00m1G3IzkvTd6I3hbMJJ3JiM3
KRf7svahOlceaWEtaotqUZ5fjvzd+UiNS1VLqzhozA5ZzlO+pN7rUvUor7r2
Krz2wGvIXJapjJ2N6EeT0W7MdO2i/Ttw0SJupfGl9g2KGu1YSX8spaXm8mYE
egaitKRU59WJRZn/Zs5Ezzu7YhBxppomi2VsdChWTH8Lt99xN/4zZxNyCnLg
vuhLvPDWR9iwMw7TZ87BV1/+z0Y1zVtA56VJcDXTlisj60xr7Zzrt+bf6ZJo
POlX6CyZZiU45rkEgI3vKqEbIGfchdmzHZkW/QIBj0XeeOGNOVjpfxSxUXZ3
nimC5r1mLd76dB3Cdov9yzOETg8sfvzxd9QjAz+di6YDTcjJzlHcyCE7QxDk
G4RQ31CEB4Qr9x4SGIIQufE0b6wUtR5qdXtVy9fMP+Dzgw8yVmQYpkzvgzUn
Ax16ay19JVZHqnnLCf3UFqVEe11HbX7IcmKrKWxQU4KULfI1l+wu4ZYlCaaP
6HIkLRZrHXzmeqb+RPTihlULRER0HILWT8OIc8/C2L8/hcmPPY0p34sDvf9G
PPPDaoSG+CG9oAL/++Iz1Qh1rilnlBEmkJg44nk1y2JHltRKuKwtnKtZKcIe
mgR6EcotF8LRutGbCIifcOpy9p1p3A4fbhGtEO1a0WpjB2STbGg0sPHzV+F2
Rn9843MEqfGGn2WjbIEYtsUfTYRb77uwUYxbRZG9D49Fxr17GwRqxpl9UD1Y
CFW4kUVWEaQ3TBdZuq8Ufgvlxi5NdyQjO05yyGFtjsUlWmssKi+h89R6g4iz
jbIM+BxuOIzwwHC1Llg3AzGxQBIERksUJk2EYKXrc4XUDBQVjLiEJKyd9jh6
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
n0/+L/qPfkc=\
\>"]]], "Subsubsection",
 CellChangeTimes->{3.7094618699879355`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "- ",
 StyleBox["Planar structure and the length of covalent bonds",
  FontSlant->"Italic"]
}], "Subsection",
 CellChangeTimes->{{3.6957166751540866`*^9, 3.695716678572562*^9}, {
   3.69571845100841*^9, 3.695718453293476*^9}, {3.695718950695672*^9, 
   3.695718956236369*^9}, {3.698065008555179*^9, 3.6980650333441176`*^9}, {
   3.6980731201361957`*^9, 3.6980731887764435`*^9}, {3.7094577282029247`*^9, 
   3.709457742179528*^9}, {3.7094577821234193`*^9, 3.7094577997823915`*^9}, {
   3.7094588551747*^9, 3.7094588561106615`*^9}, {3.709458991242319*^9, 
   3.709459009930315*^9}, {3.709459044226798*^9, 3.7094590465551*^9}, {
   3.709459092081094*^9, 3.7094591161047726`*^9}, {3.7094592728489027`*^9, 
   3.709459318300932*^9}, {3.709459380565092*^9, 3.7094594002184925`*^9}, {
   3.709459472808541*^9, 3.709459484693895*^9}, {3.709460843120756*^9, 
   3.7094608488423786`*^9}, {3.7094613123021*^9, 3.709461344745573*^9}, {
   3.7094616176655083`*^9, 3.7094616826222973`*^9}, {3.7094617508923426`*^9, 
   3.709461811737402*^9}, {3.709461851631161*^9, 3.7094618541108217`*^9}, 
   3.7094618940975432`*^9, {3.709462100889535*^9, 3.7094621036772103`*^9}, {
   3.709472579026297*^9, 3.709472591535045*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
HGfP3njwwWA/ecChJvQBACAhml03UB1b//rftAlFhx7fFpZ97eJXPZ8bfvGP
GylNtc8jatzfdcQ7z9TrdLB89744d0eLGrIGjbbm2PKRf343uc+qI2n5di/j
Z1ztNjIy0n96pO6Vnp5u6fmR8b8L6YZwUA4fPpyWlhYe3rxlyw8dyzh++qmo
adPoESPel+bbeQJCHwAAkqHZdYdLB96voe3C1/hHQnqZRf6uTevxr8WKEnVJ
5qBo/eCZKl3WHjKXKCiPxYbIajwwP8P+xcBtkpSUFB4eTrVbiRl2e3x8vPWf
FNKN0NDQXbt2pWnt37//X/96sk2bqfZmHOfOFT3/fLvGjV+U5gt6CEIfAACS
odl1hz+vpTSroZtRMXrONUNdqEsnJtevl3RB83dxMT6ZLKDlR/NzLMyruCKP
062dobyxecaafItrd9glLy/PuNqt8GcGUEnAuMiwYZqGlT1vkm4Yko769Zs0
adJ/3rwCGzOO48d/a9asY3R0jOXPun3l0JtxmvVjwkKnHsxwzlnmfoQ+AAAk
Q7PrHjfnDAsW+5WB1bvNnZ/+a0H+6W/XvdSi6lvybN0jC1VRxolNpzKKLPfw
7qyZXFcmi1l9pOSXrW+uS7N3bkY5VLt1C+Pdbkz4R0tZgNl0Q3T48OHGjf/z
4IP14+O/tJ5xnDxZ9OGHq2vVqvfee+OtbqC+mLPGQPkVe5e591CEPgAAJEOz
6ybXz8yrH2jax6z76Lzvfrf9PcQquzW6xSbExmzJrkzCYbyWnNDRZbKGlIS9
bXwSVPhcyUq6IVi+fHn9+vWXLl3atm3f2rWf6t17+SefnNu0qciQcezfX7Rk
ycnevaf9858h0dGv2VDZmGccAACgUmh23aZo96ru9xn1NAOrx31+2L4pGdlH
5DUd+kUdk2q3YqlVR94IlSMeAlueK9mSbhiSCOEPo0ZNbdu2j0lm265djylT
PvHzY03oAwBAMjS77lR8Lm1N3IB2YaHP94hZfvxCsb2PKVTFv25fNX3PkYK/
7P1kqt16FIVCYUv/3650A9YR+gAAkAzNrr8ROrfGkzVSUlLcvUW+T8jmhJxO
yOyEPe/wm4wYMYJ0w4kIfQAASIZm138Yyq6KkzX8fFCNNISdLOxq4wpUjj1L
Gjp0aIMGDUg3nIjQBwCAZGh2fZ5Y7VacKUC1W8kYT8Y3EFIPB2bluyndUBZm
LJJrrVkZ27Nq1eAlmT5SpkqL0AcAgGRodn2YeINd7OuGh4dT7VYywp43yTUc
nizjlnRDu7ikidhBmRbWhfFOhD4AACRDs+uTqHbrdob9HxMT4/D+d/tgqpLM
QdHi14hervCVurgiQh8AAJKh2fUlhhnKVLt1OyHLqOT+d3u6oVYr8/e0Eleq
1C5t71MIfQAASIZm1zeYVLtNSEhgsoariRNkKlN+ygoPSDcEF/eNuF+bcERE
7f7NxZ8lNUIfAACSodn1dlS7lZ7Q1Tfsc4HTHyR5RrqhVv+eOEp8whE8NvF3
3xpTRegDAEBCNLveKykpyXiyBsVRJWC8zw2c+5hj06ZNHpFu+PSQKjWhDwAA
CdHseh3jardBQUFUu5WM8bIahodKzq0A5jHphtq3h1SpCX0AAEiIZteLGC8n
R7Vb6RmPpHLFQyVPSjfUamXyrBCfHVKlJvQBACAhml2voFAonFJtFZUh7HbX
LaHoWemGT9fFFRH6AACQDM2uJ6ParfSEPSzkFBJ/qKelG2p1/vlFuiccPrbU
uAGhDwAAydDseiax30u1WykpFIqYmBjxvr6UT5E8L91Qq0v2Lm9V1SeXGjcg
9AEAIBmaXU9jUu2WyRquZvwgyUXlp6zwxHTDD4ZUqQl9AABIiGbXc1DtVnoJ
CQlmK1BJ84zDM9MNc0Oqbv+iyLwh+Xa4FKEPAADJ0Oy6XV5entDvNa52y2QN
ycTHxxsSDWHnC4meZDvfU9MN4yFVUbHHCjX/kC1v1GjDad962EHoAwBAMjS7
bmRc7VbIOBhAJT3hEBh2vpQzZTw33RBckcfJSuviluTMHRw6NjHnrns2xmUI
fQAASIZm1y2MJylT7VYCVp5cSP9EyaPTDbVaeSw2RPfYJyx0wGvBMXPX+Vy6
oSb0AQAgIZpdiRlXu5VyDI/fMsyO8ZBHSB6ebmgU7lza9e/aQVWjBu30tekb
BoQ+AAAkQ7MrDardSkzYvcION65AJeQd7t4ob0g3/AahDwAAydDsuprQgaTa
rZSMd7hbCt5aQrrhUQh9AABIhmbXdUyq3TJZQxoJCQnGiYaHlP8i3fA0hD4A
ACRDs+t0VLt1L2H/i7lGeHi4hzxRIt3wQIQ+AAAkQ7PrREJmER8fb1ztlska
biHsec/pwJNueCZCHwAAkqHZdQrjareSrVjtz4ScIjw8PCEhwd0bUgHSDY9F
6AMAQDI0u5Ukdn2pdisN46dI4oMkd2+RNaQbnozQBwCAZGh2HSMWXzUMoBL+
zAAqlzJ+imQ8K9xje+ykGx6O0AcAgGRodu1FtVvpCTvZJNfw8DVNSDc8H6EP
AADJ0OzaLiUlxb+r3d69mrZz8/JRUYZ+f9So5VvTrpZI8dmGkVTCIRAOhBQf
6SjSDa9A6AMAQDI0uxUyqXYbHx/vh5M1Sq4eXzkquvyyetq8Y8K+q3ddvQHC
IfCKaTKkG96C0AcAgGRodq2g2q1WSWHmyrhgMbsIi5u1OU3ML4QkZI7un4NH
7cuv9MeImZ3nl5+ygnTDixD6AACQDM2uWQqFwniyhocP43GpkpzNfQzpxvIz
hWVey1weLb4Wu/z8HYc/QsjshL0tZnbC/yu9ye5BuuFdCH0AAEiGZteEodqt
OFnD84fxuFbh8VlRuucYUbOOF5q+fOf88ljtqyFxm39x+ENMRml542R80g2v
Q+gDAEAyNLsisdqtOFmDard6eWmzOugna8xJKyw/RVx5dfNA8fWQWWlKRz/G
kGsIuZ43Dl0j3fBGhD4AACRDsysO6THu8bp7izxFyfnl+rniEaP2/WbuR0oz
jspM5fDq2l+kG16K0AcAgGT8udn1+2q31v22b1SELuGIXn7efAnc0oxDFrf5
qqOf5L1D10g3vJc/hz4AACTmh81uXl5eUlKSn1e7rZANDzgEhWmzoio/qspL
kW54NT8MfQAAuItfNbsm1W49edFqdzNMCZfJgsfuy7e0yF/pcxB/yzhIN7yd
X4U+AADcy0+aXard2qe07K3VCRqlP1apWlVeh3TDB/hJ6AMAwBP4fLOblJRk
PFmDfqAtbBtSpVbn7xsVbMOP+RbSDd/g86EPAADP4avNrnG126CgIKrd2sPG
IVVqZdqsEN3PVWoFQC9CuuEzfDX0AQDggXyv2TVewJpqtw4xqlJlI6uJic8g
3fAlvhf6AADwWL7U7CoUCsMAqpiYGKrdOsjo0YWtKlEa11uQbvgYXwp9AAB4
OB9odql262RXN8fZN4kjOHp5pm8/4SDd8D0+EPoAAPAWXt3sCpmFXC6n2q1z
GT3iGLj5qsWSt0azy318Egfphk/y6tAHAIB38dJm16TaLZM1nMdoGXFra2wY
zS63uCK5LyDd8FVeGvoAAPBGXtfsUu3WxYxSCSuzM0pX4nDOkKqSnHXL48U3
DAuduEtR4BE5DOmGD/O60AcAgPfylmY3Ly8vISHBuNotkzVcozBtVlRFjzhK
8veNDXbakKqSwrND4/RvpxM1J7nQzUkH6YZv85bQBwCAD/D8Zte42q2QcTCA
ysVsyThKy+daWJH8bs7mwcGysLjlZwor/sDjE0MHDz16RfNZJRknFkRpPz4i
ancFSwqWZMv7BMuq9ly51wUPREg3fJ7nhz4AAHyGJze7CoUiJiZG7NlS7VYq
howjJG7zL+Z+oKQwbU5UBQ84bM84SvIVn0/Kvmv0L9knpzwsvHXVkfusV9x1
XcZBuuEPPDn0AQDgYzyz2TWudturVy8GUEnIMI/DwgSNkkub+4SJPxA163jF
jzDspszf0yrYhozDRUg3/IRnhj4AAHySRzW7VLv1AKVzNMyNqhIfXuimWqS5
ZKqFmHFUPKrKFUg3/IdHhT4AAHybhzS7Qi+OarceoiRnc59gsznF3av7JujG
UwX3WZ5pbgKH8OtX07Zu3rx546y4kLH78h1ISfLPLwqpYOZ4ScbhefL580dO
jQl2YmJCuuFXPCT0AQDgD5zb7Ar9MXuTBZNqt0zW8AB5abM66MZNjdp8Xuz5
F57fM0tfUMpiumFUWdfipPKKFK6bVjMq9pjFZ1slmYOiSz9jbOLvznnOQrrh
b8g4AACQjHOb3ZiYmKCgIFuGQlHt1qMVnlkeFyYzJzhu/vGrd63+sljJKmLU
PgeePmSf+OiJ0IXf36jgx5w810NIN4SvtmXLFtIN/0HGAQCAZJzb7CoUCuEN
hVTCys8ImUV8fLxxtVsma7iCsFcrNThNMzpqyagowzoZYXGzPtuadrXiJwri
4oDBDgypun0ltVPo4NSMin9PO/LKSXM9xHRDSCtIN/wKGQcAAJJxerNbR8vs
S8bVbiMjIxlA5SLGOZ30n15yfnm00ZAq8a9lH5OYTUaUhWeHR8XtsiHdEN50
7/JWVZ0ypIp0w2+RcQAAIBmnN7tJSUnCe5rcXRf+Gh4eTrVbV0tJSTHkdCLJ
N0GcymEYUlVmZofl+R32pBv6qRyVH1JFuuHPyDgAAJCMK5pdIa2IjIxUawf2
GFe7Ff7MACoXEZI4cVKMMUsPm1zIkSFVJXalG84aUkW64efIOAAAkIwrml0h
sxDetmPHjoYBVFS7dTUhlTPONdy1RLvJkCpbfqMw8/PYhNNGU8Xzf5i0VmEl
+3DGkCrSDZBxAAAgGVc0u1lZWWK/l2q3UhL2dlBQUHx8vPsGrRkNqSq5+u23
FU4zF9KNL5ZvzTRKN66eW9fm6QWZ5VYeNPqd0iFVf2ZvOWjzk5FSpBtQk3EA
ACAhFzW74nJ+zNdwury8PEt7NU9L2s0pSxxSJYtdfv565ubPFRUU0b179fj8
uGBZObGDMu/of+Zq5oKnq1Z9W55teCtxSFVw8JKzv5+ZNvTLbCu5iVniPCPS
DZBxAAAgGRc1u0KfTXhnuVzuijf3T4Zl2d0wO8NGJSc2x/1dJgsLnbhLUWD9
2YOy8NgbUeWzDUH08tIhVeIAKk1+YXjqcTtnQxPNShw9P5579nd7N5B0AwZk
HAAASMZ1zW5kZGRQUJCL3tyvGC/LLvKfsWolOXNHPv4Pp6y7QboBY2QcAABI
xnXNrtkyubCdWOmrfAWq8PBw/8k41IXrJobOSC6s7LobpBswQcYBAIBkXNrs
WlkNELYQCwsb+NlMfGXh2TkfNX8i9lhlJ6eQbqA8Mg4AACTj0mY3ISHBr4YA
OZ1YZ9gnlzIRvo5Cz/xPlOxd0GqCA5M1TJBuwCwyDgAAJOPSZlfoVbq1WKvX
E3adzwxLEzILIW+KjIwsP05MJPy78KrwM05MUUk3YAkZBwAAkqHZdS+hdx0T
E+PDU+yFLyguFGJIK4TvK9dKSUkRXhX+L/5V+HdDMiL8fOWHkAnvTLoBSwh9
AABIhmbXLfLy8pKSkozv9vvMswwD4y8oZBPCX20ZGCY+1hF+3pChOLZnhFRC
SChIN2AJoQ8AAMnQ7EpM6FHHx8ebTAkXZ4W7e9OcRqFQiLmG8P+EhATHZqAI
vyX8ruF97HreQbqBChH6AACQDM2uxExmMYjDh3xmqouQJoiPJ4Tv5aynNkLe
ISZowjvbkryQbsAWhD4AACRDsysxsX5XJe//eyahGy/mU/Hx8c79XsK7GdZb
t54skG7ARoQ+AAAkQ7MrMfEpgO9VDBarQgUFBaWkpLjoI4R3Fh92WHp6QroB
2xH6AACQDM2uKwh9YxuHAPkGMd0IDw939fAw4f2FTzGbdJBuwC6EPgAAJEOz
60TGk50Fwp/dvUVSMKQb0mRYwqeUTzpIN2AvQh8AAJKh2XUKoTcrTjQwWdLO
3dvlchKnGyKTpIN0Aw4g9AEAIBma3cqLj483yTWCgoLkcrnPVKCyRKFQSJ9u
iIRPjIyMTElJId2AYwh9AABIhma38sT7/CKh++17a/mZJfT5g7TcOF2FdAMO
I/QBACAZml2nqFOnTq9evXyvApUVkZGRwsnjxq9MuoHKIPQBACAZml3bJSUl
+fxAKRuJj3Xkcrm7NoB0A5VE6AMAQDI0uxUSsgyhay2uBBEfH+/uzXE/cTyV
G+fFk26g8gh9AABIhmbXCoVCYVKByr3TFjyEkH+5cTwV6QacgtAHAIBkaHbN
ErrThmU1jKvdCp1tP884xAcckZGRbvl00g04C6EPAADJ0OyaJdZ9NRALsbp7
ozyCGx9wkG7AiQh9AABIhmbXkjp16gQFBfXq1YvZ4sbc9YCDdAPORegDAEAy
ft7s5uXlWUoohH/38wFU5aWkpBhW+pYS6Qaczs9DHwAAUvLbZldIKHr16iU+
xXD3tniNmJgYYY9J/KGkG3AFvw19AABIzw+b3ZSUFHH1OgPGTdlI2FfOStCE
fZ6YuHLgwPFt2/bR/9erS5eB8+cvM04fSDfgIn4Y+gAAcBf/aXbz8vISEhLM
VqCiy2oLcUhV5WfQKxQKIb8Q3qpTJ/no0TsTE88tWnRu6dLMpKTMOXO+7t17
+j//GdK0aXRSUhLpBlzHf0IfAABu5yHNrtCPHTVqRrt2Pdu27Sve7m7btsuU
KZ84sSZSVlaWSa4RExPjrkUlvJFYpaoyc1uE3+3S5Z3atZ8aODB55cqiTZvU
27apd+1S79kjpCHqQ4fUx4+rT51Sf/+9OjFxX/36z9WrV2/+/PmkG3AFDwl9
AAD4A/c2u0IXdNSoaQ89FNq0afd33tkwa9apBQvOLV16bsWKzNmzvx4yZGHD
hi0aNGg6efJMp0ziFgdTBQUFCZ1nRlLZS9h74eHhDv+6kB00bBjZrt3EhQuL
1qxRr1+vtpJxZGaqT58u6tAhtkGDBrt27SLdgNORcQAAIBk3NruJiauEXCM2
9pNPPsneuFGdkqLesUO9e7d6/371N9+ojx5Vp6UJ3U71xo0/tG3b54knnq38
8wihjyp9nSWfUZlZ9sKeDw5+8o03khYvVq9YobYl47h4UX3pkvrdd6cJp6jx
wCrSDTgFGQcAAJJxV7M7cOD40ND2H310ftUq9bp1aisZx9mz6gsX1B9/vKVW
rXqffrrI+tsKWYnQK3bXitg+LC8vTzhV5HK5Y7/7/POvxsTMnT9fbW/GceWK
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
YJ8xl2yfM/3n1Q2NSo9h4JBp1w15herOoZi65l+S0vUz8+prnlrYPkg+d/7o
xwPIOPyCOzOOiiKef6GnYSfVyU097/WpMHV3Z+Jz8gSjobkWFF35vHGVOrPI
OCrijdeUN24z7OWeS9hqxlFy55evkpNPZdwxhJ+L+0bcL4tervC0x4Be4O6N
lKaBVjr/vyeOCja83KyNItfmdy6brbwwb9tdw/Eqm4y4aYaaKlveW5NrBf79
oyM2f6vsI/KaPtWUwxIyDk9BT8Mud2/t79jELx/FqnIXfxhRRRZCxlEhb7ym
vHGbYR93XcJWMw6xv2rcE9DOC6g7Zc0d5z7nvZOf80PGxZv5Pj0kS5Uz5e3H
xLJU5adyaMbUzSo9EnZe7KqcM6tfalenSrXosWUHtl068L7huUrdOu4ZclPw
04qG2lTLpOaAdZpHQvdWariC5qT68cfTmUe3bDp3y39TZOWNKxkZl7KOHN+4
/0iu84KL8urPR7ckK5xReNnbMw5V/s2LGT//nPbdV1tSf7EyA8vzT0jJexra
XafZJ0e2Wt11lacs+u3c+fNnfkrfnnw8O98J73fl4pdvdNHGc2sZh63nhhe5
U3Bh7kyxjIwzuysqZf5PGRkZl8+mbtx+Ltt3egIuuKacGHvN88+Mw/Pjs7O4
6BK2idWMQ5xcadwTEMPC1Ru6U/3ub6mvi6t0tG7978h6ARa2vygvY+nKCa26
dXg4QrzLHxIV8vrQHov3Ka7lZO4YPKZDkPafg4P6JR/WDrr564cxsfr1P7SL
VpQ9+f/av/a1MPHVjuJ7xm3OKPdqRETDV5pW130p1c3Le0bIewaHyAKrNeve
cuauwyZzbJWXfvhihH6NDFH9mtFxUWMSp+0976RLu7jw/PLFY3r0XbDvSPkZ
vo4/47DEeEJ6YPUe5moZlc7B+eC9tN9ccpWpjqyPrabdht5jLttR06Uka8Gg
nZfKnU3KouxNWz6O6fa87vQI6/b+oPXHz5jMbCqTvoldAlXxtZTPJ0THtgrv
0ObRmnX/98K45K3XxJ6CSnlz15bSl15tOWmj/qVKURWdPrZ+0JjOT+u29fke
nT7esjG7whELFSrKTU/4dHjzNq3Cmzd/4smHn3+m38yJh7PLV/A3d3UX5Z1d
sGjwS2+8+nRMy+Cazft1SvzKzNmo+wK5OYcmfTyo6XPa5So025+4R3HzWuaG
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
2/3iM0cX9esyYX2ZcdGqHw7INUO/AhrHjzZJe0sH+AXel/Cd7SVrbWYYvSaT
Vbjokt3vXfqMxvxq5hLM43DKqCrV6e39/15u9UnjHxCXSQ2L2Jpj9AP6M7PM
rQ+bX3LwKhPvGcpkXT4/ZX5biy6vfUpmJdG27o+dK7s+UL2dye0sq1163bVQ
4x8J6eXGzlroNekuvfLvZnUwkhMzDgePuO0sfBEHP1cfzWJWH7G2Nc4+Ie07
GXSL/lhOpc3tE5cfiIr67beXjX+kbJrg6CWmb+y6D7/olOJSdmYcls4N3Uw3
o8UojYn9T7HTqPvJZ0NnfLn7msm9g6tnVhy/6MgBKPnj9LAej9xn+oyjUt0V
R2OgLhSY3MW18aXKBRCX7Fu1IxmHA7FXgjhg9zEVM9bA6t3mzk+/Vnb+g7Lg
9OfbrtsxqVNU8uPwlwPNrh2gKs6aJ+/QtM2SU7qaA87vMJg75209Z3TJu4UI
IE6XDm+245r2S4rrRBuHO73iE7vHtYgYvGrbLeP80TcyDpE2aXXOM47yh97o
GYelM99ZGYdNu0tZdP3SjfJTeIymFLmgCqJhJW4h2Xm7r30TGG37APEuhy7p
6NL3e3P3EV3K0ZnjauWVH3L0KcrNOfE1LHWnRbpmvey5ZOV6cewlW2SmDg60
frboLjrzzyNsd6fg8tdHUxOXyuUTP0s9fnrK+LrWMw7zI4jM95rc/ozDwSNu
Owv7xMHP1f2juSfsxlx3QtpwMmjvyFkdLmhun7j8QFTYb9ddUEbrQDl4ien+
sfITymzd8jI/ZvHcuD5toObbWKoWIh4UcYajdmyGLp5rC5sMnTF81Y7k7685
p8yj8np2+ra9G6fL5fPmbDuasSW6roPdFUdjoJUAYu9Ldp+3Ltq3UjzjMOKy
OGD/MdWNgNL2PKo1e6XRm2P6zv4s8evMiw7WmtAWSpXZtpCx8zsMZs95G88Z
3WB+CxFA/FDdDW39CH/djGYb+FLGISatlcg41LcurnhKrJZUpVfySeP+vPiY
SXMyWpjzpXZaxmFzpnCn4OKu3Z9/8PHYTv3bhb0aXdNkvJmzMw5DuvFIreHJ
X960O+W3iS586Th4X71SHKuOq1ZdHhM28YS4w/XPEysOIGXDkTsyDl08tyEy
2xFVTH7/knGFt/ujujYbMGrc2GYdLMZY+zMO3ZVruoSKbiyxpTlNzss4HD3i
tjO/Txz9XBs7ny44IW0/GXT72UrRSzP7xPUHosJdp39/Q+Pi6CVmWyPrxC23
6cf0myocu1dDLXl+9LQscQ7rzctf9uwVblIpKzjojblLcxxunTRleXbPjX5V
LNUSGPFwx/5thr87qf/DNRzrrjgcA52XcThy3rpk3zowj8Oh2OviOODQMVUW
ZSUmdP2HSWWkgMZ9e1S0or05upTHlnbZBR0GC+e8LeeM/q51QKP2mrJj5rVu
tSXrr9J1om2vFS9xxmEy+deIbXHVasahqWwZG7s4+Zb1hsRKxiG8x5HNfe/X
vvZIzbfmT9upqVV1YPuwD9pqZ3CHvBaTar4ahoZkGYe2aKH+aq1fK04+aN1X
W9Mv/nCzSOWqZxz6dCPktU5bzhtnXEJPu4tdnXNVzpmV/3vjuXurNYtru+r7
ckWQylaGNB5gJhWHVgAsub0/puHan8Vvoz9LbQggZc5Ad2Qc+hPGhsjsyFR9
VcGudW9rp+eExETN2136MLfiUVV2ZRzClXtofY97NYPxdvysLcShr5cSOX72
JQuXrPMyDkePuO3M7xNHP9c9GYd9J4NDPQ3XHwibMw5D38DRS8yzMw47ooGq
KOvHk0lbEgdNGhrZTVMBXsPR8nqa6kPxL96juREdPWrQzjOGW9COd1ccjoHO
yzgcPm+dum/VDmUcdsdeCeKA48dUlX/z3E7xRu6wV2rph6hbvs9skb4nY0O7
7IIOg7VzvoJzxoZdZ7oBfppx2MhaxqHKmTKgemyfvV9vmh07+PUQbRmlwGrN
Xg7rNqLPwt3lBr+VJU3GUZz+1eh/6Z+M9ev3TdkS1i7JOLTpRvO/VWs/abpp
heeS24p2j8hi+n5v43JRZRccNzPMtWzGIfU6a6Kr6bPravZw6fSoCmUfebfZ
oExddNVmYYLmnQ5aqvAk1vORBby5yWhpRXdkHLoBopZmwqpLK0gEviXPsfPB
lurCN+/X0p6o5Qr7ODvjUOVMbPrOtjOHPpre75mQkOei/lM/pM3g2Pmp1tZH
cF7G4egRt535feLo57oj47D3ZNDdpbQwX0DDzD5x/YGoaNep0jb30DTipeMf
HL3EpMg4lMnyRhsyKvwxY7pRVTbcZVJdOLoovdzqeEV5Z+cmaMpgOlJeT7f0
sLkFm+zsrtw48W4b3SXscAx0XsZh93nrgn2r5UjGYV/slSQO2H9M71w/uCbV
9Ga15mnaV9Of0lRKN1NbzDrd8bLlF13QYTA7j8PGc0Y3qqpsnSvzG67bh7JY
Q+enIk7MOIwuYRve3DEuzjju3khpGmjvAH4D6xmH9eq4tmYcxvWaGuhLWhm/
7vSMo7jg9NAe1R95dPwXpqsQqpV3co/slQcbV+4VqW6mrBrx+LNVIkLeW7st
19wpYWlH6QOFTvis5D+NH6i4fua4+DkFG+dqitLXKFcdzvyPK7M+aBy9pTQU
6KZTVTgRrG7dleeN9o5b5nHoR5FVNMMu4OVVh+3c46oc+ZuB1k9U3SVckr1l
UYYh2DqQcdy9viUyzN41Z630CnQLXNo8j8PBI247C/vEwc91Q8Zh/8mQfURu
fbKJuX3i8gNR0a7TnTnGX9PBS8xDMw7dTDcrfVpV8a9p6UJjoUyece9w85O/
xFHKdoesO1c2RFi6F1R2d93O2b1GUWDl8Ydxd8XRGOjEeRz2nrfO37ciBzIO
+2KvRHHA7mN64+TkerrZ0KZbLJacsvfmpzJ/TytNJLA8TqO0YrDzOwzmznlb
zxn9zHEruVLxT8fOa28+68Kd5fsPqvycHOMb9Va2Wb/H/CjjEGsFP1Lr/R2H
8+1POnQ3f8xnHPqxOpXMOHSXicWvr62i5ryMQ5NuvPlY6XoZ5pnuRk3ZZ/1r
ZdeNUpf8cejlsNLfbBt7rGxSX2Ypc5MS35JUx9UxTFqJaJSUYf15qqpg+4LG
b5YtuK0rGaerEln+V8STwaSEpnsyDn20sfRAR3VyU897ZbIXWu6xexlAa8V2
ynbplcd6NNpwWf+aI/M4MubVMykIXzHdfL3yTYlhgUvbq+M6dsRtZ2mfOPa5
bsg47D8ZVMUXRrwhbHzY1DVmK9neTZnbrEq5feLqA2G9Oq64NkG5OpYOXWLO
zjjEIjNlD/rtZQNb7Cg7g77Cc+Purf0dmwg/0XpRqtlChapze7q9OPzHPzU9
nGp1LNQE05zPNtxENWGljpZJd6VMb0RXT77MnrykaNentPflWAx0YsZh73nr
/H1b+rv2zuOwK/ZKFQfsPaaaU8vCvFHtF3dggLdYntdsbqVRlLP+v//VddSd
3mGwkHHYds7onySWr3yu1m/t/xquEHMf3YAQK1v+TP+vjE5F/dQPM9usK0pm
NuJVfAlreF3GUbZPa9qvjgpp1bHZW7PGbD+VYbZ8Qcne5a3EKTmmTwBVRYrP
+zxQp45+TrSZvNuBZxx1H52dVnZ9tOxvZz3+r1q6JymWnyfayLZ0o/zXMXrO
YmYnF3+9voe4smRMy9Vl53Gocs7MbWhIy8oNRpVkBUCjrSnOWfGJ5mnjs6Ez
FafMF6xQFmWvSmgc3fPYb6bHU7csTlTLHZdNHzcWn/ry3Zrmhoa6KeMwLPfz
3pdm1lfaEd1EyMEnHLThWU8516a9pTmc5cfO5V9a9WJE2D3658iqPw++0TTl
iv5VBzIOTRyr8u8+poMMrdNdsOWeCBcfWtur4asvVLVvBUBHjrjtLO8TRz7X
HaOqHDkZbl1c07h++UCnNo4V5Z+TuvRA6KNQjR79Tpuca6riLPlbQsA0szig
I5eYszMOfdtR2l1XFX//1jOJP5R9e1vOjUsnptYJlNWvPy+93G2I29f3dX7q
/W8030XbEAS8NGdDfrnk7o/Pp9d43P6bGPqSp+XLgRYfWtf3oQjhtbpT1twR
XrpyqG/70ifv+UvHawq/GPVyi3cmPLPE6BauQzHQmRmHneet8/etyIGMw87Y
K1kcsO+Yak/7QHML8Ak94Sn/unfkXvtL2+l7UE3GzSlX11Po1Q9/eknpGhZO
7jCYzzhsPmeK8492ax0oq9J56S7TkS2aBc3HPjXF0DdTFWxf1l3oJpnbctWF
rwe2GJRZJm3RlbcyfYAiBM9x/VvU+4+liFfxJVzBDrHH7SsHZ8q11k8MLb0F
rl9zXDTpUIUPvTTvM3v2uCXx+vcIjotduUY+73CGYbOLdy/9n9GoHgsCGg8Z
btqmqMsUH6v/ZucN+zZs3bpnz+pdK/sMe65W2KJvvppq6DDXr/lqfKdRXxwR
DlpJxuF58uXLB45srisgULXnzHGzZ8vl8xIzzA3qU2UentKgvu59wut/sHp+
qmLnznV7NgyfElvrobG7fzn9dltxGwIjHu48pNPgsWPS8uzf55r1Om1KN8w8
7rTyjEP7DQp2rR9aJ0TcCWM/HjNvnnD4Fi8cNqv/o/pMpcHDw1YnXzNp8aR8
xqFXfO7Umthe4VUDGvd5fcnO5NPZYkViVdHlS9+v2TK7Zf3WE6edtRBoizOP
Jz4XUSW65crjZ3QJi/JO9oZ18bWrRLwz7GS5JQ6V5w7ItWdms6nLTEqBGV5q
OXtNrs0v2aHw+pHB/UOr1xr+WXK2rhanquj0iZWtoqq8GLH01OXydZhtUpCz
Lfr5gIDqPZZtNXwj1a8XN77RfPbhLM1dnRpB7209cTl1S6s4/Z0olTJ36eSm
VTRPuCZ8fcmkTS7at6aHdojpwOQTJjmgoZpcGfVrRnexfJfA0CTtSNO9qlLe
3Lm+d1TcsbSNmpa37qOzDl0o84tFuQe7tNS8c6fYg9fLzV6384jbStgnq2a2
qKrZJ+/vOplfLs7Z+7lF33zeTxMjqvRI2nXL8jnj5BPSgZNB+IErmeteahnw
TOjMvUcKDGfI3h3jmzResHFpN826LUHvbTN9JO2qA6EufcYxYm5C41d67ruk
u/hVuVe+GTb0hb9Vay+faD4g2HmJqW5mrX1Osx9r9Bn03U3nzMjT3e2Japny
k7CJqiLF2hffmmYyOcvWc+On9KTIyICn6k/6IvW6OGpCpcw/eSyp7VPDv0i7
o/0HZfLMegHVY7qGxsxZeuF3Qykc4UB8NrSO0FQ5snRscdqu4bUCZc+GLUwr
3WMFX295t22/o2e0o1+iWm7JyDk7uXvzjUY3XcUuaw3dla767eKq6OYpv5SN
CPbGwKLc/S9rn4RGd9pv0lYZXiofJay8ZM9564p9WxpngmtNPWz6fZUXjk5+
1Pwlb1/slTAO2HFMtdd1/ZjQ0G499168rv938YcfeujD+Q4uBVBccPajcW3v
DYgcMfxAlu5tVb9fP/nhkMYTTN/TiR0G1W8/Jj2jScSC33n/59uGLNWec6Yo
N22UENCqvz5r9nf68rnKq5cOjx741NjZWWXm7aoKvto0sl69gJdeWHooTXcI
lHeubf38reZmSi0ZcittFNJ91ncfvtMk4cjZDzTJeGBsj4NXyhV5tuEStnKK
2ufGycmP1ox+xVIpvoiIhq80rW7DICLtSaV5VNHK8Ludo+4PqDdTn1Ipi7JW
rxxaO7DcxWNG/eGmsVqjuPCnteumtu/f8eEI8V1Cour3njxGcem2yrCWa8TD
HTpqPrvNCs1ykJpHXQ+YfLvmzZ/4b92/Wy7OUHTr3NqNpXPbhU9pGTpg0vAd
F7Q5cOH145NnD43qqCtUOGCQIxmHyYQLK8wM6FXdTFmtySmExGFN2XkcZb5C
8oxuw7uFtn1Kl2ppqrF1ejt29sY153ItDCH++dulrdrVqVIteoxL53GYfmzR
mbSt8nmjW8bpShBrq/m9O3/a3vPZFXTFlUXZm7Z8HBMXVT+kUWSjkEah3d4f
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
    "], {{0, 399}, {1062, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{590.5285714285745, Automatic},
  ImageSizeRaw->{1062, 399},
  PlotRange->{{0, 1062}, {0, 399}}]], "Input",ImageCache->GraphicsData[\
"CompressedBitmap", "\<\
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
Is5CBJRzHp/em+v7vMxmzbf+8fZH/S9AzSmq\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "- ",
 StyleBox["Torsion angles ",
  FontSlant->"Italic"]
}], "Subsection",
 CellChangeTimes->{{3.709461882393795*^9, 3.7094618999855137`*^9}, {
  3.7094620661209927`*^9, 3.7094620673386745`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
kTMLS9iSMmfOnF/96lcuLSlhyeZSW1uVm3vDVVd92WnN5Vhtzxx97bE+H/bJ
UZHXvR5s0krxv5Z30igmCzH5fnHMdtPJc2fF3urAIwOlJ0fU7rVbgXb2mLg/
8E5FY9+fVXRHW9s8S2GRxxtv/FX108R95Is0Oztb/jRnzZrFFpMaxAQAwNU0
SCLnFBb5OVhKypgxY+68885NmzbpVFLCcmBzibCwHKrsvqHx58Sm96w1xLzP
WOUhu7ZSmy8sbK7pyI8Y0WRNVEfowrAJE/7m93PTsGhUV1ebW0yq/j2nkgYx
AQBwNQ2SSG1hkR+3rKwsJyfHPFP91re+ZZQUeQ6v+oRLAec0l0gKyyft4r5L
+7y8ci6yKyz+WnF/rThplJHa7ussReL9Ph4fvyssxrFkyWFLZ7n//jbVzwu3
MreYzMjISNotJjWICQCAq2mQRIkvLGFLSnZ29oYNG5KzpITV0tLy5JNlt9wy
XlVzCR6676uwvLWu+/LKpWLnX6P8QO8eCrpQ0n1RxqawxPtob88aP/60pbP8
7nd+1c8IF9u2bZtxqSU5t5jUICYAAK6mQRIlprBQUqKmqrl8ckz8qHv3+l//
OcwDTr8lpnc/4GeNYW4OdqhR1G4TOSmiqDHij9tdWPr6JycPidpasTInvo1m
164aS2H5+tdPsDBsMOTL3NhicsKECcl2qUWDmAAAuJoGSRS/whJaUkaNGpXo
kvKn5vpqaWP5wuvF0DurDxwLetuxg3ueXHjNUCGGXnPv9oPHE/QZRS3RzeWs
2JTV9YMLrQ+f/I9Yfn3XW6c/IU5+Yv235vSKSBGN70f8Qd8XRSmB5V57T4Z5
qzm9YtNoYnWELgy7444/qH4KuJ78bTNu3Dj541u0aFHyXGrRICYAAK6mQRLF
trCElpSxY8fK/1yzZs1bb72V2JOjo83l00VvQxfWH+l667GD9fdd0/OW3OqD
/53YTy96CWsuf90pjAmVC+aId/+/nr8//SexsntTyenLxbEz4ftOFIu7/LWB
LV36n7gfUAmK6gi7MGzr1j+p/uG7nt/vX7FihejcQam+vl71779E0CAmAACu
pkESDbKwNDU1bd68uaSkJCsryzz7N0rKhg0b3n33XdXnR8f/9Ora7w81P7Xp
5c1HA3+5Z1lQW3HHFZZQwc2lpka0tcX6vP2M2LO0a0pl1Ezxb78OLMfaVC5u
NoZbRoil9SHXVkIKS+T38jq5NzBxf3+j3eO7Css0ccj+PsmxOHy+Ukth+eIX
T7/77rH+fzDoj7nFZF5envZbTGoQEwAAV9MgiaIoLI4vKRbv7XloqtlNri9/
9b8Pbr/3+z+tbj7S/z91CbO5TJ/+tRg3lzNi7zNi5pW9r1SNEPc+IfYes9vU
/uwhYSwKM25o3FhkudhlvdHxyXcC0y72bSWKEjTIY/ny/ZbO8p3vvKf6p60J
v99fUVEhkmCLSQ1iAgDgahokUYSFJWxJSU1NnTVr1tq1aw8cOKD69MfO8eby
681P+po7F/5wfvmr+rSVYPFqLmfEsUNi797AcfAP4mTYNWC9j16XQozJlGC9
L5EcaxY500Ttoa5Wsvc/IypBCThOnZoYujBs7dq3Vf+c9dHc3GxsMSl/seh6
qUWDmAAAuJoGSWRTWMKWlG984xuuKCm9HH+1/HpzWdhlP6z2uXD918AENZeh
cVktZn8M5FLIsUYxLUc0H+v6h83lwtvHfEoi14OZR+jCsPPOO/3WW66ZeHKF
6upq41KLlltMahATAABX0yCJLIUlbEm5/PLL3VdSegkewA+sCrMrLMcP1N97
vRDX31t/wL7XHD+4e+1C49LNZd9/qHrPQSdON8jmsm7dsltvHZPI5hJ8KeTY
f9rtGmnsLBn24ouxSKxng8igEnTmmPjP+OwaGfaoqdlt6SxXXvlH1T9Y3cgn
qrnFpM/nU/17MZY0iAkAgKtpkERGYZENpaioyHIl5fbbb3/iiSf02Cel16qw
68ub+64iPY+0f9iB6h/2zPIbi82W7fmTcy/dJLK5mPcfLqoMjLoMoK0EXZQx
x16M+4yZJWhykfjN3gTNsBjHqVMTMzPbLZ3lwQf3q/6RasjcYlKnSy0axAQA
wNU0SKJf/OIXoSVFntyqPnOJsd79wrhXWJ8P7f8Ky3Ff9b0PdI3t/+nV6q7r
LGMX1h+Kw+ceY0ZzufLKYfFrLl1NZHL3WEq4wywgFuZ8ytlj4vGcngoj//P+
znpTVCtOJrCtdFWwQ0WWwiLE6d/9Tocu7zStra3GpRZttpjUICYAAK6mQRId
OXJk7Nix8gu56aab/H6/6rOVuDgeuC3YwocWmtdY+lsV1q8/+ZqDFoB1X5Rx
R2ExybPBlSvvj2tzGeTxfqNISRG1fvWfyblwC8NGjTqm60tGuYaGBmOLycLC
QrdvMalBTAAAXE2bJPJ4PPJryc7O1u4E7PifmqsXXp9b/uqR3vcKM5dvHTtQ
v9VrLuX6U3N9dfXGh74/dOi99Uci7TRd73kg/8RRnNhczoq91WJyiqh8R/Vn
EnTMneu3dJb585tV//S0JX8XFRcXG5daXL3FpDYxAQBwKZ2SqKqqyrjO4vb1
YMcPNiz7/mVBi4ymPrTH2DvjUP3CseZFls7NIo8drF9V3vXWXnMuQxfWR3zj
4+NH6u8dKt/hQ7vdvg+6c5rL+40if6Xd/IuSo61tXsjCsHNbt+5V/XPTmXxO
mltMuvRSi04xAQBwI82SqL6+ftSoUePGjXNzZ/nvg9W5PWVl6PeX7e7ZxD5k
Ut46qBLN4q7jvuofXubwifuBck5zcdpRW1tnKSwXXuh/910n3iBOG+YWk8OH
D3fjpRbNYgIA4Dr6JZHP5xs2bFhaWlpDQ4Pq85QoBSZWrhlqlJXt1u3sjx3c
8+TCrrcG7kRs6RjdhcV2Kr+X9/Y8NFVcc1+9I+9pPHjBzWXXLtHerr4yKD9C
F4ZlZrIwLO6am5uNSy2u22JSv5gAALiLlkkkO4txYuDezhKt7u1ajBsaH6lf
aLlxsfVGx0deLf/hUH3bSjCzudx559eSvLm0t2eNH3/a0lmeeMKr+kekP7/f
b24xuWrVKtW/KSOlZUwAAFxE1yTq6OhIT0+XX508PVB9kpJAx18tv35o9z3E
jMmUYL3vLXb84O5lP7x+YXVz50qw4294ve6cuB8omos8du2qsRSWL37xf954
46DqH05SaGlpyc7ONi61uGKLSV1jAgDgFhonkewsxj6SK1asUH2GkiADWA8W
2Ktl+veXNRhLyo4fbCgtb4h4SF8T3c3lq3fe+eUkbC5Llhy2dJaJE99Q/TNJ
IsalFuGGLSY1jgkAgCton0SLFi2SX2NxcbF2tzsOFbQe7L8Per3W8ZYeXTtL
9n3xJcnI5vLoo/ckW3MJuzDsgQd2qP5pJBFzi8mMjAwnX2rRPiYAAA6XDElU
WFgo9Nyipbeu9WBCXLOw/OmQafyeh4W2lQEN6ess2ZqLz1dqKSznnXf6xRf3
qf45JJdt27alpaUJB28xmQwxAQBwsiRJImOLFtlZ3Hy74/50NZGh13SPpYTT
fRXGwjqMn+yM5iK/Mdo3l+XL91s6y8UXv6l5tXee1tZWc4tJ+dxT/fvSKkli
AgDgWMmTRLKzuH+LFiSUPG9vaGhYunSuxs3l1KmJoQvD8vLqVH/vk445iW9c
alH9+7KX5IkJAIAzJVUS+Xy+4cOHp6Wleb3cwRUDoHdzCV0Y9sUvnt6y5Xeq
v+tJQf4uWrFixbhx44yqkpGRsWrVKqfNsyRVTAAAHCjZksjYVjIpt2hBDOja
XGpqdls6y9ChrZLq77eejGdRcXGx2VPy8vKqqqocu5tkssUEAMBpkjCJOjo6
jG0lt23bpvrMBW6lWXM5dWpiZma7pbNMncrCsFiSBVD+zjFuC2bsHZmbmyt7
ijMH7YMlYUwAABwlOZPI3FYyebZoQZwEN5dly/7p5Zflyb/6AhLFcehQkaWw
XHTR6Sef3Kz6G+x6LS0tFRUV5nzKhAkTCgsL6+vrVf8WHIDkjAkAgHMkcxIZ
W7TIzsI9kTB4GjSX0IVhF17ob25uVv2tdSWv1yt7inEx1xhO8Xg8ThtOiVAy
xwQAwAmSPIlyc3OTYosWJJCrm8vcuX5LZ7nqqud5dUTI+NEHD9HPmjVr1apV
jh1OiVCSxwQAQDmSyNyihRFjxFZwc1m+XLiiubS1zbMUFnkUFj6h+nvpaMZw
irGRijGcYgzRO384JULEBABALZLoXHdnYYsWxElnc6n3eHJd0Vxqa+tCF4b9
3/+7S/V30XHkrwvZU8zhlEmTJuXm5rprOCVCxAQAQC2SyOD1ekeNGpWWlkZn
Qfy4pbmELgz753/+HZcgDc3NzcHDKcYQvUuHUyJETAAA1CKJTGzRgoQxmsu9
997uzObS3p41fvxpS2fJzS1X/W1TRv68wu7w6PbhlAgREwAAtUiiYPL0w/g/
TuksSIzW1tbt2zfn5t7otOaya1eNpbAMG9a+YcPTqr9hCWXu8Ci6aTacEiFi
AgCgFklkwRYtUMKBzWXJksMhA/i7k2HNpDFEbw6nGDs8ajmcEiFiAgCgFkkU
SnYWc4sW1adOSDrOaS5hF4Zdd90qXe9ybOzwaBlO8Xq9qn8hqUdMAADUIon6
whYtUMsJzeXll9daCstXvnK6tHSZ6u9NLIUdTtF7iH6giAkAgFokkQ153kJn
gXJmc7nqqpQ1a4TPl9DOsnz5fktnufji/W6/y7E5nGL2FGM4JUmG6AeKmAAA
qEUS2WOLFjiHkuZy6tTE0IVhl11W5sa7HBvDKQsXLgweTknCIfqBIiYAAGqR
RP2qr68fNWoUnQXOkeDm4vOVWgrL8OGn58+/T/W3IVLGcIo5RG8MpyTzEP1A
ERMAALVIokgYW7SkpaVxu2M4SlBz+XJcm8uaNU2WzjJmzGH5oVV/A+x4vd7g
IfqMjAyPx8NwShSICQCAWiRRhOR5Dlu0wLFkc6mtrcrNvSFOzeXUqYmZme0h
dzmucdplR2M4JXiIftasWcmzw2OcEBMAALVIosiZW7RUVFSoPi8Dwotfczl0
qMhSWEaOPD17doETbklhDKeYOzyOHDkyOXd4jBNiAgCgFkk0IPL8R54IsUUL
nE+ew2/aVHHLLeNj2FxqanaHLAzzP/posSwLyx9ZWfDjQnnIP2zdtj0xI/kt
LS3BOzxOmjQpyXd4jBNiAgCgFkkUBWOLloULFzrh/1sG7Mmz+iefLItJczl1
auLcuf6gwtI2ZtwS+VoovG95+YbaHS8dksf6Z3fJ/xyTdpUsL3FaMNbc3Bw8
nCL/UFhYyHBK/BATAAC1SKLoyBMktmiBu8SkubS1zTPayohvvCxfArKn7Hvv
1MGj5yyH/Ev5JvmArdu2x+STly+0sDs8MpySAMQEAEAtkihqxhYtsrM4be4Y
sDfI5lJbWzdseO03U8e/sLcttKoEH/IBl6ddVbpiZdSfqrnDo+jGcEriERMA
ALVIosGQJ05s0QL3iq657Nt3+WWjr+q3rQR3lh0DvLeeMURvDqcYOzwynKIK
MQEAUIskGiSfzzd8+PC0tDSv1xuns0og3szmMn3612pqRFubzRiLGHfFyNrd
vkjainHseOnQmLQrI1k8aezwaA6nGDs8MpyiHDEBAFCLJBo8eUIlz6zYogUa
6Le5/Pa3l95Z8JPI24px5N+9ZGP1pr4+aNjhFHqKcxATAAC1SKKY6OjokGdZ
8ptZXV2dyNNLIE76ai535KYP6PKKcch/Mu07twS//76GUxiidyBiAgCgFkkU
K7KzZGVlsUULNGM0l1tvHTN9+lDZXKSBthXjkP9QlhRjOGXhwoWW4RSG6J2M
mAAAqEUSxdaiRYuMzsLtjqEZ2VxKSu69KXNWdIXljjsXTp8+PXg4hSF6tyAm
AABqkUQxZ2wryRYt0E9zc/O8gsXRFZb8u5dMnDjR4/EwnOI6xAQAQC2SKB7M
LVpaW1tVn2MCMSMLy6wf5EdXWPLuWuz1elW/NBENYgIAoBZJFCdGZ2GLFujE
7/dHPcNy6bfGMlDvUsQEAEAtkih+fD7fyJEj09LSmpubVZ9pArEx7Tu3RHGX
sB0vHfqXb09R/YpElIgJAIBaJFFcyc4ybNgwtmiBNjZWb8q/e8lAC0vxsjVP
VDyl+uWIKBETAAC1SKJ46+joMHbu3rZtm+qTTSB6fr/f6/X+4he/GD7imzte
OjSgyyvfuOxy1oO5FzEBAFCLJEoA2VnS09PZogVu1Nraatnh8eZbv5d6+RX7
3jsVSVuRD7t+6q0bqzepfhUiesQEAEAtkigxZGcxt2hRfQYK9M/Y4TE7O9uy
w6PxfL7vAc+MOXe+sLfNvq28crBdPkw+WOmLD4NFTAAA1CKJEoktWuBwLS0t
FRUVxiJGc4fHsDunLCtdmXr5uPXP7uqrrTzzm5flA5b/8vHEv9AQW8QEAEAt
kijBVq1aRWeB03i93hUrVowbN87oKRkZGfKJ2u8Oj/JfZf9o/uSpt5Surqnd
7dvx0iF5yD/I/5R/OenayWy8ogdiAgCgFkmUeGzRAieQldkynJKXlyefnAOd
jpe95omKp36QOzfnzgXykH+Q/8l29johJgAAapFESni93lGjRqWlpdFZkGDG
cMrChQstwykdHR2qXxZwKGICAKAWSaQKW7QgkYzhFHOI3hhOMYfoE+cDb73H
8+ijP19fmCJSFnjaPgp624dHX1m05NohQqRc9NNdb51N9KeGvhATAAC1SCKF
ZGcxppvpLIgTYzjFHKLPyMjweDyK1mu9f+hXI0RvQ5Y0Hut664dHd313cs9b
5nuOnlHxSSIMYgIAoBZJpJa5RUtFRYXqc1towhhOCR6iz8vLW7VqlTO2bjxz
8uA9OSlmMZlZ8M7pwF++NieorXCFxVmICQCAWiSRcrKzyPNJtmjBIBnDKeYQ
/ciRI40heucNp7S9sfyrZjdJWf/OGX/5gtRFnrdPqP7EEB4xAQBQiyRyCGOL
loULF3K7YwxIS0tLdXW1OZwyadKk4B0enensOwXTzMspkxfcOWZWwUHainMR
EwAAtUgi5/B4PGzRggg1NzcH7/Ao/9DXDo9OdHZP5Q1DuhvL6DFb/8i8ipMR
EwAAtUgiRzG2aJEnn9zuGKFkkw27w6MzhlMGJHgAv3NVWF8PPPvmnsUpQky7
YbefUqMKMQEAUIskcpr6+vpRo0axrSRMra2tYXd4dN5wygD0WhU2rdLbx4h9
z8P6fgzijZgAAKhFEjmQsUVLWloatztOZsYQvTmcYu7wqPrpGRtn2zz51nuF
hX0cV1jUIyYAAGqRRM4kO8uECRMEW7QkH2OHR3M4xdjh0TXDKZE5G7gt2L+W
FpqNxXZVGFQjJgAAapFEjtXR0ZGRkSF/QNXV1apPohF3ugyn9OvMybc9hSl3
FBw80fteYY9vPWks+fqw7dnH64w/f+Ct93ieK0kdMuRnFSdYEKYMMQEAUIsk
cjLZWbKystiiRVfGDo+hwyma9ZSz/qrHZp8netw88zVj+ubdxsVfMC+ydG4W
+dHRHfMLXg28NbjODFnSeEzt15DciAkAgFokkfMtWrRI/pjkaS23O9ZDX8Mp
rh6i79vfj225oqespOTMaTpmrv7qPckiLLMq3Z3lysm7/qbmc0cnYgIAoBZJ
5AqFhYWCLVpczhhOMXuKMZzi9XpVP7ni7qy//GfXBnZdGXLHY+XWDSI/PPrK
oiVdby3zNB0NnmTpLix9j+QjIYgJAIBaJJFbGFu0yNNdbnfsLsZwijlEn5GR
4fF4NBuij4/uvVq4obFqxAQAQC2SyEWMzsIWLc5nDqeYQ/R5eXmaDtHHzdk9
lTcM4QZiTkBMAADUIoncxefzjRw5Mi0trbm5WfVZOayM4RRziN4YTnH7Do+q
sB7MOYgJAIBaJJHrGNtKskWLc7S0tFRXV5vDKZMmTdJph0dFgtaDnflzXV0b
F1kUIiYAAGqRRG7U0dFhzERs27ZN9dl68vJ6vcE7PMo/6LfDozJd68GEmFxU
sOnVt5hhUYqYAACoRRK5lOws6enpbNGSYH6/37LD46xZsxhOib2zb+5ZnBLY
nGXRdu8H1BXFiAkAgFokkasZW7TI82dudxxXra2tYXd4ZDgFyYCYAACoRRK5
XW5uLlu0xElLS0vYHR5V/8yBhCImAABqkUQaMLdoobPEhLHDozmcYuzwyHAK
khYxAQBQiyTSA1u0DJ5lOCUjI4PhFOAcMQEAUI0k0oY83x41alRaWhqdJXLm
Do+W4RR6CmAiJgAAapFEOmGLlggZOzyGDqcwRA+EIiYAAGqRRJo5cuSIMXxB
ZwllDKeYPcUYTvF6vap/aICjERMAALVIIv2wRYuFMZxiDtFnZGR4PB6G6IEI
ERMAALVIIi3JzmJu0aK6LqhhDqeYQ/R5eXkM0QNRICYAAGqRRBpLwi1ajOEU
c4jeGE5hh0dgMIgJAIBaJJHePB5PMnSWlpaW6upqczhl0qRJ7PAIxAoxAQBQ
iyTSnrFFy0033aTf7Y69Xm/wDo/yD+zwCMQcMQEAUIskSgb19fWjRo3SY1tJ
v99v2eFx1qxZDKcA8UNMAADUIomShLFFS1pamktvd9za2hp2h0eGU4B4IyYA
AGqRRMlDdhbXbdHS0tISdodH1d9LIIkQEwAAtUiipGJu0VJRUaG6i9gxdng0
h1OMHR4ZTgGUICYAAGqRRMlGdpasrCxnbtFiGU7JyMhgOAVQjpgAAKhFEiUn
Y1vJ4uJi5bc7Nnd4ZDgFcCZiAgCgFkmUtAoLCxVu0WLs8Bg6nEJPAZyGmAAA
qEUSJTNjixbZGhJ2u+Owwyler1f1dwJAn4gJAIBaJFGSk50lAVu0GMMpZk8x
hlMYogdcgZgAAKhFEkEWh+HDh6elpclaEcOSYg6nmEP0eXl5DNEDrkNMAADU
IolwrrOzTJgwISZbtBjDKQsXLgweTmGIHnAvYgIAoBZJBIMsFBkZGfL5UF1d
HUVPaWlpkf/QHKI3hlPY4RHQADEBAFCLJILJ3FYy8i1avF5v8BC9/AM7PAKa
ISYAAGqRRLAwtmiRnaWv2x0bwynBOzzOmjWL4RRAV8QEAEAtkgihcnNzQ7do
aW1tDd7hceTIkezwCCQDYgIAoBZJhLDMLVqam5vD7vCo+hMEkCDEBABALZII
fTE6S/AQPcMpQBIiJgAAapFEsCEbCsMpQJIjJgAAapFEAAAbxAQAQC2SCABg
g5gAAKhFEgEAbBATAAC1SCIAgA1iAgCgFkkEALBBTAAA1CKJAAA2iAkAgFok
EQDABjEBAFCLJAIA2CAmAABqkUQAABvEBABALZIIAGCDmAAAqEUSAQBsEBMA
ALVIIgCADWICAKAWSQQAsEFMAADUIokAADaICQCAWiQRAMAGMQEAUIskAgDY
ICYAAGqRRAAAG8QEAEAtkggAYIOYAACoRRIBAGwQEwAAtUgiAIANYgIAoBZJ
BACwQUwAANQiiQAANogJAIBCAgCACKjOKwAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOD/b+/6f5q4/3//gPulP/IDCUnT
hB9MjCH9AWOW9geIS5NiZhqCkqYYSUs2UtRIxQiaWVj0zLY223DvrdlodJaN
hvesDrY3nQM/oduoWw00rg5wddpNkG+ppEjh+Nz33l3v2rvjoKCvRzKTcb3X
PV/P1/Pr68vzBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw2gJJx29/Goyn
i00HAAAAAAAAAADArsVyzHfSIhOXQ7NrrMaQ59HrbUZNaYX5fG9sESlSl3Ys
kPSTyK0v4FZ7vbECUpVUGC2Ojo/9ww9m0+tb8LHZ0U4jpKpsDT1TvnGxmA21
VqhKTg/OrRX+LYA0rKUmrtkNh88EJ1eLTcpuQ3p6sBt2tdowI3ZYr7EHkpli
kwQAsAOwNj34wWVXqx3TDLNeYwkki03RqwzA7V0P3AvrSjWmS6HkSrGJeR2A
+24clxxGtYqGxuhwwSxcbLUdNVaUZH+iOuiOvmA0tTYXOldOPyy/MLK0BXH4
bsXqfPSrFn2pSlWis7z7uf9rn/uEUQMRrIL0p3yRfxWNmVaeBk/jY4FawcdK
NiwFyLOgHROpPfbgE5C9Kgtk5s55AypOkLZ1aL7YxOw2ZBamo5HwDz2tB3EN
tIGEBQAAA7IwfW8sPPRlK2ZbVCoQQm8pALd3Pf4ddOzFgzj1ge5xMC27nchE
YE02GdHDkRTPj5D0bOw2XEuMUUVraJbxLBWB9Yx0xuwFW4FIIOk/vqjFQvd9
Vu/9FBm7I5nkDx2EpcKSljc7hv5WKGxCVqf8DVoiGypiwpJ5FnQQKbC6IfD0
9c1YMrPhwOC0orqw+tDfsA9Lfu090XmwwCITyGN/LUhYAHYDkNlwz+D0dkVE
q4/9DSCE3i4Abu9eLMe9R/BIa78z9OyViHG2IFzZGohKWHAgqejVWq1KVVbr
f8QYI7DCIoD1h75DZdhkeNPNJEumkdXJa3X0spa6wTe5vPmvIamIx1RGr5QV
LWFBpv1H3jS+qcXTsWP+xMvikFF8oIm8JY82SQYyNwbXQGjye/XnmcwrYSOL
hWTAAhIWgN0A1DtXwJHtEtNMMmADIfR2AXB7NyMzPxW+c+d+Mv2KuGKlw5Ut
g/iEBY2ZliNXKtFomGNCsTMsHeYKDTjDwsR63FtNrKLojruHn7CdzmIEPkgz
XYGVCPLoCo2iJSxIwn/kyPX7/2vDNxGWHfI9fE3TVyQRsJqUswD4Zj/tUZgr
SADSARIWgN0BNKa1a0HC8moCcBtgx0DhcGULISVh2dh4+bt7vxqyBWe2i7xd
i7W5wVPZw0F7usLLzJwEeRn17KefbnYlAo9mIWPnDXd9kROWdNx7DDu6sjTc
Xo7nT9Xe+GuZsSBPAw3qQtokHi/Hve/A3ydegNkABQASFoBdATSKaCjnTg9u
IUAIvZ0A3AbYKVA4XNlK5E1YkHTyQSTygLHuhReAel2jUClYmwk2Z5c8oObg
DHsn8lKoNVvJoLJ9ZE7uh4ijK+W1V6MpMhIrXsKy/sD75sngM9TBLoRdepwS
ozu6C7RAYSAzIx2Gwuk/QFEAEhaAXYC1+ZGLutz9DFsIEEJvJwC3AXYGdlW4
kjdhIXSK6dnTca9ZVdYZXlF2rjeTmv0n+c/Cq7IhEAOSvNlEHoHPPcbC4bv8
/AI/uqLR2gOJDLJR5IQFWzbStwzOYT1FlsNde/D9bvvdv2/xOZb19MKzJIrp
WCSWFH1sjHzrcfy+lLcKAsmkJofgo1ox65UKAFec5JPp2G/3phd2rvYg6QWU
TIzOaCypwImtTUGBhGWXsF0A5Gg8jkdZk1HiobzukCRhOiyFJPK1RDz6W/Hl
SgiosJBdi04viBO5zOLU0Pu1uPsACUvxIWMERTQKuE0BdZrPSQYrZE/l2ZNN
G8YtEhWRkMHGbQ5XFEDehGU51l3D9uwET56nyGO/a7Ohy9T9LIf1GkjAvK4u
xIf97jYbfhMJHlDrzbY2t384PvtvPOQ9Z9bhfy7RNfVNrSJYWuR3Us0ewYsq
s6KLtbj/Heox3iQ7PsceW4mHZr2W7BTy4vHday5btUYFafQWZ/cPUyn2kkdm
Lh66Rt2WQkCLUtkKfxEMTy7IOea8lpq+6+92d/vvTqdyCr0ossJCHF3RdYRm
cOYUTlgy89Eb7WaduqKu/frv8wpHWqmo25KtILf8K1yp5tsOl9uLpemRXnfH
+cvuD2EY/hD91309FA33OZs8rALavHgcsDDkFzP+hLCdbbY1Ws0mo9nmdPcO
x+cyBd5CB+uOt73JYjZUGFqujj7lSDF+mY7X5ThGip21xeW9HUlyOvZP6OLh
CsZRIhZ4VSPzLIo1W282H7XU15rrHK6eH+MLjApgCxEf/F479l1UmHWsYWWr
Lt48klmIh3oun2t522o5bNC/1Yw2N73Ez/3M89ig19XShPLJUn/IaDru9PTn
9Iju/ybGKCuWlGSiujbc63Y222xWs9FEmoKFvHXPkOVk5DZKrpUcgGMOl/dW
5Eler0KanUazuRYdMdvbp109IVQSCiQsKzNR9EOOOnNtveWo2VzvIN7K8o2P
7TO/93vOOWzHLfUmvaGuBe6PzhD1+ZHM/Hgw+8ji9PyXeiQakphfQKKoMIkE
xgQkNfmj97wNNeAVbzqu/l+ygK2TrDsySMrgI+dstmMCYqxFdRgTEA5huXKF
MupHb7vNYtZXGhyfjXKvSCg0spK5jY472rNOtEVzPaqfaM+60BaZdPK5V1Qs
f+zpPNvSfMxirtab3nH13GE4CNSldrHvEWAiN6hABQzV484Wu60RtREmo6mx
DdPj/Jd8kQqIakadxdJgs5/GR2Q5XwgtyVwQvs/9bvvlD904E92wxxeKjPWd
M3uihYqe5bkvaW0h8hV8ud1hJQKDai43JIzd6nzse6/rpB1VTMsRk/GtRqw/
PPZE+gjmsk46t8V6HHGQYzwF2yJ103YEVWerzdYobL3FdYFdZpbwkqjF6Pec
cdgb0VHWV9e2vB+IPiOFIPN8IvgR9eggak/76Uck5NkT0YZR2CPziQpqc/6L
9gTVmnqjwVB7Ag78TtXMWZ2fuJV9ZDnj6f9duJxOQVPDy0Y0pu3pPHey2Vpv
NhhMzV09P06msl+QHq4oKUgyIZywIJnkgFOnzjsViScsjBCfp5uZv0Odh/FP
lJvae4bCY5HIWHjouosskqyCDG03RqJjPcfxNohLXvB7LZnNchKWmK+RTGTI
r7ITFuwx4220U8+m/E3lumOXb9zyt1cRn2WteiB/D5x4A/99uaX7fxEcYyPf
djuqyEzK9mmO+9sMyPIFJGSWViOOrtTAY3NkPwomLPTREgwH2keeb6oTHCyP
uirOhrIdQfMXI8F/V3hB8K3M30Md5jrPXaaHRdJ/hToPQeJT/sziH75GLDsy
e272tDV19Y0llnBxQa3rg5vtb0KqvbXwHU4khqSTYbcZY4elLzHV13a+b2I+
NeWrh7gjspaK+Vv0lbXwd1mzjJqCAbi2vLrFP57K1VZSqQqUsMgkhzpNe7SW
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
VWJ9Zw==
    "], {{0, 522}, {1083, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{601.2428571428583, Automatic},
  ImageSizeRaw->{1083, 522},
  PlotRange->{{0, 1083}, {0, 522}}]], "Input",ImageCache->GraphicsData[\
"CompressedBitmap", "\<\
eJzEvXV4VNfawJtToT11py2lpUILpUhxK1IcijuU4i1aHIq7uzsJCQlxN0Lc
hbi7eyZuxH53zZ7Ze9Jz+p17/7vzPJkya+8lr8t61+rU5dvXrN64fPvalcu7
TNi6fPOatSu3dRm/aatoevFfenovLNTT+9dXXfTU/0ZPT/l6MR1Qaf/0vpe+
O6iqS3NUoQE+KlcXF5Wrq5vKJyBMlV1S9Yb0+GUVzfWq1PhIVYC/n8ovKEyV
U1ylt1l69qL0LCMtTVXbil5fqe0V0VajSowKU7k/cVG5uLqqnnr6qGKSslXN
4um32inri5NVluaPVY7OripHawuVjZOvqq6NDdrHVSXZqhB/b2VFvoFi2tKa
BdoVtTRUqhIiwlT+vn6qwJBIVVFlvd6f0jM9vRdr0X30ukvfrxJub8Sp83cJ
iU0hOyuL7OwcMhLDeXD1Evq24W9Ir71MTWUZpapy0v0fMWToNJ6k1ettlp69
SFqYN4Gx+dKvPtL3v6nJj+DMyZNYe4SKIbPIysomJzcDL9tHnL+oT0Ftq15X
7dg0VZMS78XEPj2Ytv4maZkFehu0ywuzNeDUxXuExqWKMbTLS3jGvcsXMXSI
nC+91kF8tVFZVopKLDHE7BRDxi8joZqNaEEvbw96N+2621ThzPp5Hu456L2k
baPyGTPHzcCroElPA/tL5IfYs33lanaevEtmRaMMNtQR4OVFcWObFuwXubl1
KesvuGk7atqub1rClms+0q+uSt8aFg0ZwPIzvlpQRVtZCNNHzcc7v91ySoOY
Pm42/iUtegu0o0a4PGTVst85ftMCVUOrDOOn7WGUPlXFuSQkJJFdqOaAFhKj
Q/D19iY6OV+gS/OpKy8kIzOLnLxCnkstLWQmJVNa2wTNmpbG6lJSk5NJTs2k
rplXpAk/o6W+nKToGPKKyyjJTSc+PpPGpgbSkuNIzy+mtCibhLgMGhoqMbp6
gRtmbkTHxhIr/cXwLMiTc1uWMW7uDrLqWrULaiQ3K1Mic0llvdRSW5ZLUmbh
iwpSmwiwuMuZi8ZUtPCS0txMXkaqBHB+aU0Hqfk1CrPTSUxMpqC0SjtBG43P
NXCV5GWRnJREZl7p69pRasvyxQgJZOQWCUQgk6GiKIdE0ZyWXaj3irbteXMj
2kXradb2Jq11KjIzMsnJyaNaMwkFWanklglQWmpIjokmt0hIUn4mcbFp1Dej
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
ryFCWsYzetQoRom/7l0+Z+U5d7l3rNMlPnj1Bd74+hdC8xrlysswi4PSRAN/
O6skbeuzgxnb5Q0x+CdccklQTrhSi5WpNTnV7bd9Ehj2/quM3f5ISTWk+Txg
3Sn9v53IrIy2Yc7qs1I1r+50fiM7pg1n6OIralUrv1qd7ES/z7tz6Wmq0n3b
1J+Y9Ke5shCp/PXCRvqN30pZu21Pmov4ffxw1t/0VrZgA25soufAJZrrepoL
sXd/qj5yRlmEJf26D8MiRr43tAOJQT6ExGruikiwOESPwXPJ0V2iUxdnwdvf
D8Upp0WJQyn04btPB2ASoSl5jTLdKZzKAUTU6OLQdJezvPveTwQXNlMU48fF
83s4axspQ+J66wgbtRdXy55hRbQpn3ftxsNn7UpshDG/t3Um3cZspEhbCZbl
q0+/3pPwyXuue62VO9vmMfK389ras3rOrJjElK0PdPv+r9JY4EO/d77mxOMU
LW8382D7XPrNO6zeNVd2jYXL7ykC4DJJtp6zbNpAJp120VVBKk3taqwb+W3q
AKacfaJU+Dbl+rN+9xEyGtptSDensnTJNmLEdAW+9+n5/Rg8MhtkYkT5eBGZ
qrkyyH7nXIZP3KXmk39rR7Q9sYqvh/0l+dMyJhuyAvj5h35cfJKh0DQ7Jhif
EM2VQkkWR/m202D8i5t12Kpj37xhDF9xWZs0Uq/Lga9/7I1NRrM8cltdJktG
9uf3q56KnFRmxeAfnkqMtwF/njeRJywJNWX+BnWRcRPHF49jwh83dfzdgZbK
LJw8AqjR5m5OLBzKtN3G8hmiW9vG0XvNeeRPXbw1X3zfC6s0jY/r6exOtkBK
RdAd3nv9YyzS2xRerImx4jPhwJikqMgVPlRJUQEH541j8UFLpUS7LsGBzl98
yUkfzQUutbGmvPLap9x9VqOM05z5hK/f7cpt/xKqM2PwdjZhzfZbf6s0J9uf
39WX6zW1v1CqmZNTRjB91UOdfLSUsW5INyasuqWZL9GBP/afV5/xUmpEKBbe
9bLDVAqcHZ/yI9+N3K8nn6u7uXIM/SYfoqmlHDfhYKk/IXc303PMSvUhG6WM
zv4IHw+fSoYWq+piy4m9B3PVPUsBPeTBVl7tPo5IbUW4Kt6RQT1GYRVboXCQ
7YnVDJy1m9JmHVg1ad6M7jUc/eAi5T3PG1vpLeQwr1H3XmtVIjP6fc+6K15K
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
l14Hzfcf+T/zodaI\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "- ",
 StyleBox["Homogeneous coordinates matrices",
  FontSlant->"Italic"],
 " "
}], "Subsection",
 CellChangeTimes->{{3.7094619492573824`*^9, 3.7094619624719625`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
F+rqG2rOnr/4ZE+wlVj4o572Ftf5+jpXh3fkvhnqVOrq7RZDfRecWV3oC2m7
ee+TjYKzl9WnvXctfrk6PcU+9LQ86/71pbaOayMH3aRO0+BPRP1NSp66eqMB
the0eR6wVCcYC1/vfHt4hqoaAKxEr91ob3bWut4ZijxS19TE7Oee6oqqy59O
q2o87Lvc+/l06l0PK7HRd2vsT/eNPdKsGaVCXQ3L0jT4lyO+xkLraqXRFzng
Xtx7//4DvW9xOfz+P1z/OkZVDQDWokOJmCyer19o/Oc7T7Y+ezzpu2BTzniG
P3/vNd93y6m1R53+9HJVmUkuMFJXw7I0Df7NX15IXb3HMSVpA7MbALBf2i8i
y+H+c62+yfjWn6XvorQddpx8MfNQz+J4X226GYd/0f8NdTUgKupqAABy0XoR
WV0Y6vxl353lHT8Mvnoodffrqxt7oK2mXqTmqKhq/cNY9jd6rMajf/s6sutr
1cTU6IfeTvfft3VeueR+tqm9xzcYnk9o/eUrKy8si7oaAIBctF5EZoLtL/km
H2//YTzsrUs9eNQUmC7ol6jL93yN5TblyJWt++6mtyxu7R2ajGd+tjx3u7fG
Vlal+ev2WHlhWdTVAADkovUishj95oedV5nVSb+rfK9XP+yUrKvfbzlxytX7
+fST/+DRWF/dEfe/fre1hM7s81Z2uu/rx1l+T6mw8sKyNA3+pYn+c1I8twgA
sKZ42Nee2hDN1T10oF1t92P9TcRKbd/4AfZgy2ywZjvSObzlt2SuhK/v1qsZ
IzoNEIKmwb+fffa0qnuZ3QCAoul/cUZdCnmOJj+w7PLQo4PcCB0L/9F9vPzp
K0NbX2cWG+05m7rDpME3qeFN1lzRgmXp816Yo+6BBzkOeTDgTuUPxeEJaTL5
mN0AgKLpv4hkLilr8hrizEXsw7XecS2+Id7AygvL0uc95g6nP5LjiMx7zAt+
OmO/mN0AgKLpvohkSt8sN1ersR++iS5u/8ndgOe19jfam1yXCngV48rC7e5q
m63cdT0c13RLEFZeWJbGwZ/JD/aTfXey34SRuaLtaPBNaDPJmd0AgKLpvohk
rkftvrn68aSvvWPopyc/iI/3P//rwP2l1KYibZVKedvAdK4Wrsbno/du/7G9
6kS9Z+CetpuBrLHywsK0Dv7l+/6WZIawufzRbHWzGvW7bMm6u8V/X6OvpJjd
AICiabqIrMTG/6X97BFHTfdI5gmg3TtXb1j80nPh92NPrjMvhr3PPx+IpP73
8ri39rBiu7Brv74UNTr0W0/SW52/One24df97F8NaEj74E+mghP2HJXzetVt
P9E1vKDVLGd2AwCKpuUikvlKd8vV6cR3vgunKo/adz5zpM6P9l7qHZ1Xt/63
z74RnE1W4yuzwYsVimJv9N/Ps5Kuxic/aK2wl9d3D0aXSnwu27DywrJ0CP6V
ueG3qmz24x235rZPeXXuVsdxu63qrWENd+pgdgMAiqZpXT3pb0xWxGVVHZ9E
E6oanxx8u/31m99853eXK6e7RmbTa6aamA/f7Ot6O/h99o9XowOtxxXlqfbg
VAEXqDa+RK757ZiGt1iz8sKy9An+pehgd315pbP3ViSeeSVrPHKr11npqHkz
yF/NAABBabqIqInpv35w9e3Otman89nmNo8v9CD1GerCxF+8l1z1deedrhde
uth1/bNIzh331Elfg03Z8abFvT5y/XjleOtA1tszS4KVF5alW/CriZmxG9eu
uF3OdS53l/fD0Wnu8gIAiEvwRWQx7H3Glu39iWrs7odX/+n67k1CMi+dUQ61
BRe0apXgnQZoR/rgl/4EAQDaEXsRWX+CKfPEorocfu981/rbFTfeq2h3B6a2
NztTV9uf6vmrZq8yF7vTAA1JH/zSnyAAQDsiLyLq4siVI4qtov1m+lbshdHe
tt7R9YvQiemBtnKloqbrZnTb98KZhxyV8hbfvQO8JD0PkTsN0JT0wS/9CQIA
tCPyIqI+Hrt62nbotPfu6tpKbOz6K29//mR/gMT3wbcve/xfTsY2m70an/y4
o6pMKT/nGfxBy5MRudMATUkf/NKfIABAO2IvIurDcOA3La7WX196pcM7HN3x
yJK6GA195O1szTzYVFdz1tnm6f9kfEbT7QLWRO80QEPSB7/0JwgA0A6LSBHo
NFiW9MEv/QkCALTDIlIEOg2WJX3wS3+CAADtsIgUgU6DZUkf/NKfIABAOywi
RaDTYFnSB7/0JwgA0A6LSBHoNFiW9MEv/QkCALTDIlIEOg2WJX3wS3+CAADt
sIgUgU6DZUkf/NKfIABAOywiRaDTYFnSB7/0JwgA0A6LSBHoNFiW9MEv/QkC
ALTDIlIEOg2WJX3wS3+CAADtsIgUgU6DZUkf/NKfIABAOywiRaDTYFnSB7/0
JwgA0A6LSBHoNFiW9MEv/QkCALTDIlIEOg2WJX3wS3+CAADtyLKIJL6/2eFq
D07p8mGydBqwb0YEP7MbAGAOEiwiamL6dn9rtU1xOP0RXT5Rgk4DiqNz8DO7
AQAmYtJFJBGb+TEaCY8OfdTvaaly2NKnwMoLaE2H4Gd2AwBMyqSLSMTvdNgq
z55vavd4PwoN/66OlRfQgw7Bz+wGAJiUFItI1O9k5QX0oHvwM7sBAKYhxSLC
ygvohLoaAIBcpFhEWHkBnVBXAwCQixSLCCsvoBPqagAAcpFiEWHlBXRCXQ0A
QC5SLCKsvIBOqKsBAMhFikWElRfQCXU1AAC5SLGIsPICOqGuBgAgFykWEVZe
QCfU1QAA5CLFIsLKC+iEuhoAgFykWERYeQGdUFcDAJCLFIsIKy+gE+pqAABy
kWIRYeUFdEJdDQBALlIsIqy8gE6oqwEAyEWKRYSVF9AJdTUAALlIsYiw8gI6
oa4GACAXKRYRVl5AJ9TVAADkIsUiwsoL6IS6GgCAXEy6iKiJ2E/RdZG7g33P
lqdOwVbu6hsMT2Z+PhPT7HxM2mnAwekQ/MxuAIBJmXQRSUT9TYpSfqruvDOL
p085bIrTH9Xq003aacDB6RD8zG4AgEmxiBSBToNlSR/80p8gAEA7LCJFoNNg
WdIHv/QnCADQDotIEeg0WJb0wS/9CQIAtMMiUgQ6DZYlffBLf4IAAO2wiBSB
ToNlSR/80p8gAEA7LCJFoNNgWdIHv/QnCADQDotIEeg0WJb0wS/9CQIAtMMi
UgQ6DZYlffBLf4IAAO2wiBSBToNlSR/80p8gAEA7m4vICeelNz3Z9fhG541u
p+5WJ4Pv5OgPT6f7rIOVF5YkRcZgdgMANLG5Su7B4fRHjG6n7hIhjyNfx7Dy
wnKkyBjMbgCAJqRYJbXAygtkIUXGYHYDAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKxrKRL8vSePHt/o
vNHthFWtTgbfyRehnn8dja0a3VBogQQFII21AOYQC3lOKXk4nP6I0e2EVSVC
Hke+CFWa/NGE0Q2FFkhQANJYC2AOLFsQG7nU0khQANJYC2AOm8sW0QjTIXql
xxADyItEAXEQjTAvold6DDGAvEgUEAfRCPMieqXHEAMlFf9u4OpvPJ1tTU7n
+bOVNqXOG44b3aaDI1FAHAZFY+L7mx2u9uCUfp+Yn5qYGbtx7Yrb5Vzncl+5
FgzPJ1SjG7aO5u1GLpWeFENMuhOCBU85m/jE0Ad+//vvddYfTU2ssstDjyTo
ASkSBSShfzSqienb/a3VNrGeNlqKDnbXV/ys2Tscja/v0rMaj9zqdVaW13cP
RpcMbh3Ny45cKj2zDzHpThAWPOW9xcPeuuS8srsHZo1uSimYPVFAJvpEYyI2
82M0Eh4d+qjf01LlsAn2FP/Kwu3uatvhmt5QbPsf7mos1Ftz2FbdfXthxaC2
rdG83Mil0jPjEJPuRGPBU87rwYD7qKKU1fZ/K8HVanMmCshKn2iM+J0OW+XZ
803tHu9HoeHf1Qm10Cx+1VNdplRcDM7uTq0rs8GLFUpZdc9Xiwa0LI3m5UQu
lZ4Zh5h0JxgLnnJej4YulSXDsrZvXI7zNmOigKyMiMao3ynQQpOYCrjtinKo
LbiQ9d8Xgm2HUt+WBaYMma00bw/kUumZf4hJdwaz4CnntzLed1Kem6vXZEgU
kIfl62p1wtfg2OvrMPXb/trkH/aOBt+EAQmI5u2FXCo98w8x6c5YFjzl/JYm
+s9JdHP1mgyJAvKwfF09O5C6lqFUNAXu5zgi9a2uYSmI5u2FXCo98w8x6c5Y
Fjzl/CS7uXpNhkQBeVi9rt54M+opTyiW45CHI52pb8yUYz2juj/aQvP2RC6V
nvmHmHRnKAuecn6y3Vy9JkOigDwsXlcnov4mJU/W3egi2wuBaZ3TLs3bG7lU
euYfYtKdkSx4ytslZsODf/S0nq+rO+dqer6t58a92Ip0N1evyZAoIA+L19XL
EV9joVlXafRFlnVtHc3Lg1wqPfMPMenOSBY85U1qIvp5X9NJe9XlP4dn05Nn
ee6vv7vw8gfD1yS7uXpNhkQBeVi8rt48/UKy7h7HaITmFdgAcqmszD/EpDsj
WfCU1yWL6k86qspsVW/c3PbWm0fjfc7KyjK5bq5ekyFRQB7U1SJnXZpXYAPI
pbIy/xCT7oxkwVNOURe+8FSXKbZaz+3ZHcXzath7OnWyMt1cvSZDooA8qKtF
zro0r8AGkEtlZf4hJt0ZyYKnnKyqp4c6qpLnc6h1YGdVXejO1auL4T80nvyH
kcUiLmkvz40PXL3U4nQ+c/bU6Xr3630fhDbeHa8d8ycKyIO6WuSsS/MKbAC5
VFbmH2LSnZEseMrqcthba0ueTmVbcGbXv+bduVpNxCZv+6/Ul9uUQ68GF/ZZ
D6sPx/rbG7sC4fn0neqJ2fDHnvpyu6PmzeC221FKzvyJAvKweF2dSTKiPtVC
8/ZGLpWe9kOcmBq98e/+on3wv0an9ywYSHdGMsMplzgCfxq6lN42MHtVvMfO
1Y8jgdedSU3tnncv1tlz/YY9rMwNe2pb/JOJrb87Pul3lyuKrbp3tJir3wVi
LYA4LF5X72cXJgMmLM3bG7lUepoP8UrYe8amHEDZGe/dvXZnI90ZyQSnXOII
XH8te64r0gXuXL3+S/ZbV6sTvmfO94092vnzxS89J+wav9FSsriFqVm8rt58
a8BR98CDHIes/4GfbK8npPt8pXl7IpdKz/xDTLozlNVOeWW051i62M663Ueh
O1cXVVerU4Fmu81R9StfeMefMPMjnalZbG8OTGlVWJs/UUAeVq+rN95yu0dj
Mm+5tTUFpnVtWRrN2wu5VHrmH2LSnbGsdcor04EX0he/z/SM7rpunP/m6g3F
1dWTvobUZ+++Lh0Pe+tSjTrtDWv1/KL5EwXkYfm6Wp3wNSSTqv1k353sX+Zm
rndo+h1WbjRvL+RS6Zl/iEl3xrLWKW/c95L13ZHqpN9VvvVStjr9l3/8UzhL
txR5H8jD8I1rff2fTsR2/MrYaM9ZrlfDMixfV68t3/e32JN5yOWPZpvyatTv
Sv4Nbm/x3zfkKR6atwdyqfTMP8SkO4NZ6pTVR0OXy3Ld05K59braE1pI/+/V
hWDXS1lvjymurs7l8dd9p5ONOt46kHUESsL8iQLyoK7eeKoie15dz8n2E13D
C0Zdy6B5OZFLpWf+ISbdGc5Kp5z5M2F3Xa0+vHP1fOqOmCfV8kywvT37tCpl
Xb2+H4itvNF3b5n9QGAF1NVr6d2B3qqy2Y933JrbPu/VuVsdx+22qreG5/Z6
4l9jNC8Xcqn0zD/EpDvjWemU1alg+1OKcq5/Yuvme0vRm2+2tLU+vaXkVmcH
XnrOfz9rqVuyulpdvudrLLeXu/7H2M6bQ0rL/IkC8tAnGtVE7Kfousjdwb5n
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
1sySbAUHJCDRrEw8CPW/fMp2zNnzyfhMfH0pUuOzE7ffv9L66/fDsR0H3/b+
/fGKc56P7268dUJNzN/92HOu4vjfe28/2NkX6o9DV56pufT/bVs11EeTA7+u
suVP0epUoDn1Tbf9ZN+dLGXB+mNZ8jyiLpJCB+5xchH3v3/tH5urbFlqvIVw
8N/f7+9uPVuxMVkeRW96Wi6/Pzq9Hmkrse/+1V1hU8rd/smC3otHSGxYjvga
C62rlUZfRJYXemSoiejnfU0n7VWX/xyeTaed5bm//u7Cyx8MXxP45up9Jds1
XfOtxWaWRCs4IAlZZqX64+Dln9uU3fvfLk4E3qirPGT7Rf+9zWsXie9vdvzc
Zj9/9c7DnVeC1PnR3jqb7ecdN7/f0h3pp2BOvB3KcjFyMex9xpanrl6ZHXg5
lemVE5eGdi+S6lLIk36n2uF633+KeWXKtPY/cJkv37PXeOpEf21qpJ774/D7
r/f+x8K23/povO+XimKruDSYfVOLHQ0jJDI2U1AhdfUex5hRsqj+pKOqzFb1
xs1tL75JxpKzsrJM0Jur95Vs13TOt1abWbKs4IA85JiVy9HAi+WpVLorFa+M
9hyzbT/B9ZcF2E94vsx+2+Lil54TdmXbK7pmgm2VuS6SpGqtPHX17NClE0p+
1Z5QARUZ9mH/A5e52TdH/Rb1O9NL9tnGvl2Lvro00nVYKfB5KEJik3XranXh
C091mWKr9dye3RFMq2Hv6dT5Cnhz9b6S7Zru+dZqM0uOFRyQiRSzcnG484gt
+9Pf6lSw/ank6W2+HUCdvdleYdtzwYqN9pxNXXhsv7mx2qW3I8h6vWUtXYk1
7VlXr9zpO5m+glLTF4ru9kVfTfp+v0OvBhey3mq4uhj+Q+PJfxgp+NbdLW2b
Gv3Q2+n++7bOK5fczza196Tuf0xIcZ2mIPsfuILq6uxfMWf+00LuAT5gSKix
8PWWk53DxZRcwoWEVetqdXqooyo1yK0DO6vqvXeuTvw0PvC7S02u9F39De6O
vg9CP8T3N4BL06MfeTtfbG57461LblfTqz173Re93X6S7Zr++fagyXZNXRy/
3vh058h8nn7I4gC9WjwpVnBAKhLMytWF4KvpO+ZOdo48zPLvibmJr+9GYutn
93jSd8G2Z1598k3ik5dZx8PeutQnOGrbvDdG/3N2+yqWeBRb2mtZmw402XIW
Y5v3+2V7KYaaiE3e9l+pL7ft2eDs1NjX3pbW3qHJjdYuz93urbGVVbX7wzEZ
H/7KYv8DV9j16mxfMW/ua1HAVCo+JJIR8aW/65nyPd6ikpuQIWHNulpdDntr
UzFQ2Rac2fWvOXeuTo5gf+vzXYH1u5QztyiXKxU1XTejBf5xpD4c877c3Hsr
knlgUE3MfdFTc9hW9Zo/nK2O3WZfyXbNgHxb/MxK/uKFydvvd9UfzTEoezpQ
rx6EBCs4IBntZ2ViavTGv/uL9sH/Gp1e2vMDHo32nEmfQiHPNK1vCZvny/qN
Aumoe+DB+k/Uuc+6qsqefIvoOFXvfv2frv/PkXtzeXtt47dlzdWb9/sdax34
cUv6fRwJvO5Mamr3vHuxzr73wpTVo7G+uiPuf/1ua72k/hBoPqIoZaf7vn68
n9+lIY3DY98DV1Bdnf1fC6+riwkJ9b8Cr1xwOl1NbW+9e6lur7cT5iRmSGRq
SKGfWyx9lP40dOlk7gunOXauVmeGu5wt/olt4ZWY8DdXKoW+5119PHb19JEX
//Td1ocDMu+7tJ2+OrbzLSo77CvZrumfb4tKtmtqJPBKKts2t3m6L9WV77+u
PmCvHgR1NSAazWflSth7xqYcQNkZ7909L6XdDzRt7tKQ7xQ27wAsKM/btmxx
mnlsf9epVNR0fLDntb7NKzzn+id2V4Dr34Emf83rQ7nK5vVrLPutqzPvsLMd
2Xa3wMaFoKw7UBlB+/DY58DpUVcfMCQy//m+62pBQ2I/++wZVDyUPko3Lpxm
3+4jx87V6qTvmTO7izR1MfR26pbiJ9d797BxAfnIla33lW3czp11w+et9pNs
1/TPtwdOtuu3du+7rj5grx4EdTUgGglmZeZdbAWdwkYGLyzP7z4qEYuM/uXP
1/u62p47W7mR820VL348lfOCxEbZkPVWycd/7XnKruzxUM9asXX1Wiz8R/fx
8qevDG29MpNZWWwNvknr3GSdUvDA6VFXHzAkiq2rRQ2J3ZcrdynosqeJpOrN
dARk3e4jx83V69c/y6ta/xTecTt15p7nI82BH/KNoRoP/7H5+LGaK7emt3wX
8ni096mCKvP9JNs1/fPtgZNtkXX1AXv1ICRYwQHJSDArN08h6zWK7dT/9NUf
LjjPb+7FtDTzn/djO/P0anxm/OY/tRxPpfsznlC2uw3TvyyT6k/2je+8yrKR
eO0t/vu5v1Qtsq7OJnPF8nCtd1yyXYBz2P/A6VlXFxkSRdfV2YgQEpn3mDuc
/kiOIzLlnK0pkOcFTOawMh14IV0lnukZ3b2Jcq6bqzcuiu6u01bvek8fyvHa
7kJkfvPW5w1z2E+yXdM/3x442RZZV2dVeK8ehAQrOCAZCWbl5nd/2Z8m225x
vC+9A7H95YHZXF8mbq56m9/DRvyNr+U4Pj7pa7Lnekxm62/LsjfUw5DnTL7r
JyWsq1cWbndX22zlrus7r3dJa/8Dp0ddfcCQKGFdLUZIZGr73JMo07OOBt+E
FIG7Uf5l3TpGnfS7yrdeylan//KPfwqvpLeBueH9Xf9fvttZc2auxBZyvTqL
zHZ/5U39u9/nstO+ku2a7vn2wMm2dHX1fnr1ICRYwQHJSDErFwYvpbZy2nHj
6DZq5MNOX2ptWr3X/4tU5t1j/9L5kc5Un2x5u0HE7zyVM9Omb4bc43pMpijY
leoz7wUrfzEQ3fNKYQnq6tX4fPTe7T+2V52o9wzcs8pmIGvFDJyezy0WGRIl
qauFConl+/6W1BNeLn80W12oRv0uW94rjSaiPhq6XJbrKm7m1uvNBJUc7q6X
ct4hs5Z5aC7ZP+VtA9P7y+FqKgi+8LX/vCIVBAsF1eT7SbZruufbgybbUtTV
xfRq8aRYwQGpyDErN15VUHExmP0qx6PxvhczXx2qs7c9tTbFfqJrOGvKy2y4
uu1lDamvoe2N/vtZU+TSSOfhPW4N3dj6aWeqX79+Utm84+n+3Q5WV6vRod96
kt7q/NW5sw2/7rfe/tX7Gzhd6uqDhcRB62oRQ2L95SDZK+f1qjvnhDWjzF8K
u6tD9eGdq+dTN8U8me8zwfb2vSIqsx/IsUbfN/v4q0O9P/Tbt1NR0PlS/VnX
G/23Ct5peT/Jdk33fHvAZHvAurr4Xi2aHCs4IBNZZmXm1br24+0f79rHdSV2
558vvLzlUZf4eL/rmGI72zU8s+u9ujPDXWdtyjFX//iWR7jXb++s6hia3pXp
VxZG3jyRc4lZ/53pr7m33fKnLn93vcGetbW7lOw+kNX45AetFfby+u7BaAH3
Rspg/wOnT119oJAo4X0g4oTEytzwW1U2+/GOW3Pbz16du9Vx3G6remt4TqLv
WTKvUNlxl/JS9OabLW2tT28pudXZgZeey1Fhpqy/zfCYy/v1rhuSC25L/LsP
Wk8o5ec8gz8UtAbsK9mu6ZtvD5hsS3gfyH57tUiyrOCAPCSalYkHof6XT9nK
TrVeG5lcWD8ZNT41/nF3y4t/GNvxTXfih8GeZ4/bz7T7/mMy8xaD1Xj0tq/9
jP34sz3B/9x+t2kqz9uqWl57YfONDOu/fTH6hbf5VINnZNd6sU36gpvdHZjK
9LAaG71aX1Hu+h87W5VVCZ9b3PzCvea3Y5a4xbrwgVuNz09Foz/cG/xNTepr
68M1nr/ci0ajM+vBkYjN/BiNTt7xvZjeZWzjX3+cT/WiGp9P/mP0m0HP0+nb
RE+1+UcjT/7brA4SEiV9blGgkFiKDnbXl1c6n7xcYzUeudXrrHTUvBmU7i9B
dfrTy1WOzWJPjU8O9ba2XP1ievlBquRej43E1LDn5bd3veV8Q7IOf6PK/vNL
gW+KLqozjbnvb0wFQX3fWGE3A+8r2a7pmW8PlmxL+dzi/nu1GBKt4IAkJJuV
yVz91YdeT9tztaeqnna90Pqrdk9/MNfX3InYZOhDb5fbWV9Xf97pdLrcXd7A
F/eyfHN3/8P2196/t7iW+Gks8E57kyv1DgHns01Nz7f3fhCKFvB+8eVvfI0n
a3q+mEusxKPDV11P7eMNd6Wsq1Nb4Dakir/jrQNZb2WVTOEDl54Itsqz550b
nj7lsG18oZy+gLb7X9cvKq5fp3acqtv8x/PpTcGyPDy1RfEhUdq6WqiQUBMz
YzeuXXG7Mh2ZmpIfjk4bfpuKJtTE3J0/e1rr6xqcruea27r9o5laUI19O9Dz
YvrnL3kCd3PUzKmiurq6RK/z29jbvLz1493XiHPYV7Jd0y/fHiTZlrSuLqpX
90uyFRyQALNSJ2rsu7/0e9qannV3/P/s3d9vE1f+P/75A+bGl1zkLaTIki+Q
EIpyEYSq+CIRKFKCFkVRILIcBHIiimxAtSkioSoJ1XaqsraWGrZvq8WiqvtZ
/GYX0y+mb7wl7iphG3cxIlHWpUnfTokhTvNLxnKwncnXM7aDf8e/PTN+Pq6q
JA0nc855nZfPnB/6O44XBUwNFpVX076Ze9c/uzWxkFqpuW/yhSoqtkkUmVej
SQgHvTZlPNtzxjT9Nl2kg/P/+m4628z22//Rde+/dbcm0lZERPPJsn1+r63i
g21xeXUtnypGcACuQa/kvGLy6vglegnvQ5N+GyHar33ClavMoTDF5dVoEkIR
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
Kpv2/uNP37jYn4tPkKbnbJszhvZdmU/CyUvsN2+flpNdWYPtVlnibcnBtsi8
OqP8n2QpBDaCAwiAwHrlvFnWmjUksosVU2clq7ZvMS3Ux+4FE5+xeHJmNGXL
q8Prk1fbSFIsv5U6xyU862NDzNF5KWsektDz90ZMTJayOWs8zAzGOY60XZ0Y
YbpJwlUyhbe0BKU1iTLm1RxpEsEF8yCzElVu9mQqBe0xy8kdZxr5iH5tv9SQ
7V1JbOn1drOM1Pvo2e1tsz7XA8NfjP/4JXXGOLbaIZ/56kwFip6kLVYYXTue
u1LWYLtV1n2LRQfb8uXVhTzJUghsBAcQAIH1SuZ9sajfvJBxRNmYGNmdtoaz
8nl17Oin1FAfnT9pGkjZeZSuDHn1ZmDVMzv5tUba0kNZZ2t7GEiVxO+FkVy0
ZZ5Sez2tPxN7T00vT1JdJCFqGR1fz5jXRQ+4Trq2o/CWlqikJlGWvJpjTSJ6
807mzDmadWetHV6LfWRIz6vptWfX+5jVMW87/pJNo9kp2rAb6CK/UKy2eguL
5zTTIB6bNIckTIPI50mXNdhulSnelhhsy5FXF/4kSyGwERx4ZPvcrR2Rja3M
KaDm8V/q4JjfLcH1yug6TOmw3ZtWeeH1iT+2pGdZVciro6+5k5b80cFfbvWK
RM2a+zufiFVaXk177DeoiI9H3jvW0fuhsS7Or2bF7jHP+JDDvmf/ffxcwr6q
wLRRvo8gO0bHl9J2iC2Nj3aQxD65cTph91HhLS3pd5bSJErNqznZJMIr4x9L
SVHz8KOV5LLQK4+Gm0Wk9OPxlVon/5UQu6UoZSPAhufhHwfVqiMJKTe9bD17
MksSuy12Hsi+ftPPBczs0wv2G58wLWLkbE+H/LLxUX6nLpc12G6VKd6WGGxL
zKuLfJKlENgIDnwS+Qj5krlu6bmd+gPbCHd3an9wp1/HNO9y3L+maI6MWqRY
dm3cI/iDawTWK5lQT0oHL5zePtaVRfs9jw0Drb3UxHbWtBlYXfR4XsyOfdpJ
su2B+sdspAEs+UJbId9SpLG4n5nOSIiEb71cZV6Vx1rSz2PUEXbBbava7JyP
/Y/ZsBNuIqVlMfYjtM95vUciln85lc88YdnWgWwG3HdUEpG45+qY8Bs2K/TK
YTzXSja0qm5OuNejT58OLE7fvzp45qvUhx96MaY90Sw6qDH9yx2rzM2AZ9Kk
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
1v2xZuiQ5596xQGR9NJd1zL7pwZXnvzl+Lk74zfrYXF1retdOP0XeTUAJKpy
TKADUzc6Rd0652rypER43T7SoX3yptL/fug32+iRRqJBOvydJ5RYhOCy/cqB
Acsi3+ZKaqa2TxL1WB617o81E0mqvxuWNpDSyw89iTO0r6f1sqamBqEvrq51
vQuq/yKvBoBE1Y0JtNvcLxGlhs2Qd/yavHkXITN7sv1/gRcO61d6Sme45/SG
io259PIk1UUSpHjA7E78JfTLsUuHyMgzaKQciIv5KPZJoh65pdj+yHf0+mOq
rYEgu6jJ5ZRWuOkytBNCX1xdfL1vBjz/tt7SU9ov7zkXi+xkQuu/yKsBIFFV
YwLtMcvJ9Kg5b5Y1EkRDu/5ppnmSsG/apOocZN9X+ly3Blv6TbPBIlKy0KJV
I2He7ypM7kDiN+IjKUH2mtx8miepleKeJOqRc4rqj/xHe+3D0kg72aWypmbV
eZ1cHckt//N03le5Jkb7p2/1HxmZWC3lV3imp+d94czfLK7e6bVpk7qz/8aE
x8+W8GC/6edgwSUTXv9FXg0AiaoaE0IOKhK4yc5rzqSAH/bNjd978G9PYDPt
/wj7pr6USzpHx5eigZZetAyI9mtsBb8npFceDTeLItG8hfoxdR7K/+xm/wFx
x4Vvptf4FM5rpKgniXrkosL7owDQQZehi5kVbVLbltK+u+PJ1XRw1tQvJok9
Vyb8FWhloXX35O3Rnr1Zipcn/6xpUEyQe0bGM865F1Pv9NqU4aRE+vH4SvR/
CS1alCLJRdty5tQ9GyH2X+TVAJBo6X+O/RcbE/aPzFR8J/jbGYlm2dBnX923
P3F5fDkiEe39/pJUIh39YWU7zm7OGNp3pb3B3NHGrLGPGUtFg+aFwqdY+Cu0
6HzwN3PR7vxv2vkAxTxJ1GNJyl+JMYX2R0H43T7ETEgTu963racnkDueXB3J
q28PtrTKdf/0ljX5o+ct55lDOQbU1NWhbnGpefXtMy0tJ3TjrzKWsfB6D3nH
RqWiju3PxfFfsmfA8qKQxyDI/lvVMRQAOK/K66vnLYNNRJJdzXLK4so0QUEv
WM+0pEZgNh8j9uucbwoJ52+eaPeLmHDOsx0xpQq7DAdJogQNBw0zSRNSRTxJ
1GNpyl+J2wrqj8KwblPvYv7OzDPSnDi5esmmbiotr95JgfVOL94/IyFF/eaF
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
PSK2Uy9+jLP/J90Jfa4TlUuxY14dejGmO9ev+mwsZTl00gqrSAKsP6H7qbQ5
ZXa1duKii8BTfWejOO2AjspU9Oa6/QMJeWjo7sxqiKYDXpf9S1Wr5J2ONnHi
F8c+H2huSdpcXKF4kgvnxlAAqCkOxoR1p/YPksHosVEbnoeX29oumF1p0w60
29x/gnkdye6jIQ8by7O+jl4aH+1Iul5XfNLwbPZHqivxi6T08sPk7ZYes5J9
F8nuyyP7uL3KtDryqkfaY+5nFw+wl5unnpVXvOLqsUKNitfQI6I74KLXoNBr
U19c/mR8qUKzoDsdDR3tJszzTl3pzewZbIie/0z7nn5x/tr4SskfCZkXTAdi
7yBCvz0cPtymMbtSp6MrVdH0yg+j0obEJiaWf/nsxTjVlvjFBunwd4mX4FQq
nuTCwTEUAGqIkzEhtDBh+ECp/nBEfXbIYGPmxLJipzWKuSwmK3YH0ylpI0k2
HVZSd5zejXiRLnY37WK/eHdqJUuRmMk9UjRgWaz79QOMAuqRPVSh4Jsmcimh
HsvfqHgNPYL2zVgopVw5NKS+bJhYKHegpP2OG8dlGZ3WO9aSS/LUOPCOuPVg
6+GURe/spZCD/397d/AaZX7GAfz9A+aSowchMAi5LSV4EKToQaEEVBCRbGWI
YMl6WEYKVSgmLUt02Z2DJBSEQqDmlN0yhzIVFBqaeIhQs6xlXRa7GDBLpmtc
s4YgCU4y1EnUvu4mMXnnnXnfkc/nOBnIj+eZ+T4Pk8z7nsl/1He+P66bQlYr
5cnhvt+eH/jofP6PtXfwFpeSjr/RK4sPbg5+cDgb7Oo8ki8Uv5yr/fa1I13s
7sysPfj/CxD9RPx5srlUzlAgMS2eCesXg9riulVNtX5xuf19t35I+iQtZu1j
ukxH38QW98lunnS9qFqad0RjrH4z/Lu/pun+O+lqdHPzpMVnKBCz1s6E1Qcj
xzLrdy54dn/4TGNv2fD20/xn5Fj7+p1QatdGOF38+b2E2cjyg5FTmaBr8O5i
7ftWx/LJvhTT9aJqad4RjVF9dP33Q1/u8L6zjZSuRjc5T1p7hgJxa+lMWJkr
fZgJ9g/cflqZLZ07PHCr/n8prMfaDcXaB24vVx6Wzr3ff2vOErE9s6XejqD9
0u3lpdnShcP94/NJFi5lL6qW5h3REM/LpcLQm/8fkrB0NbrJedLSMxSIXWtn
QnXx38M9+zq7jnWduPjZ1024pNLWp3l6b/g3HZ2/Ot71/oXPvnKJtm1bWbz3
l56OvV3Hj5648PnXSV+QLV0vqpbmHdEA1bl/fvyHvz3c4l+dmy9djW5ynrT2
DAXiJhMAWkT1uxsfX701J6vTwwwFwmQCAERjhgJhMgEAojFDgTCZAADRmKFA
mEwAgGjMUCBMJgBANGYoECYTACAaMxQIkwkAEI0ZCoTJBACIxgwFwmQCAERj
hgJhMqF+1crjezevXc735Nb15C9fG7v/Y6puNMzb6WNcVJKkVb77R3/PhbFH
jf9NZigQJhPqtFyeuHKy45cfDE+Wl1bXHlldmhkfynXuOXlloryc8OnYLn2M
i0qSrGpl7s7IuUOZIJsrzjT+15mhQJhMqMfKwp0rhzLtR4amFt/8KK66ODV0
pD1z6MqdhZWEzsb26WNcVJJEVBYf/7c8c//uresjhbMHs5m1oWavBppPJtTh
2ReDh3YHHRfHnvx8VVh5MnaxI9h9aPCLZwmcjJ3Qx7ioJMmYKeaymc6uU70X
CsPXpyb/fMJeDSRDJkRWeVTKtwXBrvNjCxv+fGHs/K4gaMuXHilsmuljXFSS
dCgXc/ZqIBkyIarq9Gh3Ngh2Hx35duOvY1W/HTm6+0W2d49O+75WeuljXFSS
lLBXA4mRCVE9uVH7bC7o6C3NbvKM2p8mg9rnczeeNPVk7IQ+xkUlSQl7NZAY
mRBRZapQWxGCA4WpxU2e8vT2wP7aU34xeNdXtdJKH+OikqSFvRpIjEyIplIu
9gZv2SJe1TbzYWnOGpFO+hgXlSQ17NVAYmRCNM9nRk9vd4sITo/OPG/q6dgu
fYyLSpIa9mogMTIhmtd1284WscVzSJY+xkUlSQ17NZAYmRCNLeLdoI9xUUlS
w14NJEYmRGOLeDfoY1xUktSwVwOJkQnR2CLeDfoYF5UkNezVQGJkQjTL0yO/
3vYW4VtaqaWPcVFJUsNeDSRGJkSzk6uKqW166WNcVJLUsFcDiZEJEb26C8Z7
+Rvfb/KU72/k31tL98KU0qaVPsZFJUkLezWQGJkQ1cu7Nm8R3S/v2pzpLc01
9WTshD7GRSVJCXs1kBiZEFV1erT7xZLQtv/qVxvfOu7l53fZ7tHpapPPxvbp
Y1xUkpSwVwOJkQmRPZ8tnm0LgkxPsbzRllAtF3syL7aMs8VZX9FKM32Mi0qS
DvZqIDEyoQ7P/lXY17bJnrC+Y7TtuzS54LO5lNPHuKgkaWCvBhIjE+qxMj/5
6cFM297+8fk3V4Xq/Hj/3rbMwU8n5zf+kzhpoo9xUUlSwF4NJEYm1Gm5PHHl
5J7O3ND4zNLq2iOrSzPjQ7nO7JFPxsrLCZ+O7dLHuKgkzVetLP5QXjfzzcTV
M3tqQy2zp+fqxP2HLx9/vNiYCWeGAmEyoX7VyuN7N69dzvfk1vXkLw3//e5c
xV+7W4s+xkUlabL1y6fvOXDiVG4Dxw9kM0GuWG7IrzZDgTCZAADRmKFAmEwA
gGjMUCBMJgBANGYoECYTACAaMxQIkwkAEI0ZCoTJBACIxgwFwmQCAERjhgJh
MgEAojFDgTCZAADRmKFA2OtM2Jfr+6SwscHRuz8mfU4ASMLqw7E/bTIeCwP5
rqy9Gnjl9V69hWyuOJP0OQEgCZWpQvZtc9JeDdTYqwFgc/ZqAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgDr8Dy9AEdU=
    "], {{0, 774}, {968, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{534.814285714288, Automatic},
  ImageSizeRaw->{968, 774},
  PlotRange->{{0, 968}, {0, 774}}]], "Input",
 CellChangeTimes->{{3.709461945225815*^9, 3.709461946178851*^9}, {
  3.709461982190946*^9, 3.709461988426648*^9}}]
}, Open  ]],

Cell[TextData[{
 "- ",
 StyleBox["Run applet from  \[OpenCurlyDoubleQuote]4) Solving Manually > \
Solving Manually: Continuous Problem\[CloseCurlyDoubleQuote] ",
  FontSlant->"Italic"],
 " "
}], "Subsection",
 CellChangeTimes->{{3.7094619492573824`*^9, 3.7094619624719625`*^9}, {
  3.7094621819857483`*^9, 3.7094622527302327`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source Code", "Section",
 CellChangeTimes->{{3.6980732060967464`*^9, 3.698073211231152*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\[IndentingNewLine]", 
   RowBox[{
   "DGSetXByCartesianSystem", ",", "\[IndentingNewLine]", 
    "DGSetXByHomogeneousCoords", ",", "\[IndentingNewLine]", 
    "DGRandom3DBackbone", ",", "\[IndentingNewLine]", "DGRandomMDGP", ",", 
    "\[IndentingNewLine]", "DGPlaneAndTorsionAngles"}], "\[IndentingNewLine]",
    "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGSetXByCartesianSystem", "[", 
     RowBox[{"d_", ",", "\[Theta]_", ",", "\[Omega]_"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "Calculates", " ", "Euclidean", " ", "coords", " ", "from", " ", 
       "distances"}], ",", " ", 
      RowBox[{
       RowBox[{
       "planar", " ", "and", " ", "dihedral", " ", "angles", " ", "using", 
        " ", "rotations", " ", "and", " ", "translations", " ", 
        "explicitly"}], ";", "\[IndentingNewLine]", "   ", 
       StyleBox[
        RowBox[{"Input", " ", "parameters"}],
        FontVariations->{"Underline"->True}], ";", "\[IndentingNewLine]", 
       "   ", 
       RowBox[{
        StyleBox["d",
         FontSlant->"Italic"], ":", 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox[
         RowBox[{"distances", "       ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"d", "[", "i", "]"}], " ", "=", " ", 
            RowBox[{"norm", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"x", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "-", 
               RowBox[{"x", "[", 
                RowBox[{"[", 
                 RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ")"}]}]}], ")"}]}],
         FontWeight->"Plain"]}], 
       StyleBox[";",
        FontWeight->"Plain"], "            ", "\[IndentingNewLine]", "   ", 
       RowBox[{
        StyleBox["\[Theta]",
         FontSlant->"Italic"], ":", " ", 
        StyleBox[
         RowBox[{"planar", " ", "angles", "   ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"\[Theta]", "[", "i", "]"}], " ", "=", " ", 
            RowBox[{"angle", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"x", "[", "i", "]"}], ",", 
               RowBox[{"x", "[", 
                RowBox[{"i", "-", "1"}], "]"}], ",", 
               RowBox[{"x", "[", 
                RowBox[{"i", "-", "2"}], "]"}]}], ")"}]}]}], ")"}]}],
         FontWeight->"Plain"]}], 
       StyleBox[";",
        FontWeight->"Plain"], "        ", "\[IndentingNewLine]", "   ", 
       RowBox[{
        StyleBox["\[Omega]",
         FontSlant->"Italic"], ":", " ", 
        RowBox[{
         StyleBox["dihedral",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["angles",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         RowBox[{
          StyleBox["(",
           FontWeight->"Plain"], 
          StyleBox[
           RowBox[{
            RowBox[{"\[Omega]", "[", "i", "]"}], " ", "=", " ", 
            RowBox[{"angle", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"x", "[", "i", "]"}], ",", 
               RowBox[{"x", "[", 
                RowBox[{"i", "-", "1"}], "]"}], ",", 
               RowBox[{"x", "[", 
                RowBox[{"i", "-", "2"}], "]"}], ",", 
               RowBox[{"x", "[", 
                RowBox[{"i", "-", "3"}], "]"}]}], ")"}]}]}],
           FontWeight->"Plain"], " ", "\[IndentingNewLine]"}]}]}]}]}], "*)"}],
     "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"declare", " ", "local", " ", "variables"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "a", ",", "b", ",", "c", ",", "i", ",", "v", ",", "n", ",", "R", ",", 
        "X", ",", "numberOfAtoms"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"numberOfAtoms", "=", 
        RowBox[{"Length", "[", "d", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "atoms", " ", "positions", " ", "on", " ", "Euclidean", " ", "3", "d",
          " ", "space"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"X", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "numberOfAtoms"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "3"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "set", " ", "the", " ", "position", " ", "of", " ", "the", " ", 
         "three", " ", "first", " ", "points"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"X", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"d", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", "0", ",", "0"}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"-", 
              RowBox[{"d", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"d", "[", 
               RowBox[{"[", "3", "]"}], "]"}], 
              RowBox[{"Cos", "[", 
               RowBox[{"\[Theta]", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"d", "[", 
              RowBox[{"[", "3", "]"}], "]"}], 
             RowBox[{"Sin", "[", 
              RowBox[{"\[Theta]", "[", 
               RowBox[{"[", "3", "]"}], "]"}], "]"}]}], " ", ",", "0"}], 
           "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"set", " ", "remaining", " ", "positions"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "4"}], ",", 
         RowBox[{"i", "\[LessEqual]", "numberOfAtoms"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c"}], "}"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"[", 
               RowBox[{"i", "-", "3"}], "]"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"[", 
               RowBox[{"i", "-", "2"}], "]"}], "]"}], ",", 
             RowBox[{"X", "[", 
              RowBox[{"[", 
               RowBox[{"i", "-", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"v", "=", " ", 
           RowBox[{
            RowBox[{"d", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "*", " ", 
            RowBox[{"Normalize", "[", 
             RowBox[{"b", "-", "c"}], "]"}]}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "normal", " ", "to", " ", "the", " ", "plane", " ", "abc"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"n", "=", 
           RowBox[{"Cross", "[", 
            RowBox[{
             RowBox[{"a", "-", "b"}], ",", 
             RowBox[{"c", "-", "b"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"apply", " ", "plane", " ", "rotation"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"R", "=", 
           RowBox[{"RotationTransform", "[", 
            RowBox[{
             RowBox[{"\[Theta]", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", "n"}], "]"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"rotation", " ", "creation"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"v", "=", 
           RowBox[{"R", "[", "v", "]"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"rotation", " ", "apply"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "apply", " ", "torsion", " ", "rotation", " ", "and", " ", 
            "translation"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"R", "=", 
           RowBox[{"RotationTransform", "[", 
            RowBox[{
             RowBox[{"\[Omega]", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"c", "-", "b"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"v", "=", 
           RowBox[{
            RowBox[{"R", "[", "v", "]"}], "+", "c"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"set", " ", "i"}], "-", 
            RowBox[{"th", " ", "coordinate"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"X", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", "v"}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "X", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGSetXByHomogeneousCoords", "[", 
     RowBox[{"d_", ",", "\[Theta]_", ",", "\[Omega]_"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "Calculates", " ", "Euclidean", " ", "coords", " ", "from", " ", 
       "distances"}], ",", " ", 
      RowBox[{
       RowBox[{
       "planar", " ", "and", " ", "torsion", " ", "angles", " ", "using", " ",
         "transformation", " ", "matrices"}], ";", "\[IndentingNewLine]", 
       "   ", 
       StyleBox[
        RowBox[{"Input", " ", "parameters"}],
        FontVariations->{"Underline"->True}], ";", "\[IndentingNewLine]", 
       "   ", 
       RowBox[{
        StyleBox["d",
         FontSlant->"Italic"], ":", " ", 
        StyleBox[
         RowBox[{"distances", "       ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"d", "[", "i", "]"}], " ", "=", " ", 
            RowBox[{"norm", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"x", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "-", 
               RowBox[{"x", "[", 
                RowBox[{"[", 
                 RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ")"}]}]}], ")"}]}],
         FontWeight->"Plain"]}], 
       StyleBox[";",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{
         StyleBox["    ",
          FontWeight->"Plain"], "        "}]], "\[IndentingNewLine]", "   ", 
       RowBox[{
        StyleBox["\[Theta]",
         FontSlant->"Italic"], ":", " ", 
        StyleBox[
         RowBox[{"planar", " ", "angles", "   ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"\[Theta]", "[", "i", "]"}], " ", "=", " ", 
            RowBox[{"angle", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"x", "[", "i", "]"}], ",", 
               RowBox[{"x", "[", 
                RowBox[{"i", "-", "1"}], "]"}], ",", 
               RowBox[{"x", "[", 
                RowBox[{"i", "-", "2"}], "]"}]}], ")"}]}]}], ")"}]}],
         FontWeight->"Plain"]}], 
       StyleBox[";",
        FontWeight->"Plain"], 
       StyleBox["        ",
        FontWeight->"Plain"], "\[IndentingNewLine]", "   ", 
       RowBox[{
        StyleBox["\[Omega]",
         FontSlant->"Italic"], ":", " ", 
        RowBox[{
         StyleBox["torsion",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["angles",
          FontWeight->"Plain"], 
         StyleBox["  ",
          FontWeight->"Plain"], 
         RowBox[{
          StyleBox["(",
           FontWeight->"Plain"], 
          StyleBox[
           RowBox[{
            RowBox[{
             RowBox[{"\[Omega]", "[", "i", "]"}], " ", "=", " ", 
             RowBox[{"angle", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"x", "[", "i", "]"}], ",", 
                RowBox[{"x", "[", 
                 RowBox[{"i", "-", "1"}], "]"}], ",", 
                RowBox[{"x", "[", 
                 RowBox[{"i", "-", "2"}], "]"}], ",", 
                RowBox[{"x", "[", 
                 RowBox[{"i", "-", "3"}], "]"}]}], ")"}]}]}], ";"}],
           FontWeight->"Plain"], 
          StyleBox[" ",
           FontWeight->"Plain"], "\[IndentingNewLine]"}]}]}]}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "B", ",", "B1", ",", "B2", ",", "B3", ",", "X", ",", "i", ",", "di", 
        ",", "ct", ",", "st", ",", "cw", ",", "sw", ",", "v", ",", 
        "numberOfAtoms"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"numberOfAtoms", "=", 
        RowBox[{"Length", "[", "d", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "atoms", " ", "positions", " ", "on", " ", "Euclidean", " ", "3", "d",
          " ", "space"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"X", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "numberOfAtoms"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "3"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "set", " ", "the", " ", "position", " ", "of", " ", "the", " ", 
         "three", " ", "first", " ", "points"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"ct", ",", "st"}], "}"}], "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"\[Theta]", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"\[Theta]", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"X", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"d", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", "0", ",", "0"}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"-", 
              RowBox[{"d", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"d", "[", 
               RowBox[{"[", "3", "]"}], "]"}], "ct"}]}], ",", 
            RowBox[{
             RowBox[{"d", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "st"}], " ", ",", "0"}], 
           "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"set", " ", "first", " ", "transformation", " ", "matrices"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"B1", "=", 
        RowBox[{"IdentityMatrix", "[", "4", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"B2", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0", ",", "0", ",", 
            RowBox[{"-", 
             RowBox[{"d", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", 
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"di", "=", 
        RowBox[{"d", "[", 
         RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"B3", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "ct"}], ",", 
            RowBox[{"-", "st"}], ",", "0", ",", 
            RowBox[{
             RowBox[{"-", "di"}], "*", "ct"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"st", ",", 
            RowBox[{"-", "ct"}], ",", "0", ",", 
            RowBox[{"di", "*", "st"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"set", " ", "remaining", " ", "coordinates"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"B", "=", 
        RowBox[{"B1", ".", "B2", ".", "B3"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "4"}], ",", 
         RowBox[{"i", "\[LessEqual]", "numberOfAtoms"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ct", ",", "st"}], "}"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Cos", "[", 
              RowBox[{"\[Theta]", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
             RowBox[{"Sin", "[", 
              RowBox[{"\[Theta]", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"cw", ",", "sw"}], "}"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Cos", "[", 
              RowBox[{"\[Omega]", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
             RowBox[{"Sin", "[", 
              RowBox[{"\[Omega]", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"di", "=", 
           RowBox[{"d", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"concatenate", " ", "transformation", " ", "matrices"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"B", " ", "=", 
           RowBox[{"B", ".", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "ct"}], ",", 
                RowBox[{"-", "st"}], ",", "0", ",", 
                RowBox[{
                 RowBox[{"-", "di"}], "*", "ct"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"st", "*", "cw"}], ",", 
                RowBox[{
                 RowBox[{"-", "ct"}], "*", "cw"}], ",", 
                RowBox[{"-", "sw"}], ",", 
                RowBox[{"di", "*", "st", "*", "cw"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"st", "*", "sw"}], ",", 
                RowBox[{
                 RowBox[{"-", "ct"}], "*", "sw"}], ",", "cw", ",", 
                RowBox[{"di", "*", "st", "*", "sw"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"apply", " ", "transformation", " ", "at", " ", "origin"}],
            " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"v", " ", "=", 
           RowBox[{"B", ".", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"update", " ", "coordinate"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"X", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{"v", "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}]}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "X", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGRandom3DBackbone", "[", 
     RowBox[{"numberOfAtoms_", ",", 
      RowBox[{"algorithm_:", "\"\<HomogeneousCoords\>\""}], ",", 
      RowBox[{"seed_:", "0"}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "Generates", " ", "a", " ", "random", " ", "backbone", " ", "in", " ", 
       "tridimensional", " ", "Euclidean", " ", "space"}], ";", 
      "\[IndentingNewLine]", "   ", 
      StyleBox[
       RowBox[{"Input", " ", "parameters"}],
       FontVariations->{"Underline"->True}], 
      StyleBox[";",
       FontVariations->{"Underline"->True}], "\[IndentingNewLine]", "   ", 
      RowBox[{
       StyleBox["numberOfAtoms",
        FontSlant->"Italic"], ":", " ", 
       StyleBox[
        RowBox[{
        "number", " ", "of", " ", "3", "D", " ", "Euclidean", " ", "points", 
         " ", "to", " ", "be", " ", "generated"}],
        FontWeight->"Plain"]}], 
      StyleBox[";",
       FontWeight->"Plain"], "\[IndentingNewLine]", "   ", 
      RowBox[{
       StyleBox["algorithm",
        FontSlant->"Italic"], ":", " ", 
       StyleBox[
        RowBox[{
        "algorithm", " ", "to", " ", "be", " ", "applied", " ", "during", " ",
          "coordinates", " ", 
         RowBox[{"calculation", ".", " ", "The"}], " ", 
         RowBox[{"options", " ", "'"}], "are", " ", 
         RowBox[{"HomogeneousCoords", "'"}], " ", 
         RowBox[{"or", " ", "'"}], 
         RowBox[{"CartesianSystem", "'"}]}],
        FontWeight->"Plain"]}], 
      StyleBox[";",
       FontWeight->"Plain"], "\[IndentingNewLine]", "   ", 
      RowBox[{
       RowBox[{
        StyleBox["seed",
         FontSlant->"Italic"], ":", " ", 
        StyleBox[
         RowBox[{
         "integer", " ", "number", " ", "used", " ", "to", " ", "reproduce", 
          " ", "random", " ", "sequence", " ", 
          RowBox[{"generation", ".", " ", "If"}], " ", "seed"}],
         FontWeight->"Plain"]}], 
       StyleBox["=",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{
        "0", " ", "a", " ", "sequence", " ", "based", " ", "on", " ", "the", 
         " ", "current", " ", "time", " ", "is", " ", "constructed"}],
        FontWeight->"Plain"]}], 
      StyleBox[";",
       FontWeight->"Plain"]}], "\[IndentingNewLine]", " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"declare", " ", "the", " ", "local", " ", "variables"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "d", ",", "\[Theta]", ",", "\[Omega]", ",", "X", ",", "output", ",", 
        RowBox[{"\[Epsilon]", "=", "0.05"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "seed"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"seed", ">", "0"}], ",", 
         RowBox[{"SeedRandom", "[", "seed", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"length", " ", "of", " ", "covalent", " ", "bonds"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"d", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"1.526", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"d", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "=", "0"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"plane", " ", "angles"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"\[Theta]", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"1.91", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"\[Theta]", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "=", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"torsion", " ", "angles"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"\[Omega]", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"RandomChoice", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"60", "Degree"}], ",", 
              RowBox[{"180", "Degree"}], ",", 
              RowBox[{"300", "Degree"}]}], "}"}], "]"}], "*", 
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "\[Epsilon]"}], ",", "\[Epsilon]"}], "}"}], 
              "]"}]}], ")"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"\[Omega]", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "=", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "set", " ", "the", " ", "remaining", " ", "3", "d", " ", 
         "positions"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "algorithm", ",", "\[IndentingNewLine]", "\"\<HomogeneousCoords\>\"", 
         ",", 
         RowBox[{"X", "=", 
          RowBox[{"DGSetXByHomogeneousCoords", "[", 
           RowBox[{"d", ",", "\[Theta]", ",", "\[Omega]"}], "]"}]}], ",", 
         "\[IndentingNewLine]", "\"\<CartesianSystem\>\"", ",", 
         RowBox[{"X", "=", 
          RowBox[{"DGSetXByCartesianSystem", "[", 
           RowBox[{"d", ",", "\[Theta]", ",", "\[Omega]"}], "]"}]}], ",", 
         "\[IndentingNewLine]", "_", ",", 
         RowBox[{"Throw", "[", 
          RowBox[{"\"\<InvalidAlgorithm:\>\"", ",", 
           RowBox[{"OptionValue", "[", "algorithm", "]"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"set", " ", "output"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Points\>\"", "->", "X"}], ",", 
         RowBox[{"\"\<TorsionAngles\>\"", "\[Rule]", "\[Omega]"}], ",", 
         RowBox[{"\"\<CovalentBondLengths\>\"", "->", "d"}], ",", 
         RowBox[{"\"\<PlaneRotationAngles\>\"", "\[Rule]", "\[Theta]"}]}], 
        "|>"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGEdgesMDGP", "[", "numberOfAtoms_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", "j", ",", 
        RowBox[{"edges", "=", 
         RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", "numberOfAtoms"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", 
             RowBox[{"i", "+", "1"}]}], ",", 
            RowBox[{"j", "\[LessEqual]", 
             RowBox[{"Min", "[", 
              RowBox[{
               RowBox[{"i", "+", "3"}], ",", "numberOfAtoms"}], "]"}]}], ",", 
            RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"edges", ",", 
               RowBox[{"i", "\[UndirectedEdge]", "j"}]}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "edges", "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGRandomMDGP", "[", 
     RowBox[{"numberOfAtoms_", ",", 
      RowBox[{"dijEps_:", "0.0"}], ",", 
      RowBox[{"dijMax_:", "Infinity"}], ",", 
      RowBox[{"seed_:", "0"}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"Generates", " ", "a", " ", "random", " ", "MDGP", " ", 
       RowBox[{"instance", "."}]}], ";", " ", "\[IndentingNewLine]", "   ", 
      RowBox[{
       StyleBox["numberOfAtoms",
        FontSlant->"Italic"], ":", " ", 
       StyleBox[
        RowBox[{
        "number", " ", "of", " ", "3", "D", " ", "Euclidean", " ", "points", 
         " ", "to", " ", "be", " ", "generated"}],
        FontWeight->"Plain"]}], 
      StyleBox[";",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox["   ",
       FontWeight->"Plain"], 
      RowBox[{
       RowBox[{
        StyleBox["dijEps",
         FontSlant->"Italic"], 
        StyleBox[":",
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox[
         RowBox[{"the", " ", "upper", " ", 
          RowBox[{"(", "uij", ")"}], " ", "and", " ", "lower", " ", 
          RowBox[{"(", "lij", ")"}], " ", "constraints", " ", "boundaries", 
          " ", "are", " ", "generated", " ", "using", " ", "the", " ", 
          "formulae", " ", "lij"}],
         FontWeight->"Plain"]}], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["=",
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", "dijEps"}], ")"}], " ", "and", " ", "uij"}], " ",
          "=", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "dijEps"}], ")"}]}],
        FontWeight->"Plain"]}], 
      StyleBox[";",
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", "   ", 
      RowBox[{
       StyleBox["dijMax",
        FontSlant->"Italic"], ":", 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{
        "all", " ", "distances", " ", "greater", " ", "than", " ", "dijMax", 
         " ", "are", " ", "dropped"}],
        FontWeight->"Plain"]}], 
      StyleBox[";",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox["   ",
       FontWeight->"Plain"], 
      RowBox[{
       StyleBox["algorithm",
        FontSlant->"Italic"], ":", " ", 
       StyleBox[
        RowBox[{"defines", " ", "the", " ", "method", " ", 
         RowBox[{"(", "algorithm", ")"}], " ", "used", " ", "to", " ", 
         "calculate", " ", "the", " ", "pairwise", " ", 
         RowBox[{"distances", ".", " ", "The"}], " ", "options", " ", "are", 
         " ", "\"\<DistanceMatrix\>\"", " ", "and", " ", "\"\<Nearest\>\""}],
        FontWeight->"Plain"]}], 
      StyleBox[";",
       FontWeight->"Plain"], "\[IndentingNewLine]", "   ", 
      RowBox[{
       RowBox[{
        StyleBox["seed",
         FontSlant->"Italic"], ":", " ", 
        StyleBox[
         RowBox[{
         "integer", " ", "number", " ", "used", " ", "to", " ", "reproduce", 
          " ", "random", " ", "sequence", " ", 
          RowBox[{"generation", ".", " ", "If"}], " ", "seed"}],
         FontWeight->"Plain"]}], 
       StyleBox["=",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{
        "0", " ", "a", " ", "sequence", " ", "based", " ", "on", " ", 
         "current", " ", "is", " ", "constructed"}],
        FontWeight->"Plain"]}], 
      StyleBox[";",
       FontWeight->"Plain"]}], "\[IndentingNewLine]", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"declare", " ", "local", " ", "variables"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "i", ",", "j", ",", "X", ",", "D", ",", "E", ",", "dij", ",", 
        "DijEps"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"X", "=", 
        RowBox[{
         RowBox[{"DGRandom3DBackbone", "[", 
          RowBox[{
          "numberOfAtoms", ",", "\"\<HomogeneousCoords\>\"", ",", "seed"}], 
          "]"}], "[", "\"\<Points\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"E", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"DijEps", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"set", " ", "distance", " ", "bounds"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", "numberOfAtoms"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", 
             RowBox[{"i", "+", "1"}]}], ",", 
            RowBox[{"j", "\[LessEqual]", "numberOfAtoms"}], ",", 
            RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"exact", " ", "distances"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"i", "-", "j"}], "]"}], "\[LessEqual]", "2"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{"E", ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "j"}], "}"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"DijEps", ",", "0"}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"Continue", "[", "]"}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"intervalar", " ", "distances"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Abs", "[", 
                  RowBox[{"i", "-", "j"}], "]"}], "\[Equal]", "3"}], "||", 
                RowBox[{
                 RowBox[{"N", "[", 
                  RowBox[{"Norm", "[", 
                   RowBox[{
                    RowBox[{"X", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "-", 
                    RowBox[{"X", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], "<", 
                 "dijMax"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{"E", ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "j"}], "}"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"DijEps", ",", "dijEps"}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"DGProblem", "[", 
         RowBox[{"X", ",", "E", ",", "DijEps"}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGPlaneAndTorsionAngles", "[", 
     RowBox[{"A_", ",", "B_", ",", "C_", ",", "D_", ",", 
      RowBox[{"verbose_:", "False"}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "Calculates", " ", "the", " ", "plane", " ", "and", " ", "torsion", " ",
        "for", " ", "3", "D", " ", "points", " ", "A"}], ",", " ", "B", ",", 
      " ", 
      RowBox[{"C", " ", "and", " ", "D", " ", "in", " ", "that", " ", 
       RowBox[{"order", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nabc", ",", " ", "nbcd", ",", "\[Theta]", ",", "\[Omega]"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"centered", " ", "at", " ", "C"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[Theta]", "=", 
        RowBox[{"VectorAngle", "[", 
         RowBox[{
          RowBox[{"B", "-", "C"}], ",", 
          RowBox[{"D", "-", "C"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verbose", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<(\[Theta]):Angle[BCD]  =\>\"", ",", "\[Theta]"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"centered", " ", "at", " ", "B", " ", "and", " ", "C"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nabc", ",", "nbcd"}], "}"}], " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cross", "[", 
           RowBox[{
            RowBox[{"A", "-", "B"}], ",", 
            RowBox[{"C", "-", "B"}]}], "]"}], ",", 
          RowBox[{"Cross", "[", 
           RowBox[{
            RowBox[{"B", "-", "C"}], ",", 
            RowBox[{"D", "-", "C"}]}], "]"}]}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"\[Omega]", "=", 
        RowBox[{"VectorAngle", "[", 
         RowBox[{"nabc", ",", "nbcd"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verbose", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<(\[Omega]):Angle[ABCD] =\>\"", ",", "\[Omega]"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"\[Theta]", ",", "\[Omega]"}], "}"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGPlaneAndTorsionAngles", "[", 
     RowBox[{"X_", ",", "i_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "Calculates", " ", "plane", " ", "and", " ", "torsion", " ", "angles", 
       " ", "of", " ", "i"}], "-", 
      RowBox[{"th", " ", 
       RowBox[{"atom", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"DGPlaneAndTorsionAngles", "[", 
     RowBox[{
      RowBox[{"X", "[", 
       RowBox[{"[", 
        RowBox[{"i", "-", "3"}], "]"}], "]"}], ",", 
      RowBox[{"X", "[", 
       RowBox[{"[", 
        RowBox[{"i", "-", "2"}], "]"}], "]"}], ",", 
      RowBox[{"X", "[", 
       RowBox[{"[", 
        RowBox[{"i", "-", "1"}], "]"}], "]"}], ",", 
      RowBox[{"X", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGPlaneAndTorsionAngles", "[", "X_", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "\[Omega]", ",", "i"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\[Omega]", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Theta]", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "4"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "X", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\[Theta]", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"\[Omega]", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "=", 
         RowBox[{"DGPlaneAndTorsionAngles", "[", 
          RowBox[{"X", ",", "i"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"\[Theta]", ",", "\[Omega]"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.679334396696954*^9, 3.6793344197378874`*^9}, {
   3.679334459021727*^9, 3.6793344614910192`*^9}, {3.679334506573509*^9, 
   3.67933450744427*^9}, 3.679334554859289*^9, {3.6793347748775415`*^9, 
   3.6793348146727505`*^9}, {3.6793348683176303`*^9, 
   3.6793349148147354`*^9}, {3.679335216182414*^9, 3.679335270449379*^9}, {
   3.679335358320606*^9, 3.6793353855927134`*^9}, {3.679335422113183*^9, 
   3.679335422860292*^9}, {3.679335467322652*^9, 3.6793354718670073`*^9}, {
   3.679335502941807*^9, 3.6793355176517873`*^9}, {3.6793359308181715`*^9, 
   3.6793359602458916`*^9}, {3.6793359984610925`*^9, 3.679336011029911*^9}, {
   3.679336355941925*^9, 3.679336390681263*^9}, {3.679336436703087*^9, 
   3.679336440913059*^9}, {3.6793364973777227`*^9, 3.679336508943397*^9}, {
   3.679337482798051*^9, 3.6793374878195066`*^9}, {3.679337531710136*^9, 
   3.679337679993342*^9}, {3.679337711180924*^9, 3.6793377943636985`*^9}, {
   3.679337830273183*^9, 3.6793379235522385`*^9}, {3.6793380600889235`*^9, 
   3.679338107718841*^9}, {3.679338168311281*^9, 3.6793381690922422`*^9}, {
   3.679338254307039*^9, 3.679338327393572*^9}, {3.6793384127916727`*^9, 
   3.679338418720523*^9}, {3.6793384657072325`*^9, 3.679338788372825*^9}, {
   3.679338898441475*^9, 3.6793389990638256`*^9}, {3.6793390477861385`*^9, 
   3.679339051499843*^9}, {3.6793391446277075`*^9, 3.6793392599804153`*^9}, 
   3.6793393742092657`*^9, {3.6793395780321927`*^9, 3.6793398587893867`*^9}, {
   3.6793398957561593`*^9, 3.6793399605794096`*^9}, {3.67934000207397*^9, 
   3.6793400630782733`*^9}, {3.6793401514655437`*^9, 
   3.6793403347497687`*^9}, {3.6793403699550896`*^9, 3.67934037140318*^9}, {
   3.679340563130898*^9, 3.6793405841237473`*^9}, {3.6793406189939303`*^9, 
   3.6793406823092556`*^9}, {3.6793413087872534`*^9, 
   3.6793413117913976`*^9}, {3.6793414144409704`*^9, 
   3.6793414780425982`*^9}, {3.6793415857352*^9, 3.679341749056054*^9}, {
   3.6793418327409945`*^9, 3.6793418417524166`*^9}, {3.679341876481241*^9, 
   3.6793418824052687`*^9}, {3.679341997125859*^9, 3.6793420172739105`*^9}, {
   3.67934205563032*^9, 3.6793420821291895`*^9}, {3.679342117275077*^9, 
   3.6793421196924405`*^9}, {3.6793421834981775`*^9, 3.679342183855644*^9}, {
   3.6793422500684495`*^9, 3.6793422840007253`*^9}, {3.6793424043195424`*^9, 
   3.6793424350150757`*^9}, {3.679342585125659*^9, 3.679342801705634*^9}, {
   3.679342833323803*^9, 3.6793428396110015`*^9}, {3.6793429405557547`*^9, 
   3.6793429972575336`*^9}, {3.679343068573412*^9, 3.6793430980621653`*^9}, 
   3.6793431423230133`*^9, {3.6793431858227177`*^9, 3.6793432209529057`*^9}, {
   3.6793432860551014`*^9, 3.6793433042354126`*^9}, {3.6793433545087633`*^9, 
   3.6793433652364955`*^9}, {3.6793452969963503`*^9, 3.6793453088097954`*^9}, 
   3.6793461153501606`*^9, {3.6793473536334457`*^9, 3.6793473954665585`*^9}, {
   3.6793477301073675`*^9, 3.679347763333604*^9}, {3.6793478591437263`*^9, 
   3.6793478625984306`*^9}, {3.6793480121537013`*^9, 
   3.6793482720333853`*^9}, {3.67934834772797*^9, 3.6793483523074236`*^9}, {
   3.6793484687244396`*^9, 3.679348489631818*^9}, {3.679348535732118*^9, 
   3.6793485836744003`*^9}, {3.679348656480409*^9, 3.6793486600900903`*^9}, 
   3.6793492489231615`*^9, {3.6793494190708942`*^9, 3.679349419296319*^9}, 
   3.6793494823993444`*^9, {3.6793500975888023`*^9, 3.6793501010398235`*^9}, {
   3.6793503502988024`*^9, 3.679350357442238*^9}, {3.679350388693789*^9, 
   3.6793504609919558`*^9}, {3.679350512381988*^9, 3.6793505224916997`*^9}, {
   3.6793505658690414`*^9, 3.679350573203977*^9}, {3.6793920543569756`*^9, 
   3.6793923209393916`*^9}, {3.679392352626535*^9, 3.6793925381168537`*^9}, {
   3.6793926280473437`*^9, 3.679392661685611*^9}, {3.679392696383786*^9, 
   3.679392699025669*^9}, {3.6793928383564887`*^9, 3.6793934549091573`*^9}, {
   3.679393586505351*^9, 3.679393616703784*^9}, {3.6793939133345203`*^9, 
   3.6793939143222685`*^9}, 3.6793940696010857`*^9, {3.679394099668668*^9, 
   3.6793944506348133`*^9}, {3.679394784056423*^9, 3.67939534176003*^9}, {
   3.679395381425836*^9, 3.679395503566868*^9}, {3.6793955684350924`*^9, 
   3.6793955734567842`*^9}, {3.6793957804079714`*^9, 
   3.6793958367041416`*^9}, {3.6793960807594223`*^9, 3.679396100513118*^9}, {
   3.67939616157646*^9, 3.679396197364892*^9}, {3.6793962497184567`*^9, 
   3.679396282906206*^9}, {3.679396609090597*^9, 3.6793966167836933`*^9}, {
   3.679396648625914*^9, 3.6793966543985653`*^9}, {3.679396740943916*^9, 
   3.679396768582145*^9}, {3.679396857866257*^9, 3.6793968963813653`*^9}, {
   3.6793969336171*^9, 3.6793970905785065`*^9}, {3.6793971251566105`*^9, 
   3.6793971298515577`*^9}, {3.679397221304947*^9, 3.67939722410863*^9}, {
   3.6793972641763353`*^9, 3.679397266225936*^9}, {3.6793983203128195`*^9, 
   3.6793983706649785`*^9}, {3.679398435449253*^9, 3.6793984477299423`*^9}, {
   3.6793984907409554`*^9, 3.6793985421648207`*^9}, {3.679398593771634*^9, 
   3.6793986705180993`*^9}, {3.6793989235435977`*^9, 3.67939893434542*^9}, {
   3.679403394164427*^9, 3.6794034018166647`*^9}, {3.679403783825127*^9, 
   3.6794037864835734`*^9}, {3.6794038759602175`*^9, 
   3.6794040830475106`*^9}, {3.679404119305796*^9, 3.679404298238202*^9}, 
   3.679404382036023*^9, {3.679404653274694*^9, 3.6794046842305584`*^9}, {
   3.6794050293859835`*^9, 3.6794050557043276`*^9}, {3.6794051146048007`*^9, 
   3.679405116722584*^9}, {3.679405184367193*^9, 3.6794052171029243`*^9}, {
   3.679405498432304*^9, 3.679405569807764*^9}, {3.679405690984426*^9, 
   3.6794056940269375`*^9}, {3.679405754352635*^9, 3.6794057624882355`*^9}, 
   3.679405828952403*^9, {3.6794059773823776`*^9, 3.679406037058329*^9}, {
   3.679406078458248*^9, 3.6794061638320656`*^9}, {3.6794064355972614`*^9, 
   3.679406619068183*^9}, {3.67940666239577*^9, 3.679406687383835*^9}, {
   3.679406724763648*^9, 3.6794067251687045`*^9}, 3.6794068172515316`*^9, {
   3.679406863506428*^9, 3.679406872901106*^9}, {3.679406930446825*^9, 
   3.679406948401491*^9}, {3.6794070040861063`*^9, 3.6794070065561094`*^9}, {
   3.679407312344544*^9, 3.679407314713808*^9}, {3.679407430180848*^9, 
   3.679407458271701*^9}, 3.6794078238766403`*^9, {3.679407878354503*^9, 
   3.6794082035777364`*^9}, {3.679566685353998*^9, 3.67956669759547*^9}, 
   3.679568153295287*^9, {3.6795682979748397`*^9, 3.679568399913588*^9}, {
   3.679568451510522*^9, 3.679568495166552*^9}, {3.6795691795206947`*^9, 
   3.679569250499019*^9}, {3.679569280716798*^9, 3.6795693785712852`*^9}, {
   3.6795925633128986`*^9, 3.679592673970081*^9}, {3.679592721867278*^9, 
   3.6795927229374475`*^9}, {3.679594988131906*^9, 3.679595118982105*^9}, {
   3.679738892130002*^9, 3.679738904422254*^9}, {3.6797389527800984`*^9, 
   3.6797389661620564`*^9}, {3.6797390238401327`*^9, 
   3.6797390636940556`*^9}, {3.6797391569629755`*^9, 3.679739218024413*^9}, {
   3.679739321633385*^9, 3.6797393341911097`*^9}, {3.6797394358016376`*^9, 
   3.679739498369319*^9}, {3.679739592363925*^9, 3.6797396087330103`*^9}, {
   3.6797405277538753`*^9, 3.6797405906735935`*^9}, {3.679741837482974*^9, 
   3.679741856061937*^9}, {3.6797530753347263`*^9, 3.679753080740266*^9}, {
   3.679822610411623*^9, 3.6798226951736937`*^9}, {3.6798262757554946`*^9, 
   3.6798262950500765`*^9}, {3.6798304972475395`*^9, 3.679830500587058*^9}, {
   3.6798305863580213`*^9, 3.6798306115801296`*^9}, {3.679830653827534*^9, 
   3.679830659160823*^9}, {3.679830750679475*^9, 3.679830778729604*^9}, {
   3.6798309380103083`*^9, 3.679831207376337*^9}, {3.6798312397643733`*^9, 
   3.6798313536889253`*^9}, {3.6798313849934535`*^9, 3.679831403721264*^9}, {
   3.6798314534696703`*^9, 3.6798315710288057`*^9}, {3.6798316592417555`*^9, 
   3.6798317372267046`*^9}, 3.679831789061343*^9, {3.679831822090675*^9, 
   3.679831828828328*^9}, {3.6798318972804823`*^9, 3.6798319051885147`*^9}, {
   3.679831945915737*^9, 3.6798319534838204`*^9}, {3.679831984167186*^9, 
   3.679831996593215*^9}, {3.6798321399538794`*^9, 3.6798321522301235`*^9}, {
   3.6798322802409973`*^9, 3.6798322901002426`*^9}, {3.679832475527353*^9, 
   3.6798324791745257`*^9}, {3.679832515937626*^9, 3.6798325272304134`*^9}, {
   3.6798328341287575`*^9, 3.6798328453074446`*^9}, {3.679832936913255*^9, 
   3.6798329499211493`*^9}, 3.6798329836635427`*^9, 3.6799120745739098`*^9, {
   3.68096946640281*^9, 3.680969506471238*^9}, {3.6809695943663626`*^9, 
   3.6809695983006277`*^9}, {3.680971291386725*^9, 3.680971292487916*^9}, {
   3.6810483453596783`*^9, 3.6810483658374515`*^9}, {3.681049666557871*^9, 
   3.681049672721483*^9}, {3.681049746015087*^9, 3.6810497473331203`*^9}, {
   3.681050036116782*^9, 3.6810503893437195`*^9}, {3.681050439415736*^9, 
   3.681050443570201*^9}, {3.6810508388119097`*^9, 3.681050853163069*^9}, {
   3.6810508894027395`*^9, 3.681050893808611*^9}, {3.681050960791823*^9, 
   3.6810510981120815`*^9}, {3.68105113216866*^9, 3.6810511668364615`*^9}, {
   3.681051291204856*^9, 3.6810512973216534`*^9}, {3.681051343040867*^9, 
   3.6810513458639803`*^9}, {3.6810514354795513`*^9, 
   3.6810514424265547`*^9}, {3.6810515295113626`*^9, 3.681051567230074*^9}, 
   3.681051692501606*^9, {3.681051791144629*^9, 3.681051837795389*^9}, {
   3.6810519974251823`*^9, 3.6810521036048183`*^9}, {3.681052180564599*^9, 
   3.6810521932444377`*^9}, {3.681052498724401*^9, 3.6810525317013626`*^9}, {
   3.681052601514738*^9, 3.6810526020129356`*^9}, {3.681130097135313*^9, 
   3.6811301355329266`*^9}, {3.6811306071661057`*^9, 
   3.6811306080939198`*^9}, {3.681569293340601*^9, 3.681569317434729*^9}, 
   3.681569384549055*^9, {3.6815694300305977`*^9, 3.6815694757801313`*^9}, {
   3.681569563306698*^9, 3.681569588540775*^9}, {3.6827030876800084`*^9, 
   3.682703262424608*^9}, {3.6827033351522703`*^9, 3.682703415951787*^9}, {
   3.6827036928979535`*^9, 3.6827037232224236`*^9}, {3.682751730525303*^9, 
   3.6827517963283806`*^9}, {3.6827518694423895`*^9, 3.682751938368969*^9}, {
   3.682752027328513*^9, 3.682752222908455*^9}, {3.6827522575518446`*^9, 
   3.682752305498808*^9}, {3.682752343269593*^9, 3.682752354684014*^9}, {
   3.682755918271523*^9, 3.6827559318206263`*^9}, {3.6827559727179627`*^9, 
   3.682756087687999*^9}, {3.682756145721592*^9, 3.682756179708579*^9}, {
   3.6827562427576885`*^9, 3.682756246343544*^9}, {3.6827562838961797`*^9, 
   3.682756361155776*^9}, {3.6827564050716653`*^9, 3.682756407820393*^9}, {
   3.6827568065792284`*^9, 3.682756817610793*^9}, {3.6827569799864893`*^9, 
   3.682757046769945*^9}, {3.6827571010926585`*^9, 3.68275714115174*^9}, 
   3.6827572933922772`*^9, {3.682757377968191*^9, 3.6827573780054502`*^9}, {
   3.682757430656029*^9, 3.682757430938339*^9}, {3.682757538765318*^9, 
   3.6827575688045273`*^9}, {3.6827576062534266`*^9, 
   3.6827577481318636`*^9}, {3.6827581645482197`*^9, 
   3.6827581925304317`*^9}, {3.6827582367544127`*^9, 
   3.6827582371612177`*^9}, {3.682758608097464*^9, 3.682758623028547*^9}, {
   3.6827587073678665`*^9, 3.682758772728657*^9}, {3.682758834124054*^9, 
   3.682758836456462*^9}, {3.682782233662289*^9, 3.6827822447829604`*^9}, {
   3.682782320018792*^9, 3.682782487834862*^9}, {3.682782529947446*^9, 
   3.6827825314122334`*^9}, {3.682782623878173*^9, 3.6827826814501777`*^9}, {
   3.6827827337311916`*^9, 3.682782750069191*^9}, {3.682782896362369*^9, 
   3.6827828993756037`*^9}, {3.6827829353820267`*^9, 3.682782936614396*^9}, {
   3.6827852963565493`*^9, 3.6827852984977875`*^9}, {3.6827871345324674`*^9, 
   3.6827871372960124`*^9}, {3.6827873158456683`*^9, 3.682787318082534*^9}, 
   3.6860539435781755`*^9, {3.689601466774104*^9, 3.6896015532256894`*^9}, {
   3.6896016488772197`*^9, 3.6896017962777505`*^9}, {3.689601830847403*^9, 
   3.689601843970112*^9}, {3.689601972787878*^9, 3.689601987554659*^9}, {
   3.6896020823447723`*^9, 3.689602177412902*^9}, {3.689602219625367*^9, 
   3.6896025123406606`*^9}, {3.689602553886554*^9, 3.689602618506301*^9}, {
   3.6896026500310593`*^9, 3.6896026586156025`*^9}, {3.6896026945036297`*^9, 
   3.6896028712580557`*^9}, {3.6896029047014227`*^9, 
   3.6896029083520837`*^9}, {3.689602966711435*^9, 3.689603058571074*^9}, {
   3.6896030932120867`*^9, 3.689603098139574*^9}, {3.6896031601944327`*^9, 
   3.6896031778706956`*^9}, {3.692621083267871*^9, 3.692621091669281*^9}, {
   3.6926212289569902`*^9, 3.6926212863157787`*^9}, {3.6926213497820015`*^9, 
   3.692621425637977*^9}, {3.6926214644408817`*^9, 3.6926214670573387`*^9}, {
   3.692621527200048*^9, 3.6926216897906265`*^9}, {3.692627410197031*^9, 
   3.6926275455290575`*^9}, {3.692627745145838*^9, 3.6926277852211*^9}, {
   3.692627821712092*^9, 3.692627853727536*^9}, {3.693051401128996*^9, 
   3.693051427295449*^9}, {3.6930549156980915`*^9, 3.6930551127231016`*^9}, {
   3.6930552622573557`*^9, 3.693055266815773*^9}, {3.693055339369998*^9, 
   3.693055342949571*^9}, {3.6930554341310496`*^9, 3.693055503513935*^9}, {
   3.6930556414092984`*^9, 3.693055671403966*^9}, {3.6930558447268047`*^9, 
   3.693055926052605*^9}, {3.69305610697759*^9, 3.693056188778535*^9}, {
   3.6930563054950542`*^9, 3.6930563090177827`*^9}, {3.693056360765195*^9, 
   3.693056364987186*^9}, {3.693056410841975*^9, 3.6930564674928303`*^9}, {
   3.693056544238221*^9, 3.6930565494853306`*^9}, {3.6930566103966265`*^9, 
   3.6930566475710416`*^9}, {3.693056687192659*^9, 3.6930566953123307`*^9}, {
   3.6930567877264233`*^9, 3.6930568950334253`*^9}, {3.6930570764514155`*^9, 
   3.693057081922228*^9}, {3.6930571431816697`*^9, 3.6930572655759053`*^9}, {
   3.693057312085458*^9, 3.6930573768320684`*^9}, {3.6930574682013035`*^9, 
   3.693057478075393*^9}, {3.6932296110918107`*^9, 3.6932296491465197`*^9}, {
   3.6932296904250884`*^9, 3.6932297134186444`*^9}, {3.693229748263383*^9, 
   3.6932297809611044`*^9}, {3.6932308110630655`*^9, 3.693230887986189*^9}, 
   3.693231311160925*^9, {3.6932313870086255`*^9, 3.693231387261767*^9}, {
   3.693300257298705*^9, 3.693300990881487*^9}, {3.6933010948551283`*^9, 
   3.6933011038372164`*^9}, {3.6933011352536983`*^9, 3.693301291501009*^9}, {
   3.693301360678998*^9, 3.693301846650869*^9}, {3.6933018835332117`*^9, 
   3.6933019831666975`*^9}, {3.6933020216715317`*^9, 3.693302099051983*^9}, {
   3.6933021369545527`*^9, 3.6933023594457426`*^9}, {3.693315004372259*^9, 
   3.693315011074277*^9}, {3.6944413361908827`*^9, 3.694441336907129*^9}, {
   3.6950542188467774`*^9, 3.695054222592431*^9}, {3.6950542990197506`*^9, 
   3.695054307656605*^9}, {3.695055223340433*^9, 3.695055253120858*^9}, {
   3.695055384838611*^9, 3.6950553878557982`*^9}, {3.6950554421005893`*^9, 
   3.6950555642412815`*^9}, {3.695055732966177*^9, 3.6950557465022993`*^9}, {
   3.6950558046684055`*^9, 3.695055961220101*^9}, {3.695055998668761*^9, 
   3.6950560162157063`*^9}, {3.695056048840163*^9, 3.695056146211532*^9}, {
   3.6950561862654486`*^9, 3.695056188190776*^9}, {3.6950562373677807`*^9, 
   3.6950562879516363`*^9}, {3.6950563517744646`*^9, 3.695056360712323*^9}, {
   3.69505860651243*^9, 3.695058635588434*^9}, {3.695058684806075*^9, 
   3.6950588940516233`*^9}, {3.6957164552525945`*^9, 
   3.6957164560312014`*^9}, {3.6957168591079035`*^9, 
   3.6957169851976123`*^9}, {3.695717024315192*^9, 3.695717055967568*^9}, {
   3.695717541243352*^9, 3.695717560925682*^9}, 3.6957176038835087`*^9, {
   3.6957178788805103`*^9, 3.6957178831140776`*^9}, {3.6957179221867228`*^9, 
   3.6957179708748155`*^9}, 3.695718071534438*^9, {3.69571902099082*^9, 
   3.695719034182557*^9}, {3.695719110436449*^9, 3.69571912465912*^9}, {
   3.6959981424530063`*^9, 3.695998143402657*^9}, {3.695998201800911*^9, 
   3.6959982211236086`*^9}, 3.696161679540288*^9, {3.696332885830512*^9, 
   3.69633291986983*^9}, {3.6963330735158176`*^9, 3.6963330774044304`*^9}, {
   3.6963331566111712`*^9, 3.6963331767939215`*^9}, {3.696592128005638*^9, 
   3.696592200325493*^9}, {3.696592280079686*^9, 3.696592300895893*^9}, {
   3.696592360614642*^9, 3.6965924391532173`*^9}, {3.696592549000717*^9, 
   3.6965926737509665`*^9}, {3.6965927230303907`*^9, 3.696592776632204*^9}, {
   3.696592858783024*^9, 3.6965928838162374`*^9}, {3.6965929149072313`*^9, 
   3.696592957987955*^9}, {3.6965930011830645`*^9, 3.696593001767194*^9}, {
   3.6965931015144644`*^9, 3.6965931654384584`*^9}, 3.6965931976879473`*^9, {
   3.6965932301462927`*^9, 3.6965932334864273`*^9}, {3.6965933569359655`*^9, 
   3.6965933577742367`*^9}, {3.696593390597328*^9, 3.6965934361026325`*^9}, {
   3.69659349189392*^9, 3.696593496582985*^9}, {3.6965935305307894`*^9, 
   3.696593532985401*^9}, {3.6965936048453135`*^9, 3.6965936500412455`*^9}, {
   3.696593703183982*^9, 3.6965937451325016`*^9}, {3.6965938330555153`*^9, 
   3.696593888009883*^9}, {3.696593996396145*^9, 3.6965943945158587`*^9}, {
   3.696594455320829*^9, 3.6965947103520412`*^9}, 3.696594768684037*^9, {
   3.696594815028183*^9, 3.696594823298046*^9}, {3.6965948702502565`*^9, 
   3.696595114616662*^9}, {3.6965951697312756`*^9, 3.6965953069777794`*^9}, {
   3.6965953500124445`*^9, 3.696595353751785*^9}, {3.6965953948831806`*^9, 
   3.6965954213916507`*^9}, {3.696595542553995*^9, 3.6965955448754787`*^9}, {
   3.6965956361847277`*^9, 3.69659568404626*^9}, {3.696595734352703*^9, 
   3.6965957496578636`*^9}, {3.696595795766102*^9, 3.6965958031733503`*^9}, {
   3.696595870299922*^9, 3.6965959033890886`*^9}, {3.69659594497962*^9, 
   3.6965960170554657`*^9}, {3.696596069740856*^9, 3.6965960719006443`*^9}, {
   3.696596115793432*^9, 3.6965961457518997`*^9}, {3.6965962116946173`*^9, 
   3.6965962545251417`*^9}, {3.696596513453669*^9, 3.696596515787285*^9}, 
   3.696596667129428*^9, {3.696596717699503*^9, 3.696596905098714*^9}, {
   3.6965969520835447`*^9, 3.696597023631856*^9}, {3.6965971034463863`*^9, 
   3.696597122891425*^9}, {3.6965975434946456`*^9, 3.696597546602838*^9}, {
   3.696597678096383*^9, 3.696597688330096*^9}, {3.6965978572829094`*^9, 
   3.6965979026996202`*^9}, {3.6965980212576485`*^9, 3.6965980251793203`*^9}, 
   3.6966112031725936`*^9, {3.696611352492113*^9, 3.6966113711786222`*^9}, {
   3.6966114660470867`*^9, 3.6966114941486444`*^9}, {3.696611603631793*^9, 
   3.6966117017799177`*^9}, {3.696700266768712*^9, 3.696700288898875*^9}, {
   3.6967004337486825`*^9, 3.6967004344970875`*^9}, {3.696700470331721*^9, 
   3.696700811186071*^9}, 3.6967008770696635`*^9, {3.69806251910773*^9, 
   3.6980625541108*^9}, 3.6980625975942183`*^9, {3.698062632771715*^9, 
   3.6980628199497538`*^9}, 3.6980632337317467`*^9, {3.6980648304601855`*^9, 
   3.6980648325027876`*^9}, {3.698065066304674*^9, 3.698065079166938*^9}, {
   3.698065285455764*^9, 3.6980652965729313`*^9}, {3.6980653380167575`*^9, 
   3.6980653446492004`*^9}, {3.6980654471979094`*^9, 3.6980655292188916`*^9}, 
   3.6980655608374662`*^9, {3.698065604769106*^9, 3.698065619074422*^9}, {
   3.6980656675506783`*^9, 3.6980657993549433`*^9}, {3.6980658534383354`*^9, 
   3.698065966443425*^9}, {3.6980660365747347`*^9, 3.6980662024756727`*^9}, {
   3.6980662555999365`*^9, 3.698066332245663*^9}, {3.698066967983133*^9, 
   3.698067007227691*^9}, {3.6980670546053877`*^9, 3.698067056006934*^9}, {
   3.6980670908888907`*^9, 3.6980671669030037`*^9}, {3.6980724764654927`*^9, 
   3.698072477326563*^9}, 3.698072882773279*^9, {3.698072926956035*^9, 
   3.698073002792399*^9}, {3.6980735228888316`*^9, 3.6980736363143997`*^9}, {
   3.6980736736873636`*^9, 3.6980736762855873`*^9}, {3.698073733371315*^9, 
   3.6980738176139774`*^9}, {3.698074115673706*^9, 3.698074151883384*^9}, {
   3.6980741951740847`*^9, 3.698074199709016*^9}, {3.6980745246005197`*^9, 
   3.6980745474711885`*^9}, {3.698074601676409*^9, 3.69807460485203*^9}, {
   3.6980746715422163`*^9, 3.6980746777413116`*^9}, {3.6980791312936554`*^9, 
   3.69807925534293*^9}, {3.698079396933419*^9, 3.698079417484049*^9}, 
   3.6980842057440357`*^9, {3.6982409454848895`*^9, 3.6982412171955957`*^9}, {
   3.698241250091914*^9, 3.698241286441023*^9}, {3.698241327342353*^9, 
   3.6982413450801177`*^9}, {3.6982415966143312`*^9, 3.698241607293414*^9}, {
   3.698241638323495*^9, 3.6982416395132837`*^9}, {3.6982416887425785`*^9, 
   3.698241696773405*^9}, {3.698241822416162*^9, 3.6982418436196356`*^9}, {
   3.6982418853778315`*^9, 3.6982419724720964`*^9}, {3.6982684593176923`*^9, 
   3.6982685497169113`*^9}, {3.6982685851762476`*^9, 3.698268651698173*^9}, {
   3.6982687051849484`*^9, 3.6982688063507752`*^9}, {3.6982817507720194`*^9, 
   3.698281838841721*^9}, {3.6983178004506273`*^9, 3.6983178149373293`*^9}, {
   3.7093029132134314`*^9, 3.7093029246151695`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples", "Section",
 CellChangeTimes->{{3.6980732393627605`*^9, 3.6980732540080023`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Creates", " ", "a", " ", "random", " ", "backbone", " ", "with", " ", "7",
     " ", "atoms"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"x", "=", 
   RowBox[{"DGRandom3DBackbone", "[", 
    RowBox[{"7", ",", "\"\<HomogeneousCoords\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.709458316158923*^9, 3.709458335126977*^9}, {
  3.7094583696826596`*^9, 3.7094583740770683`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Creates", " ", "a", " ", "random", " ", "MDGP", " ", "instance", " ", 
     "with", " ", "7", " ", "atoms"}], ",", " ", 
    RowBox[{
     RowBox[{"precision", " ", "of"}], " ", "\[PlusMinus]", 
     RowBox[{
     "10", "%", " ", "and", " ", "upper", " ", "distance", " ", "bound", " ", 
      "of", " ", "5", "\[Angstrom]"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"P", "=", 
    RowBox[{"DGRandomMDGP", "[", 
     RowBox[{"7", ",", "0.1", ",", "5.0"}], "]"}]}], ";", 
   RowBox[{"DGPrintGraph", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.698268659292677*^9, 3.698268679682145*^9}, {
  3.7094578190047965`*^9, 3.709457820820792*^9}, {3.709457854192442*^9, 
  3.7094579564482503`*^9}, {3.709458046939109*^9, 3.709458049173118*^9}, {
  3.709458166981526*^9, 3.709458205028442*^9}, {3.709458261862075*^9, 
  3.709458264255425*^9}, {3.7094583954761567`*^9, 3.7094584307584143`*^9}, {
  3.7094624440356345`*^9, 3.7094624690429926`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\[Theta]", ",", "\[Omega]"}], "}"}], "=", 
  RowBox[{"DGPlaneAndTorsionAngles", "[", "x", "]"}]}]}], "Input",
 CellChangeTimes->{{3.698074093754369*^9, 3.698074100719349*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Plot Routines\n",
 StyleBox["DGPlot3DBackbone, DGPlotAdjacencyMatrix", "Subitem",
  FontFamily->"Arial Narrow",
  FontSize->18,
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]]
}], "Subchapter",
 CellChangeTimes->{{3.698067020384124*^9, 3.6980670292797318`*^9}, {
  3.69807933406898*^9, 3.6980793390359116`*^9}}],

Cell[CellGroupData[{

Cell["Source Code", "Section",
 CellChangeTimes->{{3.6980799303095355`*^9, 3.698079937820016*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\[IndentingNewLine]", 
   RowBox[{
   "DGPlot3DBackbone", ",", "\[IndentingNewLine]", "DGPlotAdjacencyMatrix"}], 
   "\[IndentingNewLine]", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGPlot3DBackbone", "[", 
    RowBox[{"X_", ",", "r_", ",", "d_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"objs", "=", 
        RowBox[{"{", "}"}]}], ",", "single", ",", "k", ",", "Y"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Plots", " ", "the", " ", "points", " ", "using", " ", "the", " ", 
       "coordinates", " ", "of", " ", 
       RowBox[{"X", "[", "\"\<Points\>\"", "]"}], " ", "property"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"single", "=", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{
          RowBox[{"X", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Equal]", "0"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"single", ",", 
        RowBox[{"Y", "=", 
         RowBox[{"{", "X", "}"}]}], ",", 
        RowBox[{"Y", "=", "X"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"k", "=", "1"}], ",", 
        RowBox[{"k", "\[LessEqual]", 
         RowBox[{"Length", "[", "Y", "]"}]}], ",", 
        RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"objs", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"objs", ",", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Red", ",", 
                RowBox[{"Sphere", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Y", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", "r"}], "]"}]}], "}"}],
               ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"objs", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"objs", ",", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Blue", ",", 
                RowBox[{"Sphere", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Y", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", "r"}], "]"}]}], "}"}],
               ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "3", ",", 
                RowBox[{"Length", "[", 
                 RowBox[{"Y", "[", 
                  RowBox[{"[", "k", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"objs", ",", 
           RowBox[{"{", 
            RowBox[{"LightGray", ",", 
             RowBox[{"Tube", "[", 
              RowBox[{
               RowBox[{"Y", "[", 
                RowBox[{"[", "k", "]"}], "]"}], ",", "d"}], "]"}]}], "}"}]}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Graphics3D", "[", "\[IndentingNewLine]", 
       RowBox[{"objs", ",", "\[IndentingNewLine]", " ", 
        RowBox[{"Axes", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Boxed", "\[Rule]", "False"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGPlotAdjacencyMatrix", "[", 
    RowBox[{"G_", ",", 
     RowBox[{"DiagonalCovering_:", "False"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "i", ",", "j", ",", "n", ",", "ei", ",", "ej", ",", "edges", ",", 
       "primitives", ",", "add"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", "=", 
       RowBox[{"Max", "[", 
        RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"edges", "=", 
       RowBox[{"EdgeList", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"inverting", " ", "edges", " ", "position"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"edges", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"edges", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"n", "-", 
            RowBox[{
             RowBox[{"edges", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "edges", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"primitives", "=", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"PointSize", "[", "Medium", "]"}], ",", 
           RowBox[{"Point", "[", "edges", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"Red", ",", "Dashed", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "n"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"n", ",", "1"}], "}"}]}], "}"}], "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Plot", " ", "diagonal", " ", "covering"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"DiagonalCovering", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"i", "=", "1"}], ",", 
           RowBox[{"i", "\[LessEqual]", 
            RowBox[{"Length", "[", "edges", "]"}]}], ",", 
           RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"add", "=", "True"}], ";", "\[IndentingNewLine]", 
            RowBox[{"ei", "=", 
             RowBox[{"edges", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"j", "=", "1"}], ",", 
              RowBox[{"j", "\[LessEqual]", 
               RowBox[{"Length", "[", "edges", "]"}]}], ",", 
              RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"ej", "=", 
                RowBox[{"edges", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"ej", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "==", 
                    RowBox[{"ei", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "&&", 
                   RowBox[{
                    RowBox[{"ej", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ">", 
                    RowBox[{"ei", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], ")"}], ",", 
                 RowBox[{"add", "=", "False"}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"ej", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "==", 
                    RowBox[{"ei", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "&&", 
                   RowBox[{
                    RowBox[{"ej", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ">", 
                    RowBox[{"ei", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ")"}], ",", 
                 RowBox[{"add", "=", "False"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"add", ",", "\[IndentingNewLine]", 
              RowBox[{"PrependTo", "[", 
               RowBox[{"primitives", ",", "\[IndentingNewLine]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Opacity", "[", "0.2", "]"}], ",", "Red", ",", 
                  RowBox[{"Triangle", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ei", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"n", "+", "1", "-", 
                    RowBox[{"ei", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", "ei", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"n", "+", "1", "-", 
                    RowBox[{"ei", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                    RowBox[{"ei", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], "]"}]}],
                  "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"Graphics", "[", 
       RowBox[{"primitives", ",", "\[IndentingNewLine]", 
        RowBox[{"Axes", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Ticks", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Automatic", ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"n", "+", "1", "-", "i"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "n"}], "}"}]}], "]"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AxesOrigin", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.698067066932127*^9, 3.6980670691426945`*^9}, {
  3.6980671902539835`*^9, 3.698067204062685*^9}, {3.698072477390606*^9, 
  3.698072477433634*^9}, {3.700987271372648*^9, 3.7009872875874596`*^9}, {
  3.700987323104432*^9, 3.7009874696514378`*^9}, {3.700987505505695*^9, 
  3.700987529023263*^9}, {3.7009875975775332`*^9, 3.7009877752900534`*^9}, {
  3.700987878201973*^9, 3.7009878784024715`*^9}, {3.700987950788203*^9, 
  3.7009880153453655`*^9}, {3.7009924409184427`*^9, 3.700992486222743*^9}, {
  3.7009926305790386`*^9, 3.700992654396882*^9}, {3.7009926852740664`*^9, 
  3.7009929240122814`*^9}, {3.7009929569973097`*^9, 3.700993026603757*^9}, {
  3.700993113636631*^9, 3.70099315839818*^9}, {3.7009932005168066`*^9, 
  3.7009932252977724`*^9}, {3.7009936381442947`*^9, 3.70099364635505*^9}, {
  3.7009938366151433`*^9, 3.70099384037185*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples", "Section",
 CellChangeTimes->{{3.6980799499995937`*^9, 3.698079957872316*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Plot", " ", "a", " ", "simple", " ", "a", " ", "backbone"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGRandomMDGP", "[", 
      RowBox[{"50", ",", "0.1", ",", "5.0"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"DGPlot3DBackbone", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<X\>\"", "]"}], ",", "0.1", ",", "0.04"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.698079970912464*^9, 3.698080010863962*^9}, {
   3.6980800447884617`*^9, 3.6980800500019207`*^9}, {3.7009874748140745`*^9, 
   3.7009874888528194`*^9}, {3.70098769231281*^9, 3.7009876933628187`*^9}, 
   3.7009877878708878`*^9, {3.7009878646324606`*^9, 3.700987907848855*^9}, {
   3.7009880253623495`*^9, 3.7009880288635263`*^9}, {3.7094625681120806`*^9, 
   3.709462644772151*^9}, {3.7094727774587297`*^9, 3.7094727927558627`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Plot", " ", "adjacency", " ", "matrix"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGRandomMDGP", "[", 
      RowBox[{"10", ",", "0.1", ",", "5.0"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"DGPlotAdjacencyMatrix", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "True"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.698080062339603*^9, 3.6980801360647244`*^9}, {
  3.70946255357071*^9, 3.70946255963478*^9}}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["2) Check Solution and Standard Solvers", "Chapter",
 CellChangeTimes->{
  3.6896820831181965`*^9, {3.6957184087362404`*^9, 3.695718419041832*^9}, {
   3.698067376091146*^9, 3.6980673786551833`*^9}, {3.698080445180032*^9, 
   3.698080464298929*^9}, {3.6980805484661093`*^9, 3.6980805555092807`*^9}},
 Background->RGBColor[1, 1, 0.85]],

Cell[CellGroupData[{

Cell[TextData[{
 "Solution Analysis \n",
 StyleBox["DGRelativeResidue,", "Text",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" DGRMSD", "Item",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[", DGLDME", "Item",
  FontSlant->"Italic"]
}], "Subchapter",
 CellChangeTimes->{{3.698080472408944*^9, 3.6980804768391886`*^9}, {
   3.6980819993394966`*^9, 3.6980819997147427`*^9}, {3.69808505769368*^9, 
   3.698085064416663*^9}, {3.6980850988719807`*^9, 3.6980851081311226`*^9}, 
   3.7003143420681887`*^9, {3.700316618932584*^9, 3.7003166283211555`*^9}, {
   3.7094671877906017`*^9, 3.709467203225402*^9}}],

Cell[CellGroupData[{

Cell["Source Code", "Section",
 CellChangeTimes->{{3.6980817616089787`*^9, 3.6980817644118385`*^9}, {
  3.698081995870195*^9, 3.698081997682396*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"DGRelativeResidue", ",", "DGRMSD"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGRelativeResidue", "[", 
     RowBox[{"G_", ",", "X_", ",", 
      RowBox[{"verbose_:", "False"}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Calculates", " ", "the", " ", "total", " ", "relative", " ", "residue", 
      " ", "considering", " ", "all", " ", "nodes"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "i", ",", "j", ",", "k", ",", "lij", ",", "uij", ",", " ", "dij", ",", 
        "numberOfEdges", ",", "E", ",", "error"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"E", "=", 
        RowBox[{"EdgeList", "[", 
         RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"numberOfEdges", "=", 
        RowBox[{"Length", "[", "E", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"error", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "numberOfEdges"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "1"}], ",", 
         RowBox[{"k", "\[LessEqual]", "numberOfEdges"}], ",", 
         RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"i", "=", 
             RowBox[{
              RowBox[{"E", "[", 
               RowBox[{"[", "k", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{"j", "=", 
             RowBox[{
              RowBox[{"E", "[", 
               RowBox[{"[", "k", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"lij", ",", "uij"}], "}"}], "=", 
           RowBox[{"DGEdgeDistanceBounds", "[", 
            RowBox[{"G", ",", 
             RowBox[{"i", "\[UndirectedEdge]", "j"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dij", "=", 
           RowBox[{"Norm", "[", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "-", 
             RowBox[{"X", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"error", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "=", 
           RowBox[{"Max", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Max", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"lij", "-", "dij"}]}], "}"}], "]"}], "/", "lij"}], 
             ",", 
             RowBox[{
              RowBox[{"Max", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"dij", "-", "uij"}]}], "}"}], "]"}], "/", "uij"}]}], 
            "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verbose", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", "\"\<\!\(\*
StyleBox[\"Solution\",
FontSlant->\"Italic\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Italic\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"Quality\",
FontSlant->\"Italic\",
FontVariations->{\"Underline\"->True}]\)\>\"", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<Number of nodes      : \>\"", ",", 
            RowBox[{"Length", "[", "X", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<Number of edges      : \>\"", ",", 
            RowBox[{"Length", "[", "E", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<Relative error bounds: \>\"", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Min", "[", "error", "]"}], ",", 
              RowBox[{"Max", "[", "error", "]"}]}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<Mean relative error  : \>\"", ",", 
            RowBox[{"Mean", "[", "error", "]"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "error", "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGRelativeResidue", "[", 
     RowBox[{"G_", ",", "X_", ",", "nid_", ",", "i_", ",", 
      RowBox[{"verbose_:", "False"}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Calculates", " ", "the", " ", "relative", " ", "residue", " ", "of", 
      " ", "the", " ", "node", " ", 
      RowBox[{"nid", "[", 
       RowBox[{"[", "i", "]"}], "]"}], " ", "considering", " ", "only", " ", 
      "the", " ", "nodes", " ", 
      RowBox[{"nid", "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", 
         RowBox[{"i", "-", "1"}]}], "]"}], "]"}]}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"local", " ", "variables"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "rij", ",", "j", ",", "k", ",", "V", ",", "Xi", ",", "Xj", ",", "Dij", 
        ",", "Lij", ",", "Uij", ",", "relres"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"current", " ", "position"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Xi", "=", 
        RowBox[{"X", "[", 
         RowBox[{"[", 
          RowBox[{"nid", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "considering", " ", "only", " ", "the", " ", "precedent", " ", 
         "nodes"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"V", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"AdjacencyList", "[", 
           RowBox[{"G", ",", 
            RowBox[{"nid", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"nid", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", 
                RowBox[{"i", "-", "1"}]}], "]"}], "]"}], ",", "#"}], "]"}], 
           "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"relres", "=", "0.0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "1"}], ",", 
         RowBox[{"k", "\[LessEqual]", 
          RowBox[{"Length", "[", "V", "]"}]}], ",", 
         RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"neighbor", " ", "index"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"V", "[", 
            RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"neighbor", " ", "coordinate"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Xj", "=", 
           RowBox[{"X", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"actual", " ", "distance"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Dij", "=", 
           RowBox[{"EuclideanDistance", "[", 
            RowBox[{"Xi", ",", "Xj"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"distance", " ", "bounds"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Lij", ",", "Uij"}], "}"}], "=", 
           RowBox[{"DGEdgeDistanceBounds", "[", 
            RowBox[{"G", ",", 
             RowBox[{
              RowBox[{"nid", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "\[UndirectedEdge]", "j"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"error", " ", "Dij"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"rij", "=", 
           RowBox[{"Max", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Lij", "-", "Dij"}], ")"}], "/", "Lij"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Dij", "-", "Uij"}], ")"}], "/", "Uij"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"And", "[", 
             RowBox[{"verbose", " ", ",", 
              RowBox[{"rij", ">", "0.001"}]}], "]"}], ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<Rij[\>\"", ",", "j", ",", "\"\<,\>\"", ",", 
              RowBox[{"nid", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<]=\>\"", ",", 
              "rij"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"update", " ", "error"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"rij", ">", "relres"}], ",", 
            RowBox[{"relres", "=", "rij"}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verbose", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<RelRes[\>\"", ",", 
           RowBox[{"nid", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<]=\>\"", ",", 
           "relres"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "relres", "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRMSD", "[", 
   RowBox[{"X_", ",", "Y_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "xc", ",", "yc", ",", "x", ",", "y", ",", "U", ",", "D", ",", "V", ",", 
      "rmsd"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"calculating", " ", "centers"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"xc", "=", 
      RowBox[{"Mean", "[", "X", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"yc", "=", 
      RowBox[{"Mean", "[", "Y", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "translation", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"x", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"X", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "-", "xc"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"y", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Y", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "-", "yc"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "Y", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "svd", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"V", "=", 
      RowBox[{
       RowBox[{"Transpose", "[", "x", "]"}], ".", "y"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"U", ",", "D", ",", "V"}], "}"}], "=", 
      RowBox[{"SingularValueDecomposition", "[", "V", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"V", "=", 
      RowBox[{"N", "[", 
       RowBox[{"U", ".", 
        RowBox[{"Transpose", "[", "V", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"x", "=", 
      RowBox[{"x", ".", "V"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rmsd", "=", 
      RowBox[{
       RowBox[{"Norm", "[", 
        RowBox[{
         RowBox[{"x", "-", "y"}], ",", "\"\<Frobenius\>\""}], "]"}], "/", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Length", "[", "x", "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"rmsd", ",", "V", ",", 
        RowBox[{"N", "[", "x", "]"}], ",", 
        RowBox[{"N", "[", "y", "]"}]}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{
  3.694502972960245*^9, {3.698067367481141*^9, 3.698067395833313*^9}, {
   3.698067426273737*^9, 3.6980674351745768`*^9}, {3.698067476857498*^9, 
   3.698067483945337*^9}, {3.698072477617757*^9, 3.6980724776993113`*^9}, {
   3.698080496562684*^9, 3.698080532662128*^9}, {3.6980805663762627`*^9, 
   3.6980805821927524`*^9}, {3.6980806901517887`*^9, 3.698080796669462*^9}, {
   3.6980808393943543`*^9, 3.698080998395549*^9}, {3.6980810288677597`*^9, 
   3.698081062766244*^9}, {3.6980810944827795`*^9, 3.6980812551239653`*^9}, {
   3.6980812941803694`*^9, 3.698081718035078*^9}, 3.698081759366491*^9, {
   3.6980821303298736`*^9, 3.698082131928934*^9}, {3.6980823171869106`*^9, 
   3.6980823242021375`*^9}, {3.6980824851120887`*^9, 3.6980824974522734`*^9}, 
   3.6980826051157875`*^9, {3.698082694063882*^9, 3.698083018317852*^9}, {
   3.698083054638441*^9, 3.698083067468951*^9}, {3.698083643291038*^9, 
   3.698083685250867*^9}, {3.698084961578022*^9, 3.6980849783856697`*^9}, {
   3.6980850110823555`*^9, 3.6980850259131927`*^9}, {3.6980850881383624`*^9, 
   3.6980851960959663`*^9}, 3.698085227318336*^9, {3.698085299672714*^9, 
   3.69808532412243*^9}, {3.6982596118859816`*^9, 3.6982596174341617`*^9}, {
   3.7003143019857407`*^9, 3.7003143249318533`*^9}, 3.7093889810015297`*^9, {
   3.709389028227051*^9, 3.7093890622281184`*^9}, {3.7094675057193584`*^9, 
   3.7094675153799567`*^9}, {3.709467567246298*^9, 3.709467591506498*^9}, {
   3.7094676322869787`*^9, 3.709467636493117*^9}, {3.709544825346499*^9, 
   3.7095448351533165`*^9}, {3.7095450232187967`*^9, 
   3.7095454210270276`*^9}, {3.7095454586663404`*^9, 3.709545485374361*^9}, {
   3.7095458694401474`*^9, 3.709545909608534*^9}, {3.7095463957774143`*^9, 
   3.709546421940365*^9}, {3.709546463478639*^9, 3.7095465084448013`*^9}, {
   3.7095465569823227`*^9, 3.7095465591371264`*^9}, {3.7095465993745036`*^9, 
   3.7095466055978355`*^9}, {3.709547647747299*^9, 3.7095476754045477`*^9}, {
   3.7095478016524577`*^9, 3.7095479092093496`*^9}, {3.7095481952621107`*^9, 
   3.7095482448891573`*^9}, {3.7095482841658087`*^9, 
   3.7095482859061265`*^9}, {3.709548404495615*^9, 3.709548409183984*^9}, {
   3.7095485007044287`*^9, 3.709548502907509*^9}, {3.7095485530392885`*^9, 
   3.7095485727596045`*^9}, {3.709548632103676*^9, 3.709548638899165*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Section",
 CellChangeTimes->{{3.679350148964155*^9, 3.679350152549901*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Check", " ", "relative", " ", "residue"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGProblem", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"x", " ", "=", " ", "solution"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"DGRelativeResidue", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"x", " ", "=", " ", 
     RowBox[{"x", " ", "+", " ", 
      RowBox[{"small", " ", "perturbation"}]}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"DGRelativeResidue", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", 
     RowBox[{"x", "+", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"0.1", ",", 
        RowBox[{"Length", "[", "x", "]"}]}], "]"}]}], ",", "True"}], "]"}], 
   " "}]}]], "Input",
 CellChangeTimes->{{3.6980818764703417`*^9, 3.698081886967304*^9}, {
   3.698081945433242*^9, 3.698081988827022*^9}, 3.698082060929844*^9, {
   3.6980820951910677`*^9, 3.6980820983881884`*^9}, {3.6980821446609993`*^9, 
   3.6980822671425567`*^9}, {3.6980825518738685`*^9, 3.698082555863014*^9}, {
   3.6980830370027437`*^9, 3.6980830414366865`*^9}, {3.6980830871540065`*^9, 
   3.6980830909235086`*^9}, {3.69808533986487*^9, 3.698085364223053*^9}, 
   3.698085405098055*^9, {3.6980854633787403`*^9, 3.698085468666749*^9}, {
   3.700314324969633*^9, 3.700314324969633*^9}, {3.7095457661261945`*^9, 
   3.7095457940409236`*^9}, {3.709545957360673*^9, 3.709545958026389*^9}, {
   3.709546006225478*^9, 3.7095460089119415`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Check", " ", "relative", " ", "residue", " ", "of", " ", "a", " ", 
    "specific", " ", "node"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eij", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
       RowBox[{"1", "\[UndirectedEdge]", "3"}], ",", 
       RowBox[{"1", "\[UndirectedEdge]", "4"}], ",", 
       RowBox[{"1", "\[UndirectedEdge]", "5"}], ",", 
       RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
       RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
       RowBox[{"2", "\[UndirectedEdge]", "5"}], ",", 
       RowBox[{"3", "\[UndirectedEdge]", "4"}], ",", 
       RowBox[{"3", "\[UndirectedEdge]", "5"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGProblem", "[", 
      RowBox[{"x", ",", "eij"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nid", "=", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "5"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"DGRelativeResidue", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "nid", ",", "4"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7095459408932185`*^9, 3.709546020238182*^9}, {
  3.7095462260978975`*^9, 3.7095463785409155`*^9}, {3.709547919656417*^9, 
  3.7095479258933096`*^9}}],

Cell[BoxData["0.`"], "Output",
 CellChangeTimes->{
  3.709546297639721*^9, {3.70954638085888*^9, 3.709546425661013*^9}, {
   3.7095464918766394`*^9, 3.709546511717534*^9}, 3.7095465726529307`*^9, 
   3.709546611167782*^9, {3.709547682477912*^9, 3.7095476911388693`*^9}, {
   3.7095479225777435`*^9, 3.709547931536677*^9}, 3.7095482494560213`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"DGRMSD", ":", " ", 
    RowBox[{"X", " ", "\[Equal]", " ", "Y"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"X", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Y", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}],
     ";"}], "\n", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"MatrixForm", "[", "X", "]"}], ",", 
     RowBox[{"MatrixForm", "[", "Y", "]"}]}], "}"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rmsd", ",", "Q", ",", "x", ",", "y"}], "}"}], "=", 
     RowBox[{"DGRMSD", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"rmsd", ",", 
     RowBox[{"MatrixForm", "[", "Q", "]"}], ",", 
     RowBox[{"MatrixForm", "[", "x", "]"}], ",", 
     RowBox[{"MatrixForm", "[", "y", "]"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.698085535985145*^9, 3.6980855913598733`*^9}, {
  3.709388798861831*^9, 3.7093888081147995`*^9}, {3.7093889765170937`*^9, 
  3.7093889776860886`*^9}, {3.709389142735469*^9, 3.709389153618148*^9}, {
  3.709467661313006*^9, 3.709467697074379*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"DGRMSD", ":", " ", 
    RowBox[{"X", " ", "\[NotEqual]", " ", "Y"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"X", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Y", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "1.5"}], "}"}]}], 
      "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"MatrixForm", "[", "X", "]"}], ",", 
     RowBox[{"MatrixForm", "[", "Y", "]"}]}], "}"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rmsd", ",", "Q", ",", "x", ",", "y"}], "}"}], "=", 
     RowBox[{"DGRMSD", "[", 
      RowBox[{"X", ",", "Y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"rmsd", ",", 
     RowBox[{"MatrixForm", "[", "Q", "]"}], ",", 
     RowBox[{"MatrixForm", "[", "x", "]"}], ",", 
     RowBox[{"MatrixForm", "[", "y", "]"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.7094677389584646`*^9, 3.709467744093162*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "General Methods\n",
 StyleBox[" DGNSolver, DGAllEdgesSolver, DGOptSolver", "Text",
  FontSlant->"Italic"]
}], "Subchapter",
 CellChangeTimes->{{3.6944402487750998`*^9, 3.694440261776547*^9}, {
   3.6950520111428094`*^9, 3.695052013723016*^9}, {3.6980831506880984`*^9, 
   3.6980831767769136`*^9}, {3.698133371312555*^9, 3.6981333836562414`*^9}, {
   3.698135930449641*^9, 3.698135948486604*^9}, 3.700322100281624*^9, {
   3.7095499901009407`*^9, 3.709550013053536*^9}}],

Cell[CellGroupData[{

Cell["DGNSolver - Nonlinear equations", "Section",
 CellChangeTimes->{{3.695980774599187*^9, 3.6959807890422645`*^9}, {
   3.698083438792361*^9, 3.6980834456569133`*^9}, 3.6981342346777525`*^9, 
   3.7095499902229223`*^9}],

Cell[CellGroupData[{

Cell["Main concepts", "Subsection",
 CellChangeTimes->{{3.698134238989613*^9, 3.698134242903209*^9}, 
   3.7094665937853384`*^9}],

Cell[BoxData[{
 StyleBox["Formulation",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Determine", " ", 
   StyleBox[
    SubscriptBox["x", "1"],
    FontSlant->"Italic"]}], 
  StyleBox[",",
   FontSlant->"Italic"], 
  StyleBox[
   SubscriptBox["x", "2"],
   FontSlant->"Italic"], 
  StyleBox[",",
   FontSlant->"Italic"], 
  StyleBox["...",
   FontSlant->"Italic"], 
  StyleBox[",",
   FontSlant->"Italic"], 
  RowBox[{
   StyleBox[
    SubscriptBox["x", "n"],
    FontSlant->"Italic"], " ", "\[Element]", 
   RowBox[{
    SuperscriptBox["\[DoubleStruckCapitalR]", "3"], " ", "such", " ", 
    "that"}]}]}], "\[IndentingNewLine]", 
 StyleBox[
  TagBox[GridBox[{
     {"\[Piecewise]", GridBox[{
        {
         RowBox[{
          StyleBox[
           RowBox[{"|", 
            StyleBox["|",
             FontSlant->"Plain"]}]], 
          RowBox[{
           SubscriptBox["x", "1"], "-", 
           SubscriptBox["x", "2"]}], 
          StyleBox[
           RowBox[{"|", 
            StyleBox["|",
             FontSlant->"Plain"]}]]}], 
         RowBox[{
          StyleBox["=",
           FontSlant->"Plain"], 
          SubscriptBox["d", "12"]}]},
        {
         RowBox[{
          StyleBox[
           RowBox[{
            StyleBox["|",
             FontSlant->"Plain"], "|"}]], 
          RowBox[{
           SubscriptBox["x", "1"], "-", 
           SubscriptBox["x", "3"]}], 
          StyleBox[
           RowBox[{
            StyleBox["|",
             FontSlant->"Plain"], "|"}]]}], 
         RowBox[{
          StyleBox["=",
           FontSlant->"Plain"], 
          SubscriptBox["d", "13"]}]},
        {"...", " "},
        {
         RowBox[{
          StyleBox[
           RowBox[{"|", 
            StyleBox["|",
             FontSlant->"Plain"]}]], 
          RowBox[{
           SubscriptBox["x", "i"], "-", 
           SubscriptBox["x", "j"]}], 
          StyleBox[
           RowBox[{"|", 
            StyleBox["|",
             FontSlant->"Plain"]}]]}], 
         RowBox[{
          StyleBox["=",
           FontSlant->"Plain"], 
          SubscriptBox["d", "ij"]}]}
       },
       AllowedDimensions->{2, Automatic},
       Editable->True,
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
         "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.84]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}},
       Selectable->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.35]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   "Piecewise",
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True,
   Selectable->False],
  FontSlant->"Italic"], "\[IndentingNewLine]", 
 RowBox[{"(*", 
  RowBox[{
  ")", " ", "All", " ", "constraints", " ", "must", " ", "be", " ", 
   "equalities", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      StyleBox[
       SubscriptBox["d", "ij"],
       FontSlant->"Italic"], " ", "is", " ", "exact"}], ")"}], 
    "."}]}]}]}], "Text",
 CellChangeTimes->{{3.709469382050675*^9, 3.709469599132248*^9}, {
   3.709469785822062*^9, 3.709469803624137*^9}, {3.7094699947486534`*^9, 
   3.7094700397214284`*^9}, {3.709470894555976*^9, 3.7094709453967333`*^9}, 
   3.709546664777776*^9, {3.709546764141057*^9, 3.7095467647778254`*^9}},
 FontFamily->"Times New Roman",
 FontSize->18],

Cell[CellGroupData[{

Cell["Linear approximations (Newton method)", "Subsubsection",
 CellChangeTimes->{{3.709465577499*^9, 3.70946560433134*^9}, {
  3.7094666034257517`*^9, 3.7094666078966484`*^9}, {3.7094667051407757`*^9, 
  3.7094667208634553`*^9}, {3.7094729730292764`*^9, 3.709472976817997*^9}}],

Cell[TextData[{
 StyleBox["Goal: Find ",
  FontFamily->"Times New Roman",
  FontSize->18],
 StyleBox["x",
  FontFamily->"Times New Roman",
  FontSize->18,
  FontSlant->"Italic"],
 StyleBox[" such that ",
  FontFamily->"Times New Roman",
  FontSize->18],
 StyleBox["f",
  FontFamily->"Times New Roman",
  FontSize->18,
  FontSlant->"Italic"],
 StyleBox["(",
  FontFamily->"Times New Roman",
  FontSize->18],
 StyleBox["x",
  FontFamily->"Times New Roman",
  FontSize->18,
  FontSlant->"Italic"],
 StyleBox[") = 0.",
  FontFamily->"Times New Roman",
  FontSize->18],
 "\n",
 Cell[BoxData[
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzt3W+MHPWd5/Hauyf3YB6cHyBhKVY4WZYcCQVZo5HOCJ08irCSGFFoT8g6
ElljNFmMyMY4vraxxJhocZFcBpG154IJ2REpi6wddktwOFGms5497LRsLsyq
bdkWahYbmYZJPKYN1tg9Znrcfb+ZMkVNVXV1/euuf+/XA2R6enp+iAmffH/1
+32//+XR7X/9N/9BkqSd/0n85a+37h784Q+37vnv/1n8zcM/2Pn4Yz/43vC3
fvA/v/fY9374Xx/9j+LF//tXkrRbvH/xzy0AANBGqVSSTAYGBuJeEQAAGTE2
NmYOWfG3ca8IAICMEKWrOWTL5XLcKwIAIAtEpErL1ev1uBcFAEAWqKpqTlhF
UeJeEQAAGSHLsjlki8Vi3CsCACALqtWqZa+4VqvFvSgAALJA1K3mhB0eHo57
RQAAZIRIVXPIqqoa94oAAMiCWq1m2SuuVqtxLwoAgCyw7BXLshz3igAAyAhF
UdgrBgAgcvV63bJXTKMnAAAiwVAAAAC6xLJXzFAAAACiwlAAAAC6gaEAAAB0
iWWALEMBAACIimWvuFQqxb0ioKf03/y4VwEgg9grBghZAF3CXjFAyALoEvaK
AUIWQDdUKhXLXjEDZJFDhCyAblBV1ZywDJBFPhGyALpBlmVzyBaLxbhXBMSA
kAUQuWq1yl4x0CJkAXQBe8WAjpAFEDn2igEdIQsgWuwVAwZCFkC02CsGDIQs
gGixVwwYCFkAEWKvGDAjZAFEiL1iwIyQBRAh9ooBM0IWQFToVwxYELIAomKZ
bcdeMUDIAoiKZbYde8UAIQsgEuVymb1iwIKQBRAJy16xoihxrwiIHyELIBKW
veJSqRT3ipBb81fPvfn83h/9dPRH24eePHD8o0Z8SyFkAYRn3yuu1+txLwr5
1Jg5rgyuf3pi+mbr1nuHHrpLWrFzoraw/C1/eefVf/zjFc/Z25w59cqviheu
Nf2vhpAFEB57xUiI5vSbj6+5Z9vRjxYDsVn9/Y771z/+zxfmjXhsNq7+2/hT
L0xcuu4vMRvVY8/tPXDyY79FMSELICRRtFrKWPaKEY/m5cnd90p3P3fqhmOE
NhvTf9grbz9y4UaQD29cOrrj8QOnP/WVzoQsgJBEpJoTdmBggL1ixKL5sbZ1
hbRq5MR1x6/Onn5p88YdEx8H2PW9/Qm1Y7vvfcJXRhOyAEJSFMUcsmNjY3Gv
CPk0Vxl/WJLu2T7xF4cvNmvvjMort2rBI3bRjcr4Iyse/MW5Oa+fQsgCCMO+
V1wul+NeFHLp1rvjG1dK0sPjlTnb15rzlXG5b92TE38OlbGLG9JHt61YO3Tk
fY8PZwlZAGEUi0XLXnHcK0LOND+a2Du8ZcuW727q7xO/gn39m767ZYkyMW0k
4ScnRu6TVu6ZvHbL9v235q5UTh19ZXTXlg2r7xpU/nj1dgzfnD7+822Da1dv
Hj9vrlubl7ShNe0f+1oRsgDCGB4eZq8YCbAwc/RvRciu2D5hbzS2VH5Kknzo
okMwNj6brs7M3rxx7mV58fv1+z43p4+98OTuke2b1vat//HJZdGsb0r375q8
4mVZhCyAwGq1mmWvuFqtxr0o5NNnp/bdJ0krN46/aytWb12b3LNSku7ad+qm
ywc0//2QvEqS1o+cqM2/f2TP/56aXUzkhUbDEszN6yeeEe9rd7zKgpAFEJim
aeaElWU57hUhr0wRafvajfMH5Tb56/S2n7+m/t1r78+33Q1eOL1/nfh13zhe
cf04HSELIDDLiHZVVeNeEfLq2uQuUaz2/e3RmQXb165M7uqXpNVbtA9dP+J2
iSr1bT54btbtjdPaFvG2u5RTNzs/liVkAQRTrVYte8WM3UFcFs4fvE/8Ct53
8Lw9Y1sfaltWewjZVnNaG+oTbxydcj86rIes9Jg23fmIMSELIBhGtCMxbp96
avOc1GvItm6e2neX+F3eeuTDebe3EbIAuo8R7UgM/dTTmiHtktMG7l8mtt/j
IWRvvH/o++v7V3U+OUzIAugyxu4gQW6fepIPnndseDg7Nbqh08Gn5vz7h3e+
8Md3/3lbn7TivoNnHXadjbd+eGSz5GFXeQkhCyAASytFxu4gTvqpJ+deEy1j
M9ktFefOvLTj5dOzC7cq4xsl40Zts/HnCx/MWvO2MTW6WpL6hrRpD+0oCFkA
fjF2B4ly+9TT5iMftkm929G5RZte9nJj9sons41mq3nl5POjr19aasZ4853R
e0Qtu/3o5UZr7t3XXn7rsvUzF2oTO1d0vhB0GyELwC9aKSJJ9ELVdY9Xn96+
6pkTpimyty4ceqivb/Wm7488+eToyStffEG/77NqcNf+F5WXT8zYa99rU6P3
S33fPXTBrbOFgZAF4BetFJEk+qmn+0enrrV/z0Jt8um10qb9p7+8ANu8+v9e
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
QHVb
      "], {{0, 447}, {631, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSize->{379.9285714285716, Automatic},
    ImageSizeRaw->{631, 447},
    PlotRange->{{0, 631}, {0, 447}}], "        "}]], "Input"]
}], "Text",
 CellChangeTimes->{{3.698134238989613*^9, 3.698134242903209*^9}, {
   3.7094656242324886`*^9, 3.709465663918378*^9}, {3.7094663943305817`*^9, 
   3.709466395487277*^9}, {3.709466472568847*^9, 3.7094665662751102`*^9}, {
   3.7094666178470945`*^9, 3.709466636417967*^9}, {3.709472979980897*^9, 
   3.7094729976579943`*^9}, 3.7095468122050595`*^9},
 FontSize->16]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sensibility to initial points", "Subsubsection",
 CellChangeTimes->{{3.709465577499*^9, 3.70946560433134*^9}, {
  3.7094666034257517`*^9, 3.7094666078966484`*^9}, {3.7094666574343987`*^9, 
  3.70946666261091*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
bQyvjYGZmRnv13hv3LghVrtuBi4qjiAiDqqSqPHo0aPTp08fPHgQZOXQoUNX
r17lZ4Ur6M+PHj0KRVJTU6HPr88DFOi3L1y4sHfv3uTkZBqNJtD6WuCaQdkD
Bw6AowRyBi4St1cd6bVCnJKSAk7isWPHBPrWJ6jt9evX4ceB883IyOC4phk7
ZJkaOCP+D4QgSNODqoQ0Bvv27YPmtHLlSqor8v+QoERuXzRDEEREQFVCGoN/
/vmHzD1SXZH/h6wXDVUSnTXHEARhB1UJaUAOHTr0+PHj169fkxWYpaSkRCoY
mywMmJ+fT3VFEAThCqoS0oCQL84w4BixQCHkWzZeXl5UVwRBEK6gKiENyLp1
69zc3FxcXKZNm7Z//35Rmyt79OhRmzZtwINrymX5EQQRCFQlpFVBvkuFCzUj
iMiCqoS0Kshyf+DQUV0RBEE4g6qEtCpKS0vbtm3buXNnbm8lIwhCLahKSGuD
fACax1dEEQShEFQlpLURFxcHTX3MmDFUVwRBEA6gKiGtjbdv34qLi3fs2PHT
p09U1wVBEFZQlZBWiJOTE7T2vXv3Ul0RBEFYQVVCWiFJSUnQ2l1cXKiuCIIg
rKAqIa2Qjx8/dujQ4Zdffnn//j3VdUEQ5H9AVUJaJ6TlJyQkUF0RBEH+B1Ql
pHVy4MABaPCDBw+muiIIgvwPqEpI66SsrExCQqJt27YvX76kui4Igvw/qEpI
q2X8+PHQ5rdu3Up1RZD6Ul1d/eLFi2vXrl29evXjx48ClX3//v3Dhw8/fPjQ
SHWrk6dPn0IFRG0pYwpBVUJaLenp6dDmbWxsqK4IIjxnzpyBKyguLs74fsr1
69f5L/7XX38pKSl16dIF/tN4leTNtGnToNqJiYlUVYAbZWVl27dvnzlzpqur
q5eX15EjR378+NEEx0VVQlotX79+lZaWbtOmzePHj6muCyIMv/32W4cOHaDj
kpeXt7W1dXR0HDJkSGVlJZ/F37x5o6urC8X37NnTmNWsA3DxoA4GBgbg8VFY
DRZgzCYnJyf2vzg4OHz58qWxD42qhLRmpkyZAs0+KiqK6oogwgBjeBKyUl5e
LmhZkADoY6H4pEmTGqNuAqGvrw81KSgooLoi/2Hbtm0wWiMzCUlJSaBQs2fP
btu2LWzx9vZu7KOjKiGtmePHj0Ozt7KyoroiiMDAoL1jx45w+QoLC4UovnLl
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
wADzgoKD9dEmsPz8TB8fPx0dYwUF9cmTg44efUX9T4xWb9uy5XjXrppOTkNL
S0ubvg8UfVqVKr148WKA/QDTHqYH7hygumGiNbBtPr3ZZqwNOEf2k/rFXlws
qBiBFVZu9AsfC3rk5u4ADhGdThPaKitPBgd7yMtLLlky7dq14npqE9iuXYmD
Brl27ixpaztqy5bT1P/caPWz/Pwyd3cfBQWFmJiYJu4GRZ/Wo0oZGRlKSkru
Pu64tmoLs4jsCON+3RQ05KdFjMl6v1YIPQLbmDlHW1elTx/jy5fj6XRag9jV
q/GWlnqWlgYHDmypvzCBlZTkzJjhq6CgamzcKyIik/qfHq1+Fh9P09MzcHQc
8urVqybsC0Wd1qBKZWVlHpM91NTVmAPtiqqK0p6nJVxNAMt8K9iaQpAfSh18
dJCq5nzg7wNQgZyPOVTfVVRaSU3Jsv3LtHpoqRuqLUiYXPg9Wjg92l68wKKX
gb6BemZmBJ1Oa1irri7ets1XWVlm+PD++fkHGkSbrlwpWrJkubq6jo6OaVDQ
XlyuvFlbYeE3NzdvGDDjkyYGLV6VLl68qKun6zTSKffDf5ZXhf7c3N68bbu2
jODetTlr+W9HmW8y1fXV24m3i70QS1VbnrdlHlR71NxRVN9SrFZcXRyaFjpy
9sg+w/rY/2rvu9k393OjrGoL/pGmqaaOuVZw6sySmk3C6dGO04v6DTBVUZXb
tGluVVURnU5rJPvy5QSZ0Js+feTZs9kNok3Xr5eEh6/W0THW1jZevTqL+muP
Vg/btClbWVnF03NqRUVFk/SLIk3LVqXYuFhZWdng+GDG9U95kNJZsjOcqaSs
pJmdmZWjFVh6aTqfzSe/PN/I2giKe4V7UdiKj3863qlLp/Yd22e8zqD6fvp/
S7qVpGGowfI6j4K6QvLd5AY8SvzV+F4u1so6Sov3TBVaj3aeX9x/YHdlZdnI
SJ9v307S6bQmsCdPDo0fP0BJSXrFCu8rV042iDaBbdiwUV1dz8SkT0zMWeob
AZqwlp39ZuBAJ0NDo+vXrzd6zyjatFRVqqys9JzqqamlmXztf7pElxkucJp6
5nrCjeGdpjhBcZAzcAqobcUDxg2AmvhE+VB9M/3HYs7GgFBCldT01Py2+q07
vm7mmpldZLrAFi1jrQZ5lpf2Is12XH8ZZRmfTROEnq8DPRrgYAZ6tGbtzCbT
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
0qd1vnbU9PbXXynz549SUJCysTGNiQm5dq2YXZhyco4oK3edPj28jmuJJpKW
m/vRwMBo2bIgejNHlFWpsrKyn02/UW6cv+/QsNbDtoeanhq31Glh0+DHmbRk
ktD77+vat7NkZ266VlxdTNbWtnK04jZ1Nsxr2M/HSdOH1eelV6ps4c6Fsqqy
G0/Mc/dxlJWVdBpqnZkZQafT0JrYvn07mZCwwNxcp2tXxcWLPc+cyWIXJnl5
lfnzY1gvIVpzsPT0J6qqavHxO+jNGZFVpZqamtFjRvcf2L+4qrjxLiM4IOAf
Zf+TDZLRb3i/n///kM3uzkCG4d7DOS7czaclXks8+JD1tZ300vSAhIB5W+Yx
1tBj/3QgscNPD0MFPII8+P8+rOhYeFa4hLSEuZUBee0IJ+tEwc6d2+ruPois
X3TkSDyzMB0+nFK7jiu+x9QsLTn5mqysbEZGBr3ZIrKq5DvPt7t59/yy/Ea9
hlomWmJssH/JqJGMPMwiSMpJxv8WT3WLbmDLeZczynNU27ZtdXTVduxYBAN1
Op2GJjr28uWR4GAPVVVZCwt95hedtm+PlZSUxc8FNlPbuvUECNOFCxfozRPR
VKWEhAR1DfVjrzk/9G9AC88ID00LZTFBvzEktK0/sR78L88Qz6V7lvKIxGiO
tufKnpGTRnbp0qV9+/ZhYT50Og1NZK2qqujw4WDGi05kWfLVq9fKyCgePPiQ
RqO6MaEJbqGhO5WUlB48eEBvhoigKl28eBGEPulyEtUXFk1gK6kpiToSZd3X
Gu6I+f7zDQ0NVq3yo9NpaM3CLl7cNmGCnbR057Fj7Q8fjps+fY6mphGuLt5M
zdd3pZ6efnP8gq2oqdLbt281NDRCd4ZSfUnRBLPCb4VBMUE6ejqGRoYxMTHf
vn0bNsx5zJhhdDoNrXnZq1fpK1a4q6rKWlsbdu9ubmXlgN9jaqY2duwUe/uB
ze4lJpFSpZqaGls7W3cfd6ovJpoAllWaNX3RdHl5efuB9jk5OeRS+vv7W1iY
fftWSKfT0JqjVVUV7du3FIRJXFzcwqJfbu4HGo3qpoYmoBUVfbewsG5237wQ
KVVavmK5uaV5owbdoTWgHbhzYJTbKCkpqYmTJt68eZNxHdPT01VUlF++zKTT
aWjN3bKz13Xo0EFCQmLcOM/UVPwkUzOzY8deq6mp7969m958EB1VKioqgvF2
2sO0xr9QaPW1XRd2Obo6ysrK+i/wLy0tZb6Oz58/V1RUPHFiK51OQ2sZdvz4
FrjW7u4eMjIyDg4uO3ZgbF5zsoSEM3D57ty5Q28miIgqvXv3TlVVdd2hdVRf
QLQ6LCYvpt+AfkpKSitDV37+/JnlOlZXV/fp03vpUm86nYbWkmzhQi9ra6v3
79+vWhWupqZmbm65du1BfN7UXGzRovXduhlXVFTQmwMiokouri7jp3FeSRtN
FKykpmR96nozCzNNTc3o6OivX79yvI7z5vna2fX98QNXWG1pBte0b1/rRYsW
0un0qqqqpKQkY2MTPT394OD4oqLvNBrVDRStLhs0aOjkyVPozQFRUKXExEQd
XZ2C8gKqrxsaBwM9Wr1vtYGRgaGR4a5du3jE8xQVFSkoKODjpJZqz54dlZOT
O3PmDP2/ZGRkWFv3UlNTh6F4QUE5jUZ1Y0Xjbrm5H9TVNZKTk+kiD+Wq9Pjx
Y1lZ2XhaS1vWoGXYxoyN3Uy66Rvogx7x/npLeXm5jo7O7t2r6HQaWku1vXsj
tLW14VrTmSguLh44cBAMSHx8gjBUT5Rtx47TMK549uwZXbShXJVs7WxnLmmW
i2C3bFufuh70CPyjlJQUfr4mNm3a1FGjhtLpNLSWbcOGDfb2nkVn48qVKyNG
jJSRkfHyWojaJLIGV8fObgD75RMpqFWl7du3G3YzLPre/FYcbcEWdSTKtIep
gaHB3r17+fy6ZV5enpKS4tu3+AHZlm+vXx9TVFQsLCykc+L+/fsTJkyUkpJy
d599/Ph7Go3q1oz2v1ZU9N3EpHtU1AaOl09EoFCVSktL5eXlE89x/hQ4WtNb
PC3ewtpCV0939+7d/H9t+evXr9ra2vv3r6HTaWitwZKTw/X0dCsrK+lc+P33
30eNGi0rK+vtvfTEiU80GtUtG43J9u27CZcGxg/cLh/lUKhKI0eNdPMW/tsQ
aA1ohx8cHjlxpLKycmRUZFVVlUDXccmSxYMG2dLpNLTWYwMH9g8OXkHnyc2b
N4cPHyEnJzd79vK8vM80GtWtHO2/NmdOcP/+trwvH4VQpUrZ2dlq6mr5Xxr3
QxVodVpWadY4z3EyMjJLly0tKysT9Do+ePAAyv75J34yqXXZgweH4brfu3eP
Xhc3btxwcXFVVFQMCIjCGHIRMbgQRkbGcXFxdV4+SqBElWA0rm+gv2b/Gqov
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
ffDyCtbR0YU+TgvnYpYrgfPC189Xx0Cn7jUa9oHWFJ0vCosP0zPUAwmUrp7u
0oildXV15PYHA5Vh9+7doE2Wl5cDedP79404jn0JtLQ0gN8rJyc7frx2SUkJ
1cMHPX36tKCgwN3dQ0hISE5O3scnJDe3gc3+AL+SIboQGLhYVVWNnrN8DlTM
ciW848H3VNepRmZG9c31sCsC4vPU/VOXsT/DN9RXTUMNOJSJqcmK+BXHjx8n
8SZDVVWVkdFEFkt85cr5f/1VhePYUAX8uvj4MPBLJ00yAtni4IvscwJOd+rU
qZiYWF3dj9cVJiaWS5as2bPnMvz6hOiN0NA4BQXFBw8eUFcluCnGuRJQa2ur
s4uzobEhypiYRc3TmtRdqdODpisoKvDy8lrbWCcnJ58/f56UWnH06NFp09x4
eHjc3accPboFx7GhBJudN22aIyg0d/dp1E2KdPHixYyMDAcHR0FBQRkZWU/P
oIyMcnSPjuYsXbpWWlr69u3bFNUK7ouJroR3GJOrm6u+kT4awZWhVNyrWJW/
ysXLRVJKUkhIyMnZKTs7+9KlSxxWjEePHq1cGS8lJaWmppKYuJDpg+ndvFm+
atUCVVVlGRmZVatWUjETwc2bN3Nzc6dNcxcXFxcVFXNwcIuNzdm79zr8KoLo
B9HR34PAXblyhfSKAVEMdSW841aeu4e7joHO4ZeHYVcNBEeUXS2LXh9tP9Ve
pEPAodLT00EONegnJqBuVFdXe3pOB8mFsbHhhg0xT55U4zjGFB4/rlq/PtrI
SJ+Pj8/Ly7Ompobch0cPHz7cvn27r6+frKysgIDA5MkOERHpO3f+Dr8qIAbC
smWZwJJAhkti3aCDmOtKeEfj4+XtNV53fO3ftbArCIIcSi6VxObEOnk4SctI
8/PzT7aenJCQcOzYscG9q9vc3FxUVGRnZzt27FgDA934+LDfftuJ4xg9uXCh
GByhvr4OOFp7e7vi4mISx9V8/vx5aWnp7NmzlZVVeHh4TEwsFy5MLCg4g0al
YygREWksFovz2ws0FKNdCe94LBsYFKisqoxesB167L+zP2Fbgru/u6KSImio
TUxNlkcvr6urG0Rb/ebNm7179/r5+YJrS2lpqRkzpm7atOL69b04jsEFHAM4
Em/vqVJSkqCRmTnTb9++fWSZ0YMHD3bs2BEYGKSq+rGriYHBpJCQ6Lw8dlNT
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

    "], {{0, 506}, {562, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{562, 506},
  PlotRange->{{0, 562}, {0, 506}}]], "Input",
 CellChangeTimes->{3.709549695258362*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source Code", "Subsection",
 CellChangeTimes->{{3.698134238989613*^9, 3.698134242903209*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DGNSolver", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGNSolver", "[", "G_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "k", ",", "i", ",", "j", ",", "d", ",", "d12", ",", "eqs", ",", "xi", 
       ",", "xj", ",", "x", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", "j", ",", "d"}], "}"}], "=", 
       RowBox[{"DGGraphGetIJD", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"eqs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"Length", "[", "i", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"Max", "[", 
        RowBox[{"i", ",", "j"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Symbol", "[", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<x\>\"", ",", 
            RowBox[{"ToString", "[", "xi", "]"}], ",", 
            RowBox[{"ToString", "[", "xj", "]"}]}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"xi", ",", "n"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"xj", ",", "3"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"k", "=", "1"}], ",", 
        RowBox[{"k", "\[LessEqual]", 
         RowBox[{"Length", "[", "i", "]"}]}], ",", 
        RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"xi", "=", 
          RowBox[{"x", "[", 
           RowBox[{"[", 
            RowBox[{"i", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"xj", "=", 
          RowBox[{"x", "[", 
           RowBox[{"[", 
            RowBox[{"j", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"eqs", "[", 
           RowBox[{"[", "k", "]"}], "]"}], "=", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"xi", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "-", 
               RowBox[{"xj", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "^", "2"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"xi", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "-", 
               RowBox[{"xj", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "^", "2"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"xi", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "-", 
               RowBox[{"xj", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], ")"}], "^", "2"}]}], "==", 
           RowBox[{
            RowBox[{"d", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "^", "2"}]}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "some", " ", "points"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"d12", "=", 
       RowBox[{"DGEdgeWeight", "[", 
        RowBox[{"G", ",", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"eqs", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"eqs", ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "0"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "0"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "3", "]"}], "]"}], "\[Equal]", "0"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "==", "d12"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "0"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "[", 
             RowBox[{"[", "3", "]"}], "]"}], "\[Equal]", "0"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<eqs=\>\"", ",", 
        RowBox[{"TableForm", "[", "eqs", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"Flatten", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Quiet", "[", 
       RowBox[{"x", "=", 
        RowBox[{"NSolve", "[", 
         RowBox[{"eqs", ",", "x", ",", "Reals"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"ArrayReshape", "[", 
        RowBox[{"x", ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "3"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<x=\>\"", ",", 
        RowBox[{"TableForm", "[", "x", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "convert", " ", "relations", " ", "to", " ", "scalar", " ", "matrix"}],
        " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], ">", "1"}], ",", 
        RowBox[{"x", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", "j", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "n"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "3"}], "}"}]}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "x", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6959807931988735`*^9, 3.6959808651195087`*^9}, {
   3.695981319470448*^9, 3.6959816654278154`*^9}, {3.695981696802899*^9, 
   3.69598193790523*^9}, {3.6959820413830986`*^9, 3.695982084209268*^9}, {
   3.695982167030732*^9, 3.6959821710191383`*^9}, {3.6959822184038534`*^9, 
   3.695982247628214*^9}, {3.695982304465785*^9, 3.6959823353580503`*^9}, {
   3.695982376103098*^9, 3.6959823800191355`*^9}, {3.695982800673107*^9, 
   3.695982828060028*^9}, {3.6959828702427034`*^9, 3.695982871401049*^9}, {
   3.6959829164454274`*^9, 3.6959830004868164`*^9}, {3.6959888042983994`*^9, 
   3.695988828501298*^9}, {3.695988895041767*^9, 3.695988955372898*^9}, {
   3.6959890712644*^9, 3.695989072049646*^9}, {3.695989103696677*^9, 
   3.6959891990099096`*^9}, {3.695989270528079*^9, 3.695989273022993*^9}, {
   3.6959893888410683`*^9, 3.695989444627164*^9}, {3.695989528041983*^9, 
   3.695989547018861*^9}, {3.695989592844425*^9, 3.6959896880344257`*^9}, {
   3.695989726077453*^9, 3.695989755804819*^9}, {3.695989869082122*^9, 
   3.6959899107177277`*^9}, {3.695989946606575*^9, 3.695989951887924*^9}, {
   3.695989995530915*^9, 3.6959901298385134`*^9}, {3.6959901809553523`*^9, 
   3.695990198460229*^9}, {3.6959902513619356`*^9, 3.695990370372473*^9}, {
   3.6959904207088675`*^9, 3.695990423239892*^9}, {3.6959904662502933`*^9, 
   3.6959905066632338`*^9}, {3.6959905389614973`*^9, 3.695990555189827*^9}, {
   3.695990592406352*^9, 3.6959905969143476`*^9}, {3.695990862448014*^9, 
   3.6959908807504*^9}, {3.696000226158333*^9, 3.6960002763225875`*^9}, 
   3.696000556861759*^9, 3.698072480850925*^9, {3.6980831666521983`*^9, 
   3.6980831691908817`*^9}, {3.6980832306786633`*^9, 3.698083358132863*^9}, {
   3.698083461150189*^9, 3.698083470133647*^9}, {3.698083534682835*^9, 
   3.6980835526362424`*^9}, {3.698083691959817*^9, 3.6980837054017324`*^9}, 
   3.6980838454526196`*^9, {3.6980839403088937`*^9, 3.6980839490326786`*^9}, {
   3.6980843544733815`*^9, 3.698084438317992*^9}, {3.6980845362034473`*^9, 
   3.6980845613631344`*^9}, {3.6980846745877323`*^9, 
   3.6980846848488035`*^9}, {3.698084721247966*^9, 3.698084721453601*^9}, {
   3.698084817232126*^9, 3.6980848637684917`*^9}, {3.6981335546141305`*^9, 
   3.698133654313637*^9}, 3.6981337103556285`*^9, {3.698133846774843*^9, 
   3.6981338552489643`*^9}, {3.698133886967635*^9, 3.698133943451098*^9}, {
   3.698135573538377*^9, 3.698135617321416*^9}, {3.7095499902229223`*^9, 
   3.7095499902229223`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples", "Subsection",
 CellChangeTimes->{{3.6981342657108355`*^9, 3.698134272655942*^9}, {
  3.6981343900066195`*^9, 3.6981343928237734`*^9}}],

Cell[CellGroupData[{

Cell["Example: 5 points and 4 constraints", "Subsubsection",
 CellChangeTimes->{{3.6981342903376694`*^9, 3.6981343031896935`*^9}, {
  3.6981344697819333`*^9, 3.698134470007082*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eij", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", 
    RowBox[{"x", ",", "eij"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGPrintGraph", "[", 
   RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGNSolver", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{"x", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"i", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], "}"}]}], 
     "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6959821725045357`*^9, 3.6959822057965155`*^9}, {
   3.695982268679414*^9, 3.6959823441443806`*^9}, {3.695982920850732*^9, 
   3.6959829209352903`*^9}, {3.6959889733898363`*^9, 
   3.6959890309626265`*^9}, {3.6959890820892334`*^9, 
   3.6959890852169228`*^9}, {3.6959894614439697`*^9, 
   3.6959894618659773`*^9}, {3.695990141312871*^9, 3.6959901626141343`*^9}, {
   3.6959902092902546`*^9, 3.695990213653076*^9}, {3.6959906056694627`*^9, 
   3.6959907132884865`*^9}, {3.69599074403419*^9, 3.6959908171476326`*^9}, {
   3.695990848691627*^9, 3.695990848783781*^9}, {3.6959909472498837`*^9, 
   3.695990958030756*^9}, {3.6959909990686064`*^9, 3.6959911014281673`*^9}, {
   3.6959913603925343`*^9, 3.695991378520133*^9}, {3.695991433093545*^9, 
   3.6959914428903313`*^9}, 3.695991528666456*^9, {3.69599293111237*^9, 
   3.6959929457414904`*^9}, {3.6959998819368143`*^9, 
   3.6959998966497583`*^9}, {3.6980724808624325`*^9, 3.698072480872939*^9}, {
   3.698083371004901*^9, 3.6980833815779133`*^9}, {3.6980834763637805`*^9, 
   3.6980835167999725`*^9}, {3.698083560105197*^9, 3.698083627113807*^9}, {
   3.698083718150687*^9, 3.698083729336606*^9}, {3.6980837656231737`*^9, 
   3.6980837817648787`*^9}, {3.6980839882216706`*^9, 3.698083993838396*^9}, {
   3.698084540828515*^9, 3.698084565599944*^9}, {3.6980849011127596`*^9, 
   3.6980849128890715`*^9}, {3.698133031309068*^9, 3.698133037710814*^9}, {
   3.698133273852414*^9, 3.6981332754589806`*^9}, 3.6981338077458096`*^9, {
   3.6981339586967115`*^9, 3.6981339613164473`*^9}, 3.6981341845189857`*^9, 
   3.698134282590531*^9, 3.6981347590256243`*^9, 3.6982328270239544`*^9, 
   3.6982330645126257`*^9, 3.6982342865056777`*^9, 3.700314325047763*^9, 
   3.70954999023855*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: 5 points and 4 constraints (failed)", "Subsubsection",
 CellChangeTimes->{{3.698134374303359*^9, 3.6981343879453526`*^9}, {
  3.6981344825839243`*^9, 3.6981345190736256`*^9}, {3.6981347408180485`*^9, 
  3.6981347432411566`*^9}, {3.6981349406590924`*^9, 3.698134953907379*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.732761", ",", "0.169653", ",", "0.656641"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.246863", ",", "0.660452", ",", "0.742898"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.426759", ",", "0.729058", ",", "0.897434"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.100975", ",", "0.670080", ",", "0.241258"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.204643", ",", "0.236955", ",", "0.655968"}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eij", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", 
    RowBox[{"x", ",", "eij"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGPrintGraph", "[", 
   RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGNSolver", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6959914809267282`*^9, 3.6959914981254253`*^9}, {
   3.695991562961543*^9, 3.6959916431277523`*^9}, {3.6959920787623296`*^9, 
   3.695992087048052*^9}, {3.696946214015137*^9, 3.69694621608445*^9}, {
   3.6980724808839464`*^9, 3.698072480897456*^9}, {3.698084028617964*^9, 
   3.698084105895296*^9}, {3.6980858921917467`*^9, 3.6980858944297314`*^9}, {
   3.698085934280164*^9, 3.6980859343897343`*^9}, {3.6980859899040556`*^9, 
   3.698086052129326*^9}, {3.6981330460023603`*^9, 3.698133057702621*^9}, 
   3.6981330886126213`*^9, {3.6981331326739793`*^9, 3.6981331488507085`*^9}, {
   3.698133253865158*^9, 3.698133296529955*^9}, {3.698133447048286*^9, 
   3.6981334486803684`*^9}, {3.698133997471426*^9, 3.698133999296138*^9}, {
   3.6981342041044755`*^9, 3.698134209840279*^9}, {3.6981343631304502`*^9, 
   3.6981343650707364`*^9}, {3.698134496173938*^9, 3.6981345005568447`*^9}, {
   3.6981345313367596`*^9, 3.6981345910158415`*^9}, 3.6981346249008155`*^9, 
   3.698134701853427*^9, {3.6981348637946124`*^9, 3.6981349007781425`*^9}, 
   3.698232827103007*^9, 3.698233064531138*^9, 3.6982342865161858`*^9, 
   3.7003143251011763`*^9, 3.70954999023855*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: 5 points and all constraints", "Subsubsection",
 CellChangeTimes->{{3.6981347628831825`*^9, 3.698134786324731*^9}, 
   3.698134823515397*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGPrintGraph", "[", 
   RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGNSolver", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{"x", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"i", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], "}"}]}], 
     "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6981348054584217`*^9, 3.698134807957579*^9}, 
   3.698232827128024*^9, 3.69823306454965*^9, 3.6982342865201874`*^9, 
   3.7003143251480494`*^9, 3.709549990254173*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: 5 points and all constraints (failed)", "Subsubsection",
 CellChangeTimes->{{3.6981343377716303`*^9, 3.6981343538603*^9}, {
  3.6981344661054945`*^9, 3.698134480170825*^9}, {3.698134734934148*^9, 
  3.6981347357797074`*^9}, {3.6981350119238586`*^9, 3.6981350132437344`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.732761", ",", "0.169653", ",", "0.656641"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.246863", ",", "0.660452", ",", "0.742898"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.426759", ",", "0.729058", ",", "0.897434"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.100975", ",", "0.670080", ",", "0.241258"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.204643", ",", "0.236955", ",", "0.655968"}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGPrintGraph", "[", 
   RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGNSolver", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.698134194580659*^9, 3.6981342001503525`*^9}, {
   3.698134310771722*^9, 3.698134331373887*^9}, {3.6981350004322367`*^9, 
   3.6981350190771027`*^9}, 3.698232827151539*^9, 3.6982330645676622`*^9, 
   3.698234286524191*^9, 3.7003143251858363`*^9, 3.709549990254173*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["DGOptSolver - Optimization", "Section",
 CellChangeTimes->{{3.6981358277685385`*^9, 3.698135859657689*^9}}],

Cell[CellGroupData[{

Cell["Main concepts", "Subsection",
 CellChangeTimes->{{3.698134238989613*^9, 3.698134242903209*^9}, 
   3.7094665937853384`*^9}],

Cell[CellGroupData[{

Cell["Formulation", "Subsubsection",
 CellChangeTimes->{{3.709465577499*^9, 3.70946560433134*^9}, {
  3.7094666034257517`*^9, 3.7094666078966484`*^9}, {3.7094667051407757`*^9, 
  3.7094667208634553`*^9}, {3.709469242957382*^9, 3.7094692452832413`*^9}},
 FontFamily->"Times New Roman",
 FontSize->18],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   UnderscriptBox["min", 
    StyleBox["x",
     FontSlant->"Italic"]], "  ", 
   StyleBox["f",
    FontSlant->"Italic"], 
   StyleBox[
    RowBox[{"(", "x", ")"}],
    FontSlant->"Italic"]}], "\[Congruent]", 
  RowBox[{
   UnderscriptBox["\[Sum]", 
    RowBox[{
     RowBox[{"(", 
      StyleBox[
       RowBox[{"i", ",", "j"}],
       FontSlant->"Italic"], ")"}], "\[Element]", 
     StyleBox["E",
      FontSlant->"Italic"]}]], 
   RowBox[{"max", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox[
         SubscriptBox["l", "ij"],
         FontSlant->"Italic"], "-"}], "||", 
       StyleBox[
        RowBox[{
         SubscriptBox["x", "i"], "-", 
         SubscriptBox["x", "j"]}],
        FontSlant->"Italic"], "||"}], ",", 
      RowBox[{"||", 
       StyleBox[
        RowBox[{
         SubscriptBox["x", "i"], "-", 
         SubscriptBox["x", "j"]}],
        FontSlant->"Italic"], "||", 
       RowBox[{"-", 
        StyleBox[
         SubscriptBox["u", "ij"],
         FontSlant->"Italic"]}]}], ",", "0"}], 
     ")"}]}]}]}], "\[IndentingNewLine]", 
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQdYFNm2tglmx6wzzjg6psEwY8KsKCIqF0VHkhgBEcEIqCAmFBAQBQzn
GEEFA5gTiiKgYEAUzAFEooJKDpKT/N+h7t+HC4pQNF0d1vvMM490V+9aFfZe
767atauHgamGkYyUlNSaZvifxkJLpdWrF67XbIs/tE3WLDU2WWyoamK+2Hjx
6lEGsvgwXFpKKgbL/+ff5QRBEARBEEKDFEEQBEEQBHdUNxNOjIggCIIgCAmH
tIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGB
tIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGB
Ey3Jz88/deqUlpbW4MGDe/XqNXz48K1btyYnJ/MWePLkyZo1awIDA+uzlg8f
Ppw8efLAgQM5OTn1jZggCIIgiIZHwFpSVlb25s2bhQsXGhgYHDt27N69e+7u
7urq6v3797e0tMS3eXl527dvNzY2hlF8+vSpPusqLCwMCQnZsGGDkZHRnTt3
+LUJBEEQBEE0EILUkoKCgocPH6qpqSkrK589exbWUVJScuXKlXHjxjVq1Ehe
Xv7p06erV6/W09M7c+ZMQkICvq3nGjMzMwMDA9etWzdt2jQvL6/6F0gQBEEQ
RMMhMC3Jz8+Hk2hra7dr187d3R3CwHx++fLlsWPHtmjRYtCgQYsWLVJUVLxw
4UJ2djYf1xsaGrp48eIxY8YcOXIE6/369Su/CicIgiAIgo8IRktKS0sjIiKW
Ll3arFkzDQ2Nym6Az3ft2qWurj548OAePXrs27evqKiIv2svLCwMCwtTUFAY
OHDgiRMn0tPT61lgQUFBXl5eWVkZX8IjCIIgCIJBMFqSnJy8f//+9u3bt23b
9tatW1VupsTExFhbW3ft2lVbWxvpnu9rL68wk/Pnz3fq1GnkyJHXrl378uVL
fUqLi4t78eJFWloav8IjCIIgCKJcIFoCCfHz81NUVGzSpMmQIUNKS0srfwtD
OHLkSK9evfr06RMUFMTfVVemrKwM2tOyZUsdHZ2QkJD6jDPx9fXduXPn3bt3
+RgeQRAEQRAC0JLPnz9bW1vLysq2b9/e0tKy8ldQBRiLqqpqmzZtYAsNPerj
/v373bp1gx0hnoSEBHaFIMhdu3ZNnDjRxcWFv+ERBEEQhIQjAC05c+aMvLw8
iv3jjz+qPKibnJxsZmbWqFGjvn37Hj9+nL/r/SZQoJYtW8rJyWF17CyosLAQ
MTdu3Hju3Ll8D48gCIIgJJmG1pKIiAh9fX1paekmTZqMGzeuyq2TI0eODB48
GGvEV/Hx8Xxc7/fYt29fjx49EI+uru7Lly9ZlPDkyRMNDQ3ErKKiwvqSC0EQ
BEEQ1WlQLcnPz7ezs+vWrRvK/O2339avX1/5248fP+rp6TVr1qx169b4h2Am
FQkNDWVE6M8///z3v//NooQTJ04MGzYMYjN06NDLly/zPUKCIAiCkFj4riVf
v35NSEi4c+fOhQsXzMzM+vXr17hxY5TZq1cvJyenxxUUFxdjyXPnzo0YMQJf
9e7de8eOHTWXCcOJjo4OCAhwc3PbsmVLcHBw9Snli4qKUObmzZsdHBywlm8+
aJydnT1x4kRZWdmmTZsaGBhAjeq6gWvXru3UqRO0pGvXrps2barrzwmCIAiC
+B581xIox549e5D6hw0b1rlz5yZNmkhV0KpVq6FDh06aNElHRycvLw+mAWn5
5Zdf8BXk5OzZs98rMC0t7dq1ayYmJrNmzRo7duzff//drVs3DQ2Ne/fu8WYO
KS0t/fz58/r164cPH45ve/bsaWFh8fr16+qlYb16enpt2rTBesePH+/j41On
rUtJSdHW1m7UqBF+3qJFCzU1Nb7PskIQBEEQEgvftQSGcPPmTScnJ0dHx0WL
FvXo0QMFQgMgKvhk+/btBw4cQCpPTExUUVFhLqTAVYKDg79XYHZ29qNHjw4d
OrRr164lS5agKBkZGUiOra0tM7QDa3z//v3mzZt79erVrFkzaWlplAmHefDg
wTcL3LBhw++//84MwUUhddq6O3fujBs3jlkF/j9o0KC3b9/WqQSCIAiCIL5H
g44t8fLyGjZsGArs06cPpKLyV1AXZowH0NDQiIuL+2FpZWVl0dHRc+fOhZPg
V6qqqgEBAfgccrJnzx5lZWVzc/NVq1ZhAW1tbWgMXOWb5ezevRvxoITmzZvP
mTOnThO4YSvwW56W9OzZUzAPEBEEQRCEJNCgWmJlZdW1a1cUqKCg4OvrW/kr
iARyOpPc9fX1a+8GISEhvXv3lpGR+eOPP+AeaWlp586dmz59OgosKioqKSmJ
j49/9+5dDW/VOXXqFPPAMlBSUoqKiqrlqktLS/X09Nq1a8fTkk6dOhkZGdXy
5wRBEARB1EzDaQkkYdasWc2bN0f61tTUrHI9ZOXKlT///DPW1bhx42XLltW+
2K9fv06aNAnFysrKrlq16tKlSyYmJtbW1rV/kCcgIACaxGjJ0KFDq/hSDSQn
J48ePZpxEgYEP3DgwIKCgtrHTxAEQRDE92g4LYmKimKyPxRixYoVVeacnzFj
xk8//YRvW7ZsCbuoU8kWFhadO3fGb8eMGaOhoaGvr5+RkVH7nz969GjixImM
V/Tv3//o0aO1/OG1a9f69u0r9X+BXL169apO8RMEQRAE8U0aTkvOnDnz119/
MTOE7N69u8q3ioqKTZs2xbft2rVbt25dXUvm6cGECRP8/f3r9PPnz59PnjyZ
+XmPHj0cHR1r+UNmrKyMjExlLUH8e/bsaehp8wmCIAhCEmg4LTE3N//111+Z
B21u3LhR5Vt5eXlZWVl8+8svv2zZsqVOJcfHx48ZM4Z5RHf16tW8x4RrSURE
hKqqKiMVXbt23bx5cy1/OGrUKEaleEhLSyMGFRUV0hKinty6dWv06NH9+vU7
ePBgXacWRBX48uVLdnZ2YWFhA4VHVKG4uJjZ58wsTARB8IsG0hKk6SlTpjRv
3hylLVy4sMqwUrSizIUUdlqCRltHRwc+ACvQ09NLT0+v089jY2PV1NSYtXfp
0qXK3LPfA5vQrVu3ygNLGGRkZFq3bs3MxFKnMAjxoKioKDQ01KsCX1/f5OTk
by6Wn58POWcWCw4OrjIkOyEhYerUqb1793Z2dk5JSalrDO/evdPS0oKri/pz
YQUFBcwuSkxMFMy0z6wJDAzU1tZWVFS8fv0617EQhFjRQFqC1A/xQMpu2rSp
lZUV2uTK3yKDDxw4kEnxHTp02LhxY50Kx8+hOsyUaKqqqkgKdY2NpyW1n7rE
3d29U6dOUt8CG3Lv3j3qqEomEAyc4b0rGDRo0LVr177Zffb391dWVmYWW7Vq
VUxMDO8r5F8TE5NevXrBz6Ojo+t69Q+8efNm3LhxOJn3799fr43hmrS0NGYX
3bp1q05P7gseSOb48eP//PPP8+fPcx0LQYgVDaQlqKrMo8E9e/Z0dXWtfiVh
1KhRzFyprVu3trCwqFPhISEhSkpKzZo1Yx6lOXnyZJ1+/vbtW95NHOQCFxeX
2vxqwYIFzHwp1ZGVlbWzs6vhkWRCjMnIyFiyZIlUxWNZOKU3b978zQlzoCLQ
WpwqcPU5c+ZEREQwn6NqwHj79Oljbm7+8uVLdncEEhMTbWxsVq5c6efnV6+N
4Zrk5GSmTnl7e1d/u4RQ8fz5c+xzHNZHjx5xHQtBiBUNpCVr167t0KEDipoy
ZcrNmzerL6CmptayZUtmfIipqWntSy4sLDQzM4MkwCjqOjiE4dmzZ7whr/36
9Tt8+HDNyyNxFBUVYXXMnLTSFVS5jwNN+t7Ve0K84WnJwIEDf/rpJxUVFfT0
qyyTnp4Of4ai//LLL02bNq2iJefOnXNwcICTsH7SPD8/Pzw8HCe2qJ+EIqQl
mZmZ2OeQk7reRCYIomYaQkvQ0iJNMwNL0IOLjIysvoyRkVHHjh2xADqYxsbG
VR4froGAgIDZs2efOXNGXV0dv4XbzJ8/v04vpnnw4AHCY1o/eXn5a9eu1bx8
SUkJ2h/m5T4QEkgIVorg27VrxzMT/PvNmzdCfjecaAh4WjJv3rwBAwb06NFj
//79le9aojrgHIOla2pqQk5w8lTRkqioKBjFp0+feKdxcXFxampqdHQ0oxlI
fE+ePLl9+3ZgYCDspfrj8PhhQkJCXFxcVlYWr1gU8u7du9jYWHwL4UFp9+/f
RyFhYWFJSUm83yL7v379OigoCF8hyX7vWXvU0LS0NCyAGPz8/FBUfHz8N6/t
YNUpKSkI+M6dO6itKPnx48eIrTY3ZeqkJVgRomWC9/f3v3v37tu3b2uog2Vl
ZdgbqP6IChv76NEj/FklKmwmDgQ28969e1gMG4tDg2NRvTT8EPscO6FKnOg3
vX//HjsZUaEERIVd8fnz59o3cQQh4fBdS9BWoPn67bffkL5hJnv27Plm8+Lo
6PjHH38wTRC8gtec/rBkfX39gwcPoumwsLBgJlyFY1S+bI5lah7mcfPmTeZB
HqmK54t5CeJ7oP05dOgQFIhxkr59+yK5jBw5UlFRkZnEntGV8+fP030cCYSn
JcuXL4dsd+/efdmyZZXHeCMb4qRt3br13r17p0+fXl1LkFI3bNhw9uxZ3rUO
5MGrV69u3Ljx3LlzSLX79u3T09ObMmXK//zP/2AVHh4eVSYnhGZgGXt7e957
oLBSuIG5ubmNjQ2E2cfHZ926dTNnzkQh0Kddu3bBtLEYKs7JkycR8NSpU1VU
VAwNDd3d3ZlXTVUmNzcXuRXxL1q0CDGgxqEoKyurGzduYC2VB8PAf7Cki4sL
AlZTU1NWVkbJqOCbNm2qzdDQ2msJXAuG5urqunTpUqxi4sSJM2bMMDMzu3Ll
ChygipxACVAydsL69eu1tLQmTZqEjUXvBn9iRbxqC5nEbndwcMB+QGlYTFVV
deHChWjEoBlV7kTjuMA/0Y69ePGC9yEaH19fX2tra+xk/Babj3J0dXWxGLSQ
ntkhiNrAdy1BC4A+AjNVGjL45cuXv7kY+o8DBw5kmiA0cbWZAR6NxokTJ9Cw
o4+DlhBtQv/+/fHzwYMH8654oP28ePHix48fa3gu5vjx44MGDWIu1GhoaOAn
Na83MzNTR0cHC8vKyiLpODs7r127Fo0z2nk078xb/6Arq1ev/vDhww+3ghAz
KmuJl5fXuHHjFBQUeMMgcaJigV9//bVbt27onsNPqmgJFti6dSvqCzI+owrl
FY99wbqxpLa29ooVK+Tk5Pr16zdgwIBevXq1adMG/7ezs6vcza8+5BV5+d27
d4iqU6dO8AdkWCj033//jSr5888/t23b1tjYGOnb1tYWdQEf4isUi8979OgB
qaicQPHvO3fuIOaOHTuiu4FqO2TIEJTWokULhARH4j06xFxXRN5v0qQJSkPJ
8vLyTPldu3aFBvxwZ9ZSS1C7nz9/DmFAPL/88stff/2FkLCL0E/p3LkzDA3d
lsqvF0eDgD2DqooFsDPRYiAqLI+o0J7wpkOEpKEofIitw2ZiMbQwXbp0gVLC
fFC7K1/xqD7kFWs8ffr0iBEjsKN69+6Nn2PzUQ5Kwz7HV7XpfBEEwXctQS8G
bR0zHnXWrFnfe0wGLcCECROYqcnQZt6/f7/KAmh54CFfvnxB/4sZ3YG2F41G
YGAgc4UczQJ+yAwvQfekvKJV9PPzQ9cPS9YQIXouzLgUNGjoTta8OVg12jQs
KS0t3aFDh3//+99ozP/1r39BS/BvNMhow9GYo7SRI0ei+1aHPUWIBZW1BCag
p6cHCdm8eTNzRwbnKjIsvoWQxMfHwz1qryXQYKRdnN47d+4MCQlB9/zSpUvq
6uqoXMjCDx8+5MVQg5ZAHpATsXZkz9evX9+7d2/NmjVYXdOmTVFrkHNh17dv
30Y86EHAgvA5cnHlqzHoBSBglINU7uTkFBMTk5aWBlFB7cO2YOELFy4wGgOp
QKVApUb9wofI46i/qD7BwcG7d+/GVvxwZ9ZSS1DsggUL2rdvj4wP6YJXoCai
qcFmYufAPc6dO8f7OQ7QsWPHEGrz5s1xdNBpQkiJiYlYfu/evQ4ODryXgOMA
MZeS7t69iz0At3n69CnChsCg+m/YsKHy5dDqWoI1KioqYkUQM3SU0FDAQ1Am
9hU6MkFBQT/sAREEUd4AWoJ2WEVFhRkdiiqP6v+9JdFfY4ZnIKGjEatezsmT
J9HmoIGCmURGRqLDsmrVKt799+joaLRC+DkaUmVlZTSMaF7QN0FzXfNNHN7r
eEaNGoXm64ebg/aEubTi6uqKBhkf8rSkvOL6zMGDB9EUY5PRvNMdZEmjspZA
tiEGf//9N/I70wfHCYNMh29xhiOZ1klLmLMO6a/y0CkfHx/kPnT88SvehzVo
CeAFw8Bc0GC+gplUniYF60IfH1rl7u7O+9DZ2RnJV05ODqd95YuQSUlJw4cP
x2m/YsUKJrPj/wYGBsj+SOXsbljUUktgAhAStB6IrfIwHtQ+5hk9TU3Nx48f
Mx+iyzN69GjmdeEsqmdeXh46O1BE9E3gM7zPq2sJ1giBwdGv3poRBFF7+Ksl
zPAPNLzoXCD1+/v713Az5fTp08OGDZOqeIh427ZtVb718vLCtyinTZs2qOxQ
iBkzZlRu69Ce41fM7CVY44gRI9Cc+vr61jyyDr9SU1Nr0qQJSkaHCz2amrcI
C2zZsgXLo6PKK7myljBbjR4W+m5oJNHDqrlAQsyooiVI+tCA/v37oyeOJIg/
cXL26tWLOdPqpCU46wYNGlR9SIOJiQlONjg578OateT69euVczd0wsXFRari
ZVWIqnL5L168WLhwYceOHZnLj0x46urqcA9DQ8PKc60w4ITv3r07r1uBngKc
H90E7BB20/jUUksQTIcOHXR0dEJCQqp8hRYA/oD9gwpbXiEVR48eRa+hc+fO
rO+xolKjCUJUwcHBvO2qriU4pnAStEJubm40jIQgWMNfLUHrh54F8/zs/Pnz
ec3sN0ETBDFAi9eqVavKbSzD1atXmYGpaFLQzqC1jI+Pr7IMmiDmUV90KtE8
njt37oezrb5+/RpdPETYu3fvPXv2/LD3hASB1u/w4cOVS66iJeUVV5Xx5/r1
6yuPfyMkgSpagnwEj+3SpQtOafyJUwUn8Nq1a5nr/3XSkhYtWmhoaFRZXUJC
gpWVVevWrSE/vA9r0BK4x9OnTytXivT0dHd3d0TVp0+fKqMdIiMjV61a1bZt
W95LvbE6RUVFLLxhw4bqzy9DHgYMGNC1a9eDBw/iT5SG3gRTo6dPnw75uXv3
LlZX+wmQa6klCKlZs2bm5uYQoSpfffz4EfEg4EOHDqHOQkVwOLDw2LFja3Op
hLnptnHjRjRfqqqq4yqAdzGD5dAo8aKqriXYP1A4dJTQFs2dO9fV1fXJkyf0
enGCqCv81ZK0tDQbGxvmyZQTJ05kZmbWsDBaCbRm6F+gDVFWVq7Sl0FrdvLk
yaVLl6K1R38H7U/1VgXlX7lyBUnBzMwMioJW8YcNIAQDXVeEh2bn+fPnNS+M
lIHu5KlTp6pMTVBdS0BKSgoatOruRIg3VbQEn1y8eBEJC+kMiQnniaysbGho
KNN9rpOWILnjwyqrQ88dVQxaUtlYah7yChWvXAJqDWoWKh2yLXS68lfMepFY
Fy9ezCt59OjRiNnR0bF65cJ2DRs2rF27drt27SqvqNGoxdgc9CMQPPTgr7/+
UlJSWrly5bVr12ozD0kttWTQoEHoidjb21d+0pkB+1lOTg5bBylCtYVorV69
GsHMnDnzh2tHaYaGhhAtWCUKwf5B8MwDNe3bt+fdiWMWrq4l2D/37t1Dw/Lr
r79C7SAniHPKlCmQUpo9gCBqD3+1BH0rVEOU0L9/fyT9H3ZP0HKiSUdfBsuf
OXOmyrepqakRFTAjOr4JM6kRGp9a9koMDAzQwqAxgRH9cAQa2pnCwsLq7yj5
ppYwAVeZZp8Qe6prSUxMDP6N1DZhwoTOnTsjN+FMY3J6XbXE2Ni4yurqqiUI
oMoIcEZLIEtjx479npYgOzOfIKQxY8Y0b97cwcGh+raHhIQMHTqUpyXlFVaA
nYDOApZfsGABMnvnChQUFJycnH5Y42qpJYMHD4aWYL9VvwmLAJh+x86dO3Fo
sBNqryXwHBjF8OHDt2zZAgPx9/e/c+dOcHDw1atXmakAKk8C8M3J51H9nz17
5uXlZWVlpa2tjUOPnfPbb7+hVURRQj6dPkEICXzUEkjIixcv0FFCCWg5vzkH
URXQhqD6o8li7pU39Gtl4uLihgwZgibdxMSk5qd1auZ7WkJIINW1BKfxgQMH
IAnIhkjxld8FKXJagtUpKipi4Y0bN1Y3f+TrAQMGdOvW7dChQ1W+SkpKevz4
MfwExjJt2rSOHTsiwrt379a8M2upJcxsjQi1+nAXBIx4ELCrqyskAR0lW1vb
pk2bjho16ocvG8K2NG7c2M7OLjY2tnKXirkxVBstYcCO+vDhw4MHD86dOwfV
GT16NDQJh5ImECCI2sBHLWHuLKNB6Nmz58uXL2s58yqqvLOzc48ePfr37//D
VqueoAOF5lFZWRn9oDpNDFsF0hKCR3UtATiT582bh5yFlFR5WKbIaQkyLHr9
cICFCxeiwCrBODg4wAGwjcz40m+Sl5fn4eExdOjQXr16oeLUtCtrrSVGRkbM
rLnVJxbAD9EzwlZfvHgR+xaFHD16FLsXXlFzT+Tr16/NmjWDP1R59AmSCcGA
2NReSyqXidMDBwW/7dOnT5W7aQRBfBM+aglaLTStLVq0sLKyqtNAL9RWU1NT
mImurm6dBsjVHjRQSBny8vLoEJ04caKGu0K1gbSE4PFNLUlJSbl586aLi4ub
m1vla4AipyXlFe6BjsawYcMOHz5cWRVQ/pQpU7AwJIEZ6Z2fn489UOUyKTP3
/sSJE1EIOiA170yelkAqsGOLvgUWQ/zI8r179969ezevLjMT28IGsYenT5/O
zJiEtUMRR4wYgT1sbm6O8qvMSYvOFHOAsCS2RUZG5vjx47yRwNiNkZGR+CET
Vc1agoA/fPiAXVS5BcM+8fX1xW/RvlV+TJsgiO/BQktyK4iNjf38+TOvW4Gq
jXqKtgItQFJSUp3UAg0FmrW5c+f+9ttvaHB++DRNXUH5aCrRmDMzU1UfJldX
SEsIHt/Uku8hiloSFhampaXVrl07SMjly5eRpmNiYl6+fGlmZta+fftevXox
dba84ibprl27Dh069PTpU2wgFouOjn7+/PmGDRu6d++OluGH75/iaYmtra23
t7fft0BTg5Zn1qxZiFNJScnd3R3rworQhuzbt4+ZPs7V1ZU3JOzjx4+o9Z06
dcL+xAJPnjyJqgC7BaVhLby5lZSVlZs1a4aNxYfYeyjz0aNHzLVc5kmcmrUk
ODjYycnpwoULWAWzl1AIPoS2wXZQLNrMmjefIIhyVlpyswL0SpibsOUVTSta
BjRo0JLvzTZfM8y01erq6ighJCSEj2bCzP596dIlOA/auu+9iaxOkJYQPHBG
QUgaN25sYmLyw8EDyFBt27adP38+b2ZRnJ8ODg7I7zAQnqsgIa5btw4f8h7U
5YGMjHrXoUMH5GXeh6g7SNC9e/dmHtQtr6hQyLyICipe5Tl9aImXlxfyr6Ki
YhUtYdbbsWNHiFblz0+fPj1hwgS40K+//jp58mSsesCAARCAX375Zfv27byt
hqtAluBdECQsj8U0NTUHDRqEaKEla9as+eGAcGhJ4x8BMSstLb1169bUqVOZ
kKAHSPqjR49mpng1NTWt8kAcIly5ciX2Z9OmTRH5PxWMHDny999/V1VV5V3E
OHfuXM+ePbEM9iQKR/BQKWzLtGnTYH1YdeUncXx9faExzCS3zCfMSBsc3759
+0LhsPnTp0/HAs2bN+/WrRsUiGZ5JYjawEJLfq8A/o8eBPykvKJlRqaWl5dH
Z4R1JPAQ9ETQZ+zXr9/9+/f59bx/VlbW2bNn5eTkmOmt+FImaQnBAyctvGLo
0KFI0D+cnQ9irKCgsGHDBt7s7tCSw4cPI+vhK15vOiEhYc+ePfjQ3t6+Sgmp
qalubm5IxOgF8D7EDw0NDdXU1HCqM5/gVH///j2iQn6sMi4UifX69evDhw83
MDCo8mwI0jfWC12pPIVseUXdfPz4MdI97IK5moHcDT9BIq4880lKSgqER0dH
hxl0ykw69PPPPyMwT0/P2jwgnJ6ePvRHYA8wN2KgW5s2bYIDMOuCNgwZMsTD
w+ObK4IRnTlzZuzYsbApZmIl+APcCU1W5a4KdiBko02bNlgGkoM2zcXFBYdj
8eLFWDVciKcWwcHB+BA9qYCAAOYTHFOcCfh5586dGzVqxIQELYQyPX/+nB4Q
JohawkJLBlaApgAdELQMDx48QEcPvSQfH5/6x4MGEC0bmosDBw7Uc8ZUFIXu
m6WlJZoO3kzUfIG0hKhC7S/ufa2gNj+voczqhXyv2O8VUvNX3/sctoOkD/1A
kq25ZCwAx4AMQCHqdOXz64+osjDKh1ylpaUxL8/6YeHFxcXwEGzF9zaBeQMX
5K3yNdva717mQ2x4ZmYmE1JDDJYjCDGGhZY8rmDevHnoeqiqqpqYmJw7dw5d
M35d30BrgN4fej31HCGWnJyM3s2VK1fwj/o8d1Md0hJCYmFMoDZL1lVIWMOE
VPt1/XDhbypQg4ZEEAQPFlpSWAEz7A1ER0ej91HLlqqWoFOGHlk9Zx9Ctygr
Kwt9Fr43DqQlBEEQBNEQ8HeWVwmBtIQgCIIgGgLSEhaQlhAEQRBEQ0BawgLS
EoIgCIJoCEhLWEBaQhAEQRANAWkJC0hLCIIgCKIhIC1hAWkJQRAEQTQEpCUs
IC0hCIIgiIaAtIQFpCUEQRAE0RCQlrCAtIQgCIIgGgLSEhaQlhAEQRBEQ0Ba
wgLSEoIgCIJoCEhLWEBaQhAEQRANAWkJC0hLCEIY+PjxY1xcHH/fD04QBLeQ
lrCAtIQgAHwAYvDlyxeuArh3756Xl1dkZCRXARAEwXdIS1hAWkIQICUl5fjx
4y9evOAqgNDQUEdHRzc3t69fv3IVA0EQ/IW0hAWkJQQnfK2A6yj+S2xs7MqV
K319fbkKIC8vz9XVdcmSJbm5uVzFQBAEfyEtYQFpCSF4ICQ5OTlClX/j4uKg
JTdu3OAwBn9/f0tLy4CAAA5jIAiCj5CWsIC0hBA8oaGh8+fPt7OzKykp4TqW
/yU+Pn7FihXcaklKSsqxY8eMjY05jIEgCD5CWsIC0hJCwCQmJs6bN2/lypXP
nj3jOpb/8v79e861pKys7NatW7Nnz3737h2HYRAEwS9IS1hAWkIIkvz8/FWr
VhkYGEAACgoKuA7nv3z48GH58uXXr1/nNoyoqKjtFXAbBkEQfIG0hAWkJYTA
+Pr1K843dXX106dPZ2RkcB3O/0FItCQ3NzcgIEBVVTUnJ4fbSAiCqD+kJSwg
LSEEQ1lZ2Y0bN6ZMmbJ3797ExESuw6kKQlq2bJmPjw+3YcDc3r17p6uri30l
VE8qEQTBAtISFjS0lhQXF2dlZWVnZzdQ+YRIUFJSEh0dPWPGjDVr1sTGxkJR
uI6oKh8/fhQGLQEZGRmenp56enrCMx6YIAh2kJawoKG1JCEh4eLFi35+fg1U
PiH8lJaW4jSwsrKaMmVKeHg4TJXriL4BtGTp0qXCoCXYXTExMaNGjXr//j3+
zXU4BEGwh7SEBQ2tJaGhoej36evrUwMrmXz9+jUlJcXd3X3QoEFBQUFC+86X
T58+QUuuXbvGdSD/4cuXL6ampm5ubhxOhk8QRP0hLWFBQ2sJOqEuLi59+vRJ
Tk5uoFUQwkxubq6Pj8+4ceOEfPzS58+fhUdLiouLHz16hIqZkJBAI0wIQnQh
LWFBQ2tJaWnpnTt3evfu7enp2UCrIIQWpFQcfS0tLWNjYyEcT1KZpKSkJUuW
XL16letA/svw4cPv3r2bn5/PdSAEQbCEtIQFAngSJyoqSk9PT0VFpeFWQQgn
Dx48WLRokY6OjvDfjBBCLXFzc7OwsIiJieE6EIIgWEJawgIBaElWVpaXl1eL
Fi1iY2NphInkAB01NzeHk7x8+VL470QkJycbGxsLlZakp6crKSndu3ePHskh
CBGFtIQFAtASqMi7d+/69u27c+dOoXo7G9FwZGRk2NjY6OrqXrlypbCwkOtw
fkxKSgq0xNvbm+tA/ktZWdnatWsPHTr0/v17rmMhCIINpCUsEMx0akhS6DiP
HDkSfVLh7zgT9QQegjNKX1//8OHDwjab6/dITU0VNi0pr7gLtnTp0jt37nAd
CMExaDYTEhJevnwpEpJP8CAtYYFgtARVKSQkpG3btv7+/nl5eQ26LoJb0H5e
uHBhzpw5zs7OItTNh5YYGRkJm5bk5ORAS06cOCEqdkc0EJmZmUeOHLGyssI/
uI6FqAOkJSwQjJYgVeXm5srLy1taWgrhxOMEH3n8+PG8efM2bNjw4sULEboy
lpaWBi25cuUK14FUBclo27ZtoaGhXAdCcMnLly+XLVumq6tL3TrRgrSEBQJ7
J05ZWZmdnd3IkSPRwNIQPnHl8+fPaDwNDAxCQkJE6yinp6cvXrxYCLUkOjra
wsLixIkTQjsTHSEALl26tGDBgq1bt3IdCFE3SEtYIDAtQcf51atX3bt3P3r0
KHqmDb06QsDg+Obn5+N0UlRUDAgIELk+XUZGhnBqCXYsfH7Hjh1xcXFcx0Jw
A/p0O3fu1NHRuXDhAtexEHWDtIQFAn6D8MyZMw0NDV+8eCGY1RECo6CgIDg4
uGfPnqdPn87KyuI6nDqTmZmJM/Py5ctcB/INAgMD0U0+f/68CN0UI/hITk6O
iYnJnDlz3rx5w3UsRN0gLWGBgLXEw8Nj6NCh3t7eQj7nJ1EnmGfAhw0btmXL
FjShXIfDBqiU0GoJlM/W1nbz5s30FIZk8uTJk1mzZq1atYpu5IkcpCUsELCW
ZGdnjxkzZsOGDdHR0YJZIyEAIiIitLW1VVVVRXe6PJyZixYtunTpEteBfJuL
Fy/a2Njcvn2b60AIDjh8+LCOjs7Bgwe5DoSoM6QlLBCwlnz9+nXTpk3q6urC
9iQmwZp3796tX79+3LhxsbGxXMfCni9fvgizliQmJu7cuRM+z3UgBAeYmprq
6uoGBgZyHQhRZ0hLWCBgLQFhYWFTpkyxtbVNTU0V2EqJBuLTp0979uxRUVHx
8/MTrUdvqgAtMTAwEFotwb49ffo00hNdZpQ0EhISZsyYYWFhQVMriCKkJSwQ
vJbk5uYuX75cT0/v1q1bAlsp0RDk5OR4eHjMmTNn//79IjqkhAfih5ZcvHiR
60C+y9OnTx0dHelKvqRx9epVVVXVffv20cASUYS0hAWC1xJw5swZdXV1tLH0
0nbRpbS01Nvb29jY2NraWgz6cbBlIdeSrKwsVJxFixYJ/+uYCT6yZcsWmP+1
a9e4DoRgA2kJCzjRkvfv3xsZGenr69OTwqLLo0ePVq5caW5u/vz5c65j4QN5
eXkLFy4UZi35+vVrSEjI0qVLaYyB5ICOG3pwq1evfvnyJdexEGwgLWEBJ1qC
Bnb//v0aGhr4Pz0pLIrExsauXbsWKdLPz088JtNgtETIp6tKTEx0c3MzNTWl
WiMhvHr1auTIkWil09PTuY6FYANpCQs40ZLyijenGBoa6unppaSkCHjVRD3J
ysratm2bjo7O2bNnCwoKuA6HP6Bbqq+vL+RaUlxc/PDhw0mTJn369InrWAhB
sG/fPkVFRR8fH/GQfwmEtIQFXGlJYWHhrl27Jk+efP78eQGvmqgPJSUlFy9e
nDBhgru7uzi91hZ+JfxaUl5xA9TCwsLV1ZXylNhTVlY2e/ZsIyOjZ8+ecR0L
wRLSEhZwpSUgKCho7ty58+bNE905uCQNpMKoqKi///7b2dlZDIa5VgaeDC0R
fknOy8u7c+fOuHHjqNaIPVlZWb17996zZ8/nz5+5joVgCWkJCzjUkpycnP37
9w8ePJjmrhQJ4CTIiUOHDjUzM/vw4QPX4fAZaImenp7wawlITU0dM2ZMWFgY
PTEq3nh5efXo0eP+/fs0lEh0IS1hAYdagjSHGqetrY10IPi1E3UlIyNjxYoV
ysrK8fHx4tdVR4oXFS2BHB45cmTlypU0DFK8mT9//qxZs96+fct1IAR7SEtY
wKGWgOTk5P379/fp00c8HjIVY1JSUvbt2zdw4EBx7aSXlJTo6uqeO3eO60B+
DPrOOBzy8vKRkZEiPbMu8T3QZUMt+/33311cXNBIch0OwR7SEhZwqyVoVENC
QpSUlMzNzTkJgKgNWVlZFy5cmDBhgqurK1pLsRxsiVNxwYIFZ8+e5TqQWoFD
sHjxYg8PD3qDg1iCWvbgwYOffvopODiYXhst0pCWsIBbLSmveKmKo6Nj7969
8Q+6hSqEFBQUBAQE6OrqWlpainESLC0tFSEtAbdu3Zo/f/6bN2/E0hIlnC9f
vmzZsmXYsGEJCQl0fEUa0hIWcK4l6As8evSoZ8+ebm5uNBe9sAFRDA0NtbCw
MDQ0jIiI4DqcBgRbKlpagsylqanp4+NDc9GLGfAQ9NFGjBixcePGzMxMrsMh
6gVpCQs41xKQlpa2YsUKBQWF9+/fi99YSpEmOjp669atenp6/v7+XMfSsCAX
zJ8//8yZM1wHUgd27drl6Ogo3roogRQUFNy/f79Vq1b4P93BEXVIS1ggDFqC
qvfw4cMOHTqcO3cuOzubw0iIykAXd+/eraur6+7uLvb310RRSyIjIxctWuTr
61tcXMx1LATfSEpK2rZtW8+ePeEndAdH1CEtYYEwaEl5xZ19dXX1mTNnvn37
VuwzoEgAV/T09NTR0dmxY0dubi7X4QiCefPmiZaWAFNTU1dXV5qLXmyAh4SH
h6uqqi5btoycRAwgLWGBkGgJKmBgYODPP/989uxZulfOOTgcjx8/VlNT27Rp
k5jN5loDoqgl169fxzEKCAjgOhCCPxQVFd26datLly43b97kOhaCD5CWsEBI
tIRh5syZs2bNQkLkOhBJ5+PHj8rKymvWrHnz5g3XsQgOUdSSwsLCpUuXov6K
zTsTJZy4uDhra+u///6bbsyJB6QlLBAqLQkKChowYMChQ4do/DmHINNpa2sv
WrQoNDRUokYgi6KWAA8Pj23btoWEhHAdCMEHgoOD0TtDj4DrQAj+QFrCAqHS
kry8vPnz5+vq6t67d4/rWCQXKyurKVOmBAYGStrz2iKqJbGxsZs3b0ZFpqEI
ok5BQYGnp6e8vLyfnx/XsRD8gbSEBUKlJeDKlSuTJk1ycXHJyMjgOhaJAx7i
7e2NVvHs2bMSeMFKRLWkqKho7969NjY2cXFxXMdC1IuoqKiNGzcqKytT6yc2
kJawQNi0JC0tzdDQUF9fPygoiOtYJAv01MLCwtAk2tvbp6SkSODzUCKqJeDu
3bsODg5eXl5cB0LUC19f39mzZ69du5YufIkNpCUsEDYtAeiqa2hobN26lboM
AqOkpCQ8PNzExERLSysxMVGihpTwEF0tgcwfOHBg/fr19BSb6JKbm7tnzx60
xjdu3OA6FoJvkJawQAi15PPnz2ZmZjo6OmI/s6iQgK5ZXFycs7OzqqqqJI/q
EV0tAdeuXTM3N6eBr6LL69evV6xYMXv27JSUFK5jIfgGaQkLhFBLyitGmMya
NWvNmjVZWVlcxyL+pKamHj16VE1N7dixY1zHwiUirSVRUVGoxTY2NhJ4900M
QNfA09MTjd727du5joXgJ6QlLBBOLcnIyNi6dauKioqPjw/dZm1Q8vPzz58/
jz7axo0bS0pKuA6HS0RaS4qLi729vbW1tamvLYrk5eWtX79eS0tLki9XiiWk
JSwQTi0Bt2/fRq6cO3cuvayq4UDPOjAwUF9f39jYWAIfvamCSGsJePHixYYN
G06cOMF1IESdefjwIZTS1NQUfsJ1LAQ/IS1hgdBqSUFBgbu7+9ChQ0+dOsV1
LGJLZGQknGThwoXR0dFcx8I9oq4lOTk5Pj4+KioqXAdC1BlnZ+dZs2YdP36c
60AIPkNawgKh1ZKvX7+i94devIKCAtpbrsMRQ9LT07F7DQwM7t69SwMSykVf
S1Bl3rx5o6mpia4317EQdSAzM3P27NmojOHh4VzHQvAZ0hIWCK2WlFfcb/X2
9h4wYMD+/fu5jkXcKCkp2bx5s66u7qVLl+i6MYOoawlISUlxdXVdvnw514EQ
deDatWtohHfv3k0vNhI/SEtYIMxagt5fTEyMmZnZkCFD0LWnsa985MiRIzNm
zHB3d09NTeU6FmFBDLSkuLj49evXw4YNw2GlK2Cigrm5+dy5c319fbkOhOA/
pCUsEGYtKa+4YBIYGPjnn3/u27dP0l7R0nAEBQWpqqo6OzvHxcWR7PEQAy0p
r3iKzcDA4NSpU3QRTCRISEhQVlbesmULvTtALCEtYYGQa0l5xQyWlpaW8vLy
r169Kioq4joc0aa0tBTNoJaWlqmpaUREhIQ/EVwF8dCSwsJCf39/DQ2N5ORk
ck7hx9PTc9y4cdBIuoMjlpCWsED4taS4uDg8PFxOTs7W1vbz58/U0rKmrKws
JSXFzs5u8uTJT548oSevqyAeWoIKkpeXp6CgEBISQplOyEE/a+7cuQsXLnz8
+DHXsRANAmkJC4RfS8or+vj29vYDBgzw8/OjS9OsyczMPHv27JAhQ65fv04J
qzrioSUMcHhHR8ePHz9yHQhRE2/evOnbt++BAweSk5O5joVoEEhLWCASWlJe
kVJHjx69fPny169f01g+FuTn59++fXvSpElbt26lK07fRJy05O3bt2pqak+e
PJHMty6KCtbW1sOHDw8NDaUqKa6QlrBAVLQEnDhxon///u7u7tnZ2VzHImJA
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
rl275OTkjh07JqK5Jjk5ecqUKVOnTr158yb+zM3NRROnqKiI40Uv4+M7ixcv
lhAtAba2tqgdNDCp4cjIyFBTU5s1axYaIvEY5EawgLSEBeKqJeUV7xeOjo42
NzeXl5cPCAgQxQ4LsiS0atCgQWfPnsXmPHjwwMDAwMTERBIefxY8jJZIyBiA
58+f6+vr3759mzJmQ4AexPXr13/55RdfX19Rv49M1AfSEhaIsZaUV5hJeHj4
tGnTNDU1Hz58KFqXrBE8ulpt2rTp2rXr4cOHX716tWnTpvnz5yOhcB2aeGJk
ZOTp6SkhWoLNXL58uYeHR3JyMtexiCFxcXELFy6cOHFiVlYWXdWUZEhLWCDe
WlJeMb9HQEDAqFGjVq1a9ezZMxG6RP/69Ws5OTlZWdnWrVuvXr3ayclp3rx5
ly5d4jouscXY2BhaIlruWh/OnTtnbW19//59rgMRN3Jycry9vfv164fTiS5G
STikJSwQey1hcHV1HT169JYtW8LDw0Xl6RVE27lzZxkZmUaNGg0ePFhDQ2Pd
unVv3rx5+fLlw4cP7969GxoampKSIiqbI/wsWbIEeURyLrl//vzZzMzMw8ND
cjZZAHz9+hWVdPny5ePHj6fXeROkJSyQEC0pLS21t7cfM2aMnZ1dXFyckHdh
0LLl5eX17du3cePGUhU0a9ZMQUHB0tJyxYoVmpqaI0eOxJ9Lly4NCQkRxTEz
wgn2p0RpCXB2dnZycoqIiOA6EPEhNzf31KlTw4cPR1eI61gI7iEtYYGEaEl5
xc30TZs2jRo1CmaSmpoqzDd8i4uLg4KCWrVqJS0tzWgJ/KRFixYtW7Zs2rSp
rKxsmzZtbG1t09LShHkrRA5oycmTJyVKS8LCwqytrbHVdCLxBexG7FJDQ0MV
FZWcnByuwyG4h7SEBZKjJeUVHRkrK6thw4Zt2bJFmIcQZGdnz5o1q0mTJjwt
YZCRkYGZ/Pnnn3fu3KE8wneWLVuGBC1RV59KS0ttbGyg63S7gS+g77N///6x
Y8d6enpyHQshFJCWsECitASkpqba2trKy8tv3LhROIe/lpSUREZGNmvWTOr/
Iisr27VrV6TOpKQkIb8JJaIsX75c0rQE+Pr62tnZXblyhetAxAF/f38dHZ2F
CxdK1DU3ogZIS1ggaVqChP7+/fvt27ePGDFi3bp1QmgmKSkpCK958+aVL5I0
adJEUVHx1KlT+JacpIFgtCQ3N5frQAQKRH3nzp1r164tLS3lOhbRJjs7e9Om
TWpqanA8uphJMJCWsEDStKS84nJEVFQUUv/w4cOF8JpJeHj44MGDZWVleaNK
fv311yVLlty5cycjI4Pr6MSZFStWSKCWwEbOnz9vYWHx7NkzrmMRba5evaqp
qQnBq/JiTUKSIS1hgQRqSXnFmNJ37945ODgMGTIEfvLlyxch6d1kZWWdPn36
p59+wqkrLS0NORk7dqyzs/OrV68kZJovDlm5cuWJEyckcKQiTHj37t1OTk5c
ByLCpKSkLF++fM6cOb6+vkLSmBDCAGkJCyRTS8orrpnExMQwI2B37dr16dMn
Ybg58vr16wULFjRq1EhGRgZyMn/+fFgKYqOGTgBIrJbk5uaeP39+0aJFyK1c
xyKqeHp6Tps2DX2c1NRUrmMhhAjSEhZIrJaUV1y+/vjx4+rVq8eMGePs7BwV
FcXt1GRFRUVXrlzp0qULtKRPnz6mpqZPnjyhsXMCw8TERDK1BISGhq5Zs+by
5ctcByKSfPjwQUdHZ/HixQ8ePOA6FkK4IC1hgSRrSXnFPAMZGRmrVq0aPXq0
g4NDeHg4h0NNYmNjN27c2KJFCwSzY8cO5Ee6SCJI4IHQki9fvnAdCAckJSWd
PHnSyMiouLiY61hEjLKysn379o0fP97Dw0MyTx6iBkhLWCDhWsKAxmTdunWj
Ro3avHnzq1evOJnSBAZy/fr1yRX4+fkJfu0lJSUQodTU1E+fPiUkJLx//z62
gvj4ePyZnJyclZUlbMOD+Qu05Pjx45KZWZBbHz9+rKKiEhUVxXUsIkZiYqKC
goKZmdmbN2+4joUQOkhLWEBawgAVcXBwGDZsmKGhYVhYmODzL3qpPj4+NjY2
8AHBrBEqgpXm5ubCN2AdaFQvXbrk5OTETHGvr6+vra2tpaU1f/785cuX29nZ
IWU/ffo0PT0d9oIfit+VHGQWbGN2djbXgXAD5NPe3n7btm1cByJKQOdQNQYM
GBAQEEAXmojqkJawgLSER2lp6alTp8aOHTtu3LirV68KeO2FhYX5+fmCHHab
mZmJtnTTpk2TJk367bffZGRkmjZt2rdvX/ypoaEBLTE1NTUxMVm8eDH+lJeX
b9u2LSpU9+7dYSm3bt0Sv3lBJVxLoOLQzv79+wvD2G+RADvq06dPHTt2hM59
/PiR63AIYYS0hAWkJZWBmYSGhhoYGMjJyaGp4csIWLT2nz9/joyMjI+P53xO
DGxgbGwsesSTJ0/u1KlThw4dFBQUVq9efezYMWx4RkZGUQXFFZRUwPwbH375
8uXZs2cuLi7wlvbt2w8ePHjLli0vXrwQmyyG/QAtET/dqj0pKSna2to3btyg
p9FrA2rEggULhg4dGhMTI34XDwm+QFrCAtKSKqBBDg8Pt7Oz++uvv3R1ddEJ
YtHgIIm/ffvW2dll4sSpffr069mzV8+ecj169P7zT7mxYxXXrLG8fv26IJ/6
wUZFRETs27dPXV29e/fuI0aMWL58+dGjR8PCwj58+JCamooGFsvUvKX4FtuV
mZmJfRIUFGRlZTVu3DjIibGx8Z07d8RATtasWQM9wwZyHQhn5OfnX7lyZfbs
2ZK8E2oJuhioxW3atLl8+TLn3Q1CaCEtYQFpSXWQfOPi4pC1x48fP3nyZH9/
/9q/JwXJ/cWLF+vXbxo1anzv3vObN7eXlvaSkropLR0kLR0gLX2+adNdv/5q
PHToZE3N2bdv327o538/ffp04cKFZcuWYVuUlJSWLl3q6ur66NGj6Ojo9PR0
1nfDCwoK4DP379/fvXu3pqamgoICSg4ODuZv8AKGtARuibMC1opzWLyHN9cT
KDr6HWpqajNnzsQeEwMnJxoI0hIWkJZ8k9LS0tTU1KtXr86ZM2fixIm7du2K
j4//YeOTlZV18eIldXXd7t3nycj8W1b2npRUnJRUjpRUKc5EKakyKal8KalP
0tJhjRqdbtHCVElp6t69+xtitrSSkpLHjx/v2bNnwYIF06dP19PTs7e3R0f4
2bNnfJwZG2tB8Ldu3XJyctLS0po0adL27dtjY2NFdOyfubk5tETCZ/jHSY79
gAYhOTmZ61iEF5z2EPL+/fsHBgaSkxA1QFrCAtKSGkB6vX//vomJCXaRhYVF
QEBADTkLvWxPT6+JE+c2b75CVtZXSiqrQkW+91+xlNQLWVnrwYNnbNvmHBMT
w5eAYVNpaWn+/v5bt26dO3cuVMHY2BhOBXNgdzeqlitNSkqCwq1Zs2by5MlY
4+XLl0VxrkscYtISnCRhYWGampqvXr2ihPtNCgoKfH19VVRUVq5cyclkAoQI
QVrCAtKSH8KMEZ05c6auru7BgwffvHlT/WpAYWHhxYuXlJXnNWpkJi39pEYh
qfxfWuPGO/r2nfbvf//nmkl9gszNzX379u3FixcZIZk2bdqSJUvc3Nxevnwp
mBvfkBNsAk6nGTNmQIfwD+wo0boRQFrCgNNbW1v70qVLknw/qwbCw8MtLS2V
lJSePn3KdSyEsENawgLSktqQn59/+fJlfX193mWTpKSkyguggdLQ0G/efEVd
nIT5L6dRo00KCtrnzp1n8fgD+rOpqanPnj07ffo0msp//vmHGUBy9epVrm55
371718jISFlZGfHcu3dPhJ63Xbt2rYeHB73+Fbi7u1tZWb169YrrQIQOWCv6
JpMnT3Z2dqanb4gfQlrCAtKS2vPhw4fdu3cj4U6ZMgV7LCIignn1MHRi3bqN
3bvPl5W9UUcnYf77ICurb2S0MjIysvbBoEv7+fPnFy9euLm56erqjhw5EoHZ
2to+efKE89YSmX3nzp0QpLlz53p7e4vK9Qd4FGkJA6x7zpw5Pj4+onW9q6Ep
KSm5efMm9gxqXJWOCUF8E9ISFpCW1InS0tKnT5+uWLGiZ8+e48ePP3fuXFpa
2vPnz8eMUZKR+ZeUVDYrLSmXlfXs02f2v/6174dGwTylm5WVhZVu2bJl2LBh
vXr10tbWPnPmjFC9/rWsrAxJbfr06aNGjYI4icQTlIyW4IByHYhQsH79+v37
98fFxXEdiBCRmJhoamo6depUX19frmMhRAPSEhaQlrCgsLDw2bNnenp6jRo1
UlZWnjNnXteus2Vk7rBzEmaQiYzMSkPDxT98IUtOTg6aRHhIkyZN5OTkmCvt
QvvkS0REhJmZWffu3Tdv3gyj4zqcH7Bu3TrSEh4hISFr1qyBW3IdiBDh5OSk
pKSE/3N+QZIQFUhLWEBawg7mqsWLFy9gCK1b/ywtbSslFV8PLSlv0mTP1Knz
goKCvrk62Mjdu3eR4vv27duqVat//vnn+vXr2dnZyPXC3EIits+fP+/bt69r
1666urqCnEGOBYyWiOIzRA1BWVmZiYkJ2gdRuQfX0Ny8eRNOYmFhgVOa61gI
kYG0hAWkJfWhuLg4Nja2V6/eUlKnpaTy6qMl0tKX5OUXHT3qXrn8vLy8e/fu
WVtboz3s06fPpEmT7OzsgoODk5KS8vPzhVlIeDCPD3t5eXXv3n3ZsmXIcUIb
9vr1693d3UlLeJw9e9be3v727dtcB8I9OCvQAZk7d+6tW7eE/7ofITyQlrCA
tKSexMfHy8n1k5b2rZgtjb2WSEkF9uq1zNHRqaSk5OPHj97e3paWlioqKiNH
jlRTU8O/T58+/ezZM3wlcu8rQTOekpJy8uRJOTm5devWCe1LzTZs2AAtEaoh
Otzy6dMnKyur3bt3C/llroYGIo2uwfjx43F6SPIrkwgWkJawgLSknrx69UpO
boCMzO36OQn+C2nXznjcuElLliyZOXPmlClT5s+fb2Fh4ebm5ufn9/btWxF6
0rY6ZWVlGRkZu3btkpeXd3JySkhI4Dqib0BaUgX4pKur69atW9+8ecN1LFxy
48YN9A5sbW35Ne0hITmQlrCAtKSeREVFycn1l5b2k5L6Wj8tufvTTwvk5Uca
Ghoys3+jMYyMjMzLyxPaux51BRl/3bp1ysrKcC0hfL5y06ZN0BKadL0yYWFh
27Ztw/HiOhBugE5//Phx6tSpc+bMCQ0NpcelibpCWsIC0pJ6kpmZ2bdvP2np
C1JShfUbW3K1R4+5q1atfvz4MVK22KhIFdDfXLRokZaW1sWLF4XtqWErK6uj
R4+SllTmy5cvBw4cWLt2rQRO54I6iM13dHQcMGCAt7e3SF+uJLiCtIQFpCX1
pLS0VEFhQpMme6SkPtdDS77KyrpNnLjg+vXrXG9Qg/Pw4UN1dXVjY+MHDx4I
1ehBRkuE8DIOt/j6+m7cuNHPz4/rQARNXl5eQEDAn3/+aW9vT48jEewgLWEB
aUn9MTU179x5mbR0WD20JKdx4w0LFiyMj4/nemsEgaenp6qqqoWFxfv377mO
5b9s3ryZtKQ6Hz58OHjw4Pr16yVq4GtxcfHLly81NDTGjx+fmppKby0k2EFa
wgLSkvrj7e09bJhqo0anK94LzO4OTnDbtgs2btwsrvduqlBYWOjo6KisrLx9
+3bheQcroyU0K0UVcE76+PjMnTsXfsJ1LAICm4wOgr29fbdu3R4+fEhOQrCG
tIQFpCX1B0lWQ0OnWTMzKalXrLSkrEmTterqC743l5pY8unTJwsLCwUFhQsX
LnAdy/+yZcuWI0eOkJZU582bNw4ODmgruA5EQGRlZeFM6N27t7OzM9exEKIN
aQkLSEv4gr+//8SJ0xo1spaSyqirlsjIuHfqNHnPnn9L1EXy8orXLhsZGU2c
OBGKwnUs/8Ha2hrJSEiCESog3n5+foqKipVfc1BWViaWF/eKioo8PT1HjRq1
YsUKSauSBN8hLWEBaQlfKCgo+Ne/9g0cOL1x4+1SUrl10ZKbTZoobdpkLSGj
SiqD9v/SpUvKysobNmzgOpb/QFryPaAf4eHhixcv5r0iB37y8OHD2NhYbgNr
CK5fv66urq6jo0OvKSTqD2kJC0hL+AXS2bZtzn36TG3ceKOU1Mfa3LuRkTna
pMkEExOLFy9eCO3r9hqUDx8+7NixY/DgwSEhIVzHUm5jYwMtEdpJaLklPT39
9OnTc+fOZf4MDg52cXERhqPGX8LCwgwMDDQ1NW/dukWXSoj6Q1rCAtISfoEe
JTqP+/YdVFDQkpXVlZHxrLihU32Ota8Vl1OCmzRZ3anTpM2bt8JJhGfYp4Ap
KipCaps+ffq8efM4FzNbW1vSku+BHB0RETF+/Hic5KWlpWvXrlVXVxez9wsn
Jiaam5tju9zd3XNycrgOhxAHSEtYQFrCXz59+nT+/IUlS0zl5GbLyCxv0mSX
tPRFKanbUlIPpKTuSEt7y8oeatx4bdu287S09Pfu3R8fH895OuYWdMOPHTvW
q1evGzducDuLJrTk8OHDpCWVSUtLi46OZm5s4UhZWFjs3bsXJ62ysnK/fv1O
nTrFdYB8Izs728nJadq0adu3b6dzgOAXpCUsIC3hO4WFhZGRkXv3HjA2XqKm
pjt0qGGvXst+/31ljx7LBw1aPGmSvp7eIisr67t370q4kDCUlZUhzWloaKCX
mpqayuEoyq1bt0JL0GXmKgAhJCUl5erVqy4uLl5eXo8ePQoMDERzsX//fjk5
uY4dOx49epTrAPkDfPj48eNTpkxZt27d69evuQ6HEB9IS1hAWtJAIL2i/4Vm
3MPj2I4dLps3b7W3337okNuNGzfi4uLE8hEG1uTl5fn4+HTq1On27dv5+flc
hWFnZ0daUgWcqEFBQbNmzerTp4+hoSE8pHfv3goKCq1bt27ZsuXBgwfFYE4P
bCPq6cSJE42MjB4/fiwGW0QID6QlLCAtIYQBmMno0aONjY3fv3/PlbPZ29tD
S4Tz7cYcUlhY6O3tPWTIkKZNm/7000+///578+bNZWRk8O/du3dzqJF8ARIS
ExODNlBNTe3Bgwd0AZPgL6QlLCAtIYSB0tJSDw+PP/74A/1W5EFOYnBwcHBz
c5OcuUxrT3Z29rlz5yAk0tLSaFSZ/7dq1crGxkakZ5+Dk6SkpBgYGPTt2/fO
nTuirliEEEJawgLSEkJIgI0MGDDA3Nw8KiqKkwBIS2ogNTX10KFDrVu3lvr/
tGzZ0szM7O3bt1yHxp60tLQdO3Y0bdrU39+fnIRoCEhLWEBaQggPBw8eHDRo
0NWrVzmZMmLbtm2kJTWAJG5qatqqVSvmakmjRo1mz54tulOXfPr0ycnJqW3b
tsePH6cpSogGgrSEBaQlhPCALvnYsWM3bdoUHR0t+LU7OjpCS4TqpcZCRVlZ
WXJy8qhRo1q0aMGYiZKSEhyS67jY8PHjx507d/71119w0dzcXK7DIcQW0hIW
kJYQwgMSn6WlpZaWlq+vr+DXDi1xdXUlLamBr1+/Pnr0qH///k2aNEHrOmDA
gGPHjnEdVJ1JSkpCuzdhwgQIsEiPjSGEH9ISFpCWEEJFYGCgsrIyerLZ2dkC
XvX27duhJRL4cqI6UVJScuLEib59+zZq1KhLly67d+/mOqK6kZqaum/fvunT
p69Zs4aTi3KEREFawgLSEkKoyMzMnD9//rJly548eSLgVe/YsYO0pDZkZWXZ
2dn17t27devWtra2XIdTB9LT0w8ePKihoWFmZvb8+XOuwyHEH9ISFpCWEMIG
zklNTc2jR48KeGIrRkvovbG1ISYmxsjI6Ndff123bl1paSnX4dSKtLQ0Nze3
f/75Z+XKlY8ePeI6HEIiIC1hAWkJIWw8efJk1qxZ5ubmqampglyvk5MTaUnt
CQgIQIpfv369SLzVLj09/ciRIyoqKkuXLg0JCaFplgnBQFrCAtISQtgoLCy0
sLCYM2dOUFCQINfr7Ox86NCh2NhYQa5UpDl16hRyvZCPGmVeA3Hs2LERI0Ys
WbLk6dOnQuUkJSUlUKaUlJS8vDyuYyH4D2kJC0hLCCHEw8Nj9uzZODkFuVLS
krpSVFSUlpaGrMp1IN8FBpKTk3PhwoXu3bvDSSIjI4XKSQDOt8OHD+PEe/36
dV1jKy0tzalAtObMx2Yi8rKyshq2F1uUm5tbn03DD79U0BA3GVF4VgU/XJK0
hAWkJYQQEhoaumDBgsWLFwtynisXFxdkh5iYGIGtkWhokNfOnz/fvHlzU1PT
pKQkrsOpCvKyvr5+hw4dEB6L+XLj4uJw0u7evfvVq1cNEV4DAd9ITEzE4cjP
z/+emUDSDh48iPT07Nkzdmt5+fLltm3bnJycGuK4v3nzZt26dZaWlj9ckrSE
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
2bfPtH17bRGRp2RvlXxo3Xrz8uW6QjpLGkGqBbWEBKgliFBQWFjYsWPH8+fP
82/ZT3t7e75qiZeX15IlS7Zt2ybUE3DY8fPzV1NbKSW1k0b7UXst+SkhcWr8
eI2bN28J+jgQhF+glpAAtQQRFoYOHXr48OG4uDg+pQ9aApcDn7SEwWBA5ufN
m+fu7s6P9AVCbm6utbVN587/iYicp9FyauMkeSIiN/79d6GhoXEDX821VhQU
FPwsBVeEQwhQS0iAWoIIC7Nmzdq+fXvl9bGp4urVq3A5BAUF8SPxb9++6erq
amlpNfC38tWW5ORkc/PDUlLDabSbNFpRzZykmEbzlZCYuXatPl9nfNcnxcXF
4CTv3r0zMzM7dOgQueXZkcYHagkJUEsQYWHt2rU6Ojr8G5Lq4OBw6tSp9+/f
8yNxNzc3DQ0NCwsLfiQuWJKSkqysrJo16yomZkyj5dJoTJ5OkisiclxaesjW
rdtYLw4WdjIzM8Fpp02b1rt378WLF9+7d4/jfTRIkwW1hASoJYiwYGpqqqam
xr9ZG46OjvzTkt27dy9btgwCFj8SFyzFxcVpaWl37rj37z9WUnIonW5TusZa
QUUbKaLRUmi0y5KSY3r3Vjx79nxCQoKwr+wK+Y+Ojt63b9+gQYOUlZUPHjz4
+vXrnz9/5ufn40MchAC1hASoJYiwYGNjM3ny5GfPnvEp/WvXroGWvHv3jvKU
ExMT1dXVN23aFBsbS3niDQEwk+zs7JCQEAuLo0OGzJWWHi0pOUdaeo2EhLGE
xB4pqfXS0gvExBT69Zt14MChwMAX6enpQu0kGRkZ3t7e69evHzVq1OrVqx0c
HMBmU1JSWC8IRhAC1BISoJYgwoKbm5uCgoKvry+f0uefljx48GDOnDlWVlaN
+94+MY/76dNnTk7Ohw8f3bTJWEdns7b2JgMDo/37zSF2P3r0OC4uTnjHXUDO
P336dO7cOT09vcWLFxsbGzs5OYGQCLtlIfwDtYQEqCWIsPDkyZP+/ft7eHjw
aYLt9evXQUvevn1LecrHjx9ftGjRjRs3KE+5YZKfnw9+AhEcHA/KMywsLCYm
Jjc3V9D5Ik92dnZAQIClpeWaNWtWrVq1d+9eZ2fnDx8+5OXlCTprSIMGtYQE
qCWIsABhrl+/fteuXeNTgIOeLz+0BCRqxYoV69ate/nyJbUpI/wGzl1ycrKX
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
ylTJJWN2XH80nKwBCgolqdk8eJSWEu6iPWvSll3WetvHSUjvfvJ3/axqQnyt
avtfLWGUFvgWDaWlM+VVxnbtPMdA3dr7UVWxgPE15Ob6HWojoMSmT+ve+X/q
k8xcXHmUAGoJD3hoSeG7+1vlqulwpdrsKhMD9trOTnai94I5JXNXZSRn7dly
97Grq+uTB6ccdvXrUxb8/5tk9yg4cKN26bTNskVRirwvzxhYYb2UClqSHnp+
3Jy//sB5couCt8xmzxVc1Dkh15fKtlxibnZrx97RxIwV9lW/chM9Jo8sTU1E
0/bco0eQSX+/C7ePj1Uu86V1K58kUPTgSuBawigblUrQ3/RiFiViwqYlfwrS
PCd2gMTlzR1yKl+XaSEH1U3iiau7ai0hlhFwmDW3ZPZX5UrIZGT731gvW1pp
X2d/ObRikoV1WYhkMlLOmpXMa1iz5RN7bcyIf3njubfR3lmSlWoUR4IvM4K3
Txl7/MKXzNIEGbnfDmzuS6dPsriazsj7ZFTFJi4DrpjZ966v6SA93/LYR1b4
zs0IO3pkjqzcuuve2ex/AlfKnA4zTl1lb8qYabHeC1RkSPTdqtYSZkKY/cRR
0hrqdz6VdzlB6ny9DvSXHrXNKPgnt4YU4u/18yvaiCjo6z/+9p34K2Zm6oeT
lsr9//NhX5guI+rajBGmt9xZR8H4Gnp96iR6x3a7HnAOWuZ1iiktjcIg3709
Jdss1/KNKss8IzrIbuIEESWFi8G1GaVPbSUpzot7+Mj/rIthd1muly0jMdJ5
fH/i6sgOc1s0Q+teeNkpKwx9bNJVhjZM/tLHCneuq7lq8rK/mGwumTgJDXVc
6NmpYw/7BmaXXolQti6wry7tTJ/FMjPD7aZXsYlL4WYHG63vL9vHzNOfFbIh
oN/WmC+tPPZqaK0nQZSerB70mTPciPoJlfPGhWX/0HuMGe4QVVLTih9fnSNR
4RkxjxBf69pe1pBKbDttPWWsqiPLXhh5KXfcNnWk99bVelopFhQ+dZqqpOH2
rnx+H0ipV8mX6TMrXh1soJbwoKKWiGlZ7jl2zMTExM5Kx1i9dWlMrv4+MDNq
yzzuWlKcF7x6LiEPHTYfTmbzTGb0E+O2pRu6tD/8MrPg6Y2VbeAkzvRP/hsj
mU+vzhHnpiUEv6Ivs6Irl5P7N1e9jM+c6t/c4G4ItIrfD68plxn6Go8vZdn0
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
AAAAAAAAAAAAAADw3/M3Fvp4RQ==
    "], {{0, 470}, {733, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{333.9636363636372, Automatic},
  ImageSizeRaw->{733, 470},
  PlotRange->{{0, 733}, {0, 470}}]}], "Text",
 CellChangeTimes->{{3.709469382050675*^9, 3.709469599132248*^9}, {
  3.709469785822062*^9, 3.709469803624137*^9}, {3.7094699947486534`*^9, 
  3.7094700397214284`*^9}, {3.709470086725078*^9, 3.7094702874048223`*^9}, {
  3.7094703757835827`*^9, 3.709470383110248*^9}, {3.709470689377967*^9, 
  3.7094707919166336`*^9}},
 FontFamily->"Times New Roman",
 FontSize->18]
}, Open  ]],

Cell[CellGroupData[{

Cell["Descend direction + line search (Steepest descent method)", \
"Subsubsection",
 CellChangeTimes->{{3.709465577499*^9, 3.70946560433134*^9}, {
  3.7094666034257517`*^9, 3.7094666078966484`*^9}, {3.7094667051407757`*^9, 
  3.7094667208634553`*^9}, {3.709470308693102*^9, 3.7094703263791957`*^9}, {
  3.709470536079528*^9, 3.7094705454745913`*^9}, {3.709470619464237*^9, 
  3.709470624650032*^9}},
 FontFamily->"Times New Roman",
 FontSize->18],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["d", "k"], "=", 
   RowBox[{"-", 
    RowBox[{"\[Del]", 
     RowBox[{"f", "(", "x", ")"}]}]}]}], TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.709470642971461*^9, 3.709470684091605*^9}, {
  3.7094708068481884`*^9, 3.7094708084816055`*^9}},
 FontFamily->"Times New Roman",
 FontSize->18],

Cell[TextData[{
 Cell[BoxData["        "], "Input"],
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
AAAAAAAAAAAAAAAAAGCLfwEZ8oqC
     "], {{0, 833}, {1329, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{557.2454545454545, Automatic},
   ImageSizeRaw->{1329, 833},
   PlotRange->{{0, 1329}, {0, 833}}]],
  CellChangeTimes->{{3.709469382050675*^9, 3.709469599132248*^9}, {
   3.709469785822062*^9, 3.709469803624137*^9}, {3.7094699947486534`*^9, 
   3.7094700397214284`*^9}, {3.709470086725078*^9, 3.7094702874048223`*^9}, {
   3.7094703757835827`*^9, 3.709470383110248*^9}}]
}], "Text",
 CellChangeTimes->{{3.698134238989613*^9, 3.698134242903209*^9}, {
  3.7094656242324886`*^9, 3.709465663918378*^9}, {3.7094663943305817`*^9, 
  3.709466395487277*^9}, {3.709466472568847*^9, 3.7094665662751102`*^9}, {
  3.7094666178470945`*^9, 3.709466636417967*^9}, {3.709470386821086*^9, 
  3.709470386821086*^9}, {3.709470512924217*^9, 3.7094705207553616`*^9}},
 FontFamily->"Times New Roman",
 FontSize->18]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sensibility to initial points", "Subsubsection",
 CellChangeTimes->{{3.709465577499*^9, 3.70946560433134*^9}, {
  3.7094666034257517`*^9, 3.7094666078966484`*^9}, {3.7094666574343987`*^9, 
  3.70946666261091*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQdYFNm2tglmx6wzzjg6psEwY8KsKCIqF0VHkhgBEcEIqCAmFBAQBQzn
GEEFA5gTiiKgYEAUzAFEooJKDpKT/N+h7t+HC4pQNF0d1vvMM490V+9aFfZe
767atauHgamGkYyUlNSaZvifxkJLpdWrF67XbIs/tE3WLDU2WWyoamK+2Hjx
6lEGsvgwXFpKKgbL/+ff5QRBEARBEEKDFEEQBEEQBHdUNxNOjIggCIIgCAmH
tIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGB
tIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGBtIQgCIIgCCGB
Ey3Jz88/deqUlpbW4MGDe/XqNXz48K1btyYnJ/MWePLkyZo1awIDA+uzlg8f
Ppw8efLAgQM5OTn1jZggCIIgiIZHwFpSVlb25s2bhQsXGhgYHDt27N69e+7u
7urq6v3797e0tMS3eXl527dvNzY2hlF8+vSpPusqLCwMCQnZsGGDkZHRnTt3
+LUJBEEQBEE0EILUkoKCgocPH6qpqSkrK589exbWUVJScuXKlXHjxjVq1Ehe
Xv7p06erV6/W09M7c+ZMQkICvq3nGjMzMwMDA9etWzdt2jQvL6/6F0gQBEEQ
RMMhMC3Jz8+Hk2hra7dr187d3R3CwHx++fLlsWPHtmjRYtCgQYsWLVJUVLxw
4UJ2djYf1xsaGrp48eIxY8YcOXIE6/369Su/CicIgiAIgo8IRktKS0sjIiKW
Ll3arFkzDQ2Nym6Az3ft2qWurj548OAePXrs27evqKiIv2svLCwMCwtTUFAY
OHDgiRMn0tPT61lgQUFBXl5eWVkZX8IjCIIgCIJBMFqSnJy8f//+9u3bt23b
9tatW1VupsTExFhbW3ft2lVbWxvpnu9rL68wk/Pnz3fq1GnkyJHXrl378uVL
fUqLi4t78eJFWloav8IjCIIgCKJcIFoCCfHz81NUVGzSpMmQIUNKS0srfwtD
OHLkSK9evfr06RMUFMTfVVemrKwM2tOyZUsdHZ2QkJD6jDPx9fXduXPn3bt3
+RgeQRAEQRAC0JLPnz9bW1vLysq2b9/e0tKy8ldQBRiLqqpqmzZtYAsNPerj
/v373bp1gx0hnoSEBHaFIMhdu3ZNnDjRxcWFv+ERBEEQhIQjAC05c+aMvLw8
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
NWvNmjVZWVlcxyL+pKamHj16VE1N7dixY1zHwiUirSVRUVGoxTY2NhJ4900M
QNfA09MTjd727du5joXgJ6QlLBBOLcnIyNi6dauKioqPjw/dZm1Q8vPzz58/
jz7axo0bS0pKuA6HS0RaS4qLi729vbW1tamvLYrk5eWtX79eS0tLki9XiiWk
JSwQTi0Bt2/fRq6cO3cuvayq4UDPOjAwUF9f39jYWAIfvamCSGsJePHixYYN
G06cOMF1IESdefjwIZTS1NQUfsJ1LAQ/IS1hgdBqSUFBgbu7+9ChQ0+dOsV1
LGJLZGQknGThwoXR0dFcx8I9oq4lOTk5Pj4+KioqXAdC1BlnZ+dZs2YdP36c
60AIPkNawgKh1ZKvX7+i94devIKCAtpbrsMRQ9LT07F7DQwM7t69SwMSykVf
S1Bl3rx5o6mpia4317EQdSAzM3P27NmojOHh4VzHQvAZ0hIWCK2WlFfcb/X2
9h4wYMD+/fu5jkXcKCkp2bx5s66u7qVLl+i6MYOoawlISUlxdXVdvnw514EQ
deDatWtohHfv3k0vNhI/SEtYIMxagt5fTEyMmZnZkCFD0LWnsa985MiRIzNm
zHB3d09NTeU6FmFBDLSkuLj49evXw4YNw2GlK2Cigrm5+dy5c319fbkOhOA/
pCUsEGYtKa+4YBIYGPjnn3/u27dP0l7R0nAEBQWpqqo6OzvHxcWR7PEQAy0p
r3iKzcDA4NSpU3QRTCRISEhQVlbesmULvTtALCEtYYGQa0l5xQyWlpaW8vLy
r169Kioq4joc0aa0tBTNoJaWlqmpaUREhIQ/EVwF8dCSwsJCf39/DQ2N5ORk
ck7hx9PTc9y4cdBIuoMjlpCWsED4taS4uDg8PFxOTs7W1vbz58/U0rKmrKws
JSXFzs5u8uTJT548oSevqyAeWoIKkpeXp6CgEBISQplOyEE/a+7cuQsXLnz8
+DHXsRANAmkJC4RfS8or+vj29vYDBgzw8/OjS9OsyczMPHv27JAhQ65fv04J
qzrioSUMcHhHR8ePHz9yHQhRE2/evOnbt++BAweSk5O5joVoEEhLWCASWlJe
kVJHjx69fPny169f01g+FuTn59++fXvSpElbt26lK07fRJy05O3bt2pqak+e
PJHMty6KCtbW1sOHDw8NDaUqKa6QlrBAVLQEnDhxon///u7u7tnZ2VzHImJA
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
rl275OTkjh07JqK5Jjk5ecqUKVOnTr158yb+zM3NRROnqKiI40Uv4+M7ixcv
lhAtAba2tqgdNDCp4cjIyFBTU5s1axYaIvEY5EawgLSEBeKqJeUV7xeOjo42
NzeXl5cPCAgQxQ4LsiS0atCgQWfPnsXmPHjwwMDAwMTERBIefxY8jJZIyBiA
58+f6+vr3759mzJmQ4AexPXr13/55RdfX19Rv49M1AfSEhaIsZaUV5hJeHj4
tGnTNDU1Hz58KFqXrBE8ulpt2rTp2rXr4cOHX716tWnTpvnz5yOhcB2aeGJk
ZOTp6SkhWoLNXL58uYeHR3JyMtexiCFxcXELFy6cOHFiVlYWXdWUZEhLWCDe
WlJeMb9HQEDAqFGjVq1a9ezZMxG6RP/69Ws5OTlZWdnWrVuvXr3ayclp3rx5
ly5d4jouscXY2BhaIlruWh/OnTtnbW19//59rgMRN3Jycry9vfv164fTiS5G
STikJSwQey1hcHV1HT169JYtW8LDw0Xl6RVE27lzZxkZmUaNGg0ePFhDQ2Pd
unVv3rx5+fLlw4cP7969GxoampKSIiqbI/wsWbIEeURyLrl//vzZzMzMw8ND
cjZZAHz9+hWVdPny5ePHj6fXeROkJSyQEC0pLS21t7cfM2aMnZ1dXFyckHdh
0LLl5eX17du3cePGUhU0a9ZMQUHB0tJyxYoVmpqaI0eOxJ9Lly4NCQkRxTEz
wgn2p0RpCXB2dnZycoqIiOA6EPEhNzf31KlTw4cPR1eI61gI7iEtYYGEaEl5
xc30TZs2jRo1CmaSmpoqzDd8i4uLg4KCWrVqJS0tzWgJ/KRFixYtW7Zs2rSp
rKxsmzZtbG1t09LShHkrRA5oycmTJyVKS8LCwqytrbHVdCLxBexG7FJDQ0MV
FZWcnByuwyG4h7SEBZKjJeUVHRkrK6thw4Zt2bJFmIcQZGdnz5o1q0mTJjwt
YZCRkYGZ/Pnnn3fu3KE8wneWLVuGBC1RV59KS0ttbGyg63S7gS+g77N///6x
Y8d6enpyHQshFJCWsECitASkpqba2trKy8tv3LhROIe/lpSUREZGNmvWTOr/
Iisr27VrV6TOpKQkIb8JJaIsX75c0rQE+Pr62tnZXblyhetAxAF/f38dHZ2F
CxdK1DU3ogZIS1ggaVqChP7+/fvt27ePGDFi3bp1QmgmKSkpCK958+aVL5I0
adJEUVHx1KlT+JacpIFgtCQ3N5frQAQKRH3nzp1r164tLS3lOhbRJjs7e9Om
TWpqanA8uphJMJCWsEDStKS84nJEVFQUUv/w4cOF8JpJeHj44MGDZWVleaNK
fv311yVLlty5cycjI4Pr6MSZFStWSKCWwEbOnz9vYWHx7NkzrmMRba5evaqp
qQnBq/JiTUKSIS1hgQRqSXnFmNJ37945ODgMGTIEfvLlyxch6d1kZWWdPn36
p59+wqkrLS0NORk7dqyzs/OrV68kZJovDlm5cuWJEyckcKQiTHj37t1OTk5c
ByLCpKSkLF++fM6cOb6+vkLSmBDCAGkJCyRTS8orrpnExMQwI2B37dr16dMn
Ybg58vr16wULFjRq1EhGRgZyMn/+fFgKYqOGTgBIrJbk5uaeP39+0aJFyK1c
xyKqeHp6Tps2DX2c1NRUrmMhhAjSEhZIrJaUV1y+/vjx4+rVq8eMGePs7BwV
FcXt1GRFRUVXrlzp0qULtKRPnz6mpqZPnjyhsXMCw8TERDK1BISGhq5Zs+by
5ctcByKSfPjwQUdHZ/HixQ8ePOA6FkK4IC1hgSRrSXnFPAMZGRmrVq0aPXq0
g4NDeHg4h0NNYmNjN27c2KJFCwSzY8cO5Ee6SCJI4IHQki9fvnAdCAckJSWd
PHnSyMiouLiY61hEjLKysn379o0fP97Dw0MyTx6iBkhLWCDhWsKAxmTdunWj
Ro3avHnzq1evOJnSBAZy/fr1yRX4+fkJfu0lJSUQodTU1E+fPiUkJLx//z62
gvj4ePyZnJyclZUlbMOD+Qu05Pjx45KZWZBbHz9+rKKiEhUVxXUsIkZiYqKC
goKZmdmbN2+4joUQOkhLWEBawgAVcXBwGDZsmKGhYVhYmODzL3qpPj4+NjY2
8AHBrBEqgpXm5ubCN2AdaFQvXbrk5OTETHGvr6+vra2tpaU1f/785cuX29nZ
IWU/ffo0PT0d9oIfit+VHGQWbGN2djbXgXAD5NPe3n7btm1cByJKQOdQNQYM
GBAQEEAXmojqkJawgLSER2lp6alTp8aOHTtu3LirV68KeO2FhYX5+fmCHHab
mZmJtnTTpk2TJk367bffZGRkmjZt2rdvX/ypoaEBLTE1NTUxMVm8eDH+lJeX
b9u2LSpU9+7dYSm3bt0Sv3lBJVxLoOLQzv79+wvD2G+RADvq06dPHTt2hM59
/PiR63AIYYS0hAWkJZWBmYSGhhoYGMjJyaGp4csIWLT2nz9/joyMjI+P53xO
DGxgbGwsesSTJ0/u1KlThw4dFBQUVq9efezYMWx4RkZGUQXFFZRUwPwbH375
8uXZs2cuLi7wlvbt2w8ePHjLli0vXrwQmyyG/QAtET/dqj0pKSna2to3btyg
p9FrA2rEggULhg4dGhMTI34XDwm+QFrCAtKSKqBBDg8Pt7Oz++uvv3R1ddEJ
YtHgIIm/ffvW2dll4sSpffr069mzV8+ecj169P7zT7mxYxXXrLG8fv26IJ/6
wUZFRETs27dPXV29e/fuI0aMWL58+dGjR8PCwj58+JCamooGFsvUvKX4FtuV
mZmJfRIUFGRlZTVu3DjIibGx8Z07d8RATtasWQM9wwZyHQhn5OfnX7lyZfbs
2ZK8E2oJuhioxW3atLl8+TLn3Q1CaCEtYQFpSXWQfOPi4pC1x48fP3nyZH9/
/9q/JwXJ/cWLF+vXbxo1anzv3vObN7eXlvaSkropLR0kLR0gLX2+adNdv/5q
PHToZE3N2bdv327o538/ffp04cKFZcuWYVuUlJSWLl3q6ur66NGj6Ojo9PR0
1nfDCwoK4DP379/fvXu3pqamgoICSg4ODuZv8AKGtARuibMC1opzWLyHN9cT
KDr6HWpqajNnzsQeEwMnJxoI0hIWkJZ8k9LS0tTU1KtXr86ZM2fixIm7du2K
j4//YeOTlZV18eIldXXd7t3nycj8W1b2npRUnJRUjpRUKc5EKakyKal8KalP
0tJhjRqdbtHCVElp6t69+xtitrSSkpLHjx/v2bNnwYIF06dP19PTs7e3R0f4
2bNnfJwZG2tB8Ldu3XJyctLS0po0adL27dtjY2NFdOyfubk5tETCZ/jHSY79
gAYhOTmZ61iEF5z2EPL+/fsHBgaSkxA1QFrCAtKSGkB6vX//vomJCXaRhYVF
QEBADTkLvWxPT6+JE+c2b75CVtZXSiqrQkW+91+xlNQLWVnrwYNnbNvmHBMT
w5eAYVNpaWn+/v5bt26dO3cuVMHY2BhOBXNgdzeqlitNSkqCwq1Zs2by5MlY
4+XLl0VxrkscYtISnCRhYWGampqvXr2ihPtNCgoKfH19VVRUVq5cyclkAoQI
QVrCAtKSH8KMEZ05c6auru7BgwffvHlT/WpAYWHhxYuXlJXnNWpkJi39pEYh
qfxfWuPGO/r2nfbvf//nmkl9gszNzX379u3FixcZIZk2bdqSJUvc3Nxevnwp
mBvfkBNsAk6nGTNmQIfwD+wo0boRQFrCgNNbW1v70qVLknw/qwbCw8MtLS2V
lJSePn3KdSyEsENawgLSktqQn59/+fJlfX193mWTpKSkyguggdLQ0G/efEVd
nIT5L6dRo00KCtrnzp1n8fgD+rOpqanPnj07ffo0msp//vmHGUBy9epVrm55
371718jISFlZGfHcu3dPhJ63Xbt2rYeHB73+Fbi7u1tZWb169YrrQIQOWCv6
JpMnT3Z2dqanb4gfQlrCAtKS2vPhw4fdu3cj4U6ZMgV7LCIignn1MHRi3bqN
3bvPl5W9UUcnYf77ICurb2S0MjIysvbBoEv7+fPnFy9euLm56erqjhw5EoHZ
2to+efKE89YSmX3nzp0QpLlz53p7e4vK9Qd4FGkJA6x7zpw5Pj4+onW9q6Ep
KSm5efMm9gxqXJWOCUF8E9ISFpCW1InS0tKnT5+uWLGiZ8+e48ePP3fuXFpa
2vPnz8eMUZKR+ZeUVDYrLSmXlfXs02f2v/6174dGwTylm5WVhZVu2bJl2LBh
vXr10tbWPnPmjFC9/rWsrAxJbfr06aNGjYI4icQTlIyW4IByHYhQsH79+v37
98fFxXEdiBCRmJhoamo6depUX19frmMhRAPSEhaQlrCgsLDw2bNnenp6jRo1
UlZWnjNnXteus2Vk7rBzEmaQiYzMSkPDxT98IUtOTg6aRHhIkyZN5OTkmCvt
QvvkS0REhJmZWffu3Tdv3gyj4zqcH7Bu3TrSEh4hISFr1qyBW3IdiBDh5OSk
pKSE/3N+QZIQFUhLWEBawg7mqsWLFy9gCK1b/ywtbSslFV8PLSlv0mTP1Knz
goKCvrk62Mjdu3eR4vv27duqVat//vnn+vXr2dnZyPXC3EIits+fP+/bt69r
1666urqCnEGOBYyWiOIzRA1BWVmZiYkJ2gdRuQfX0Ny8eRNOYmFhgVOa61gI
kYG0hAWkJfWhuLg4Nja2V6/eUlKnpaTy6qMl0tKX5OUXHT3qXrn8vLy8e/fu
WVtboz3s06fPpEmT7OzsgoODk5KS8vPzhVlIeDCPD3t5eXXv3n3ZsmXIcUIb
9vr1693d3UlLeJw9e9be3v727dtcB8I9OCvQAZk7d+6tW7eE/7ofITyQlrCA
tKSexMfHy8n1k5b2rZgtjb2WSEkF9uq1zNHRqaSk5OPHj97e3paWlioqKiNH
jlRTU8O/T58+/ezZM3wlcu8rQTOekpJy8uRJOTm5devWCe1LzTZs2AAtEaoh
Otzy6dMnKyur3bt3C/llroYGIo2uwfjx43F6SPIrkwgWkJawgLSknrx69UpO
boCMzO36OQn+C2nXznjcuElLliyZOXPmlClT5s+fb2Fh4ebm5ufn9/btWxF6
0rY6ZWVlGRkZu3btkpeXd3JySkhI4Dqib0BaUgX4pKur69atW9+8ecN1LFxy
48YN9A5sbW35Ne0hITmQlrCAtKSeREVFycn1l5b2k5L6Wj8tufvTTwvk5Uca
Ghoys3+jMYyMjMzLyxPaux51BRl/3bp1ysrKcC0hfL5y06ZN0BKadL0yYWFh
27Ztw/HiOhBugE5//Phx6tSpc+bMCQ0NpcelibpCWsIC0pJ6kpmZ2bdvP2np
C1JShfUbW3K1R4+5q1atfvz4MVK22KhIFdDfXLRokZaW1sWLF4XtqWErK6uj
R4+SllTmy5cvBw4cWLt2rQRO54I6iM13dHQcMGCAt7e3SF+uJLiCtIQFpCX1
pLS0VEFhQpMme6SkPtdDS77KyrpNnLjg+vXrXG9Qg/Pw4UN1dXVjY+MHDx4I
1ehBRkuE8DIOt/j6+m7cuNHPz4/rQARNXl5eQEDAn3/+aW9vT48jEewgLWEB
aUn9MTU179x5mbR0WD20JKdx4w0LFiyMj4/nemsEgaenp6qqqoWFxfv377mO
5b9s3ryZtKQ6Hz58OHjw4Pr16yVq4GtxcfHLly81NDTGjx+fmppKby0k2EFa
wgLSkvrj7e09bJhqo0anK94LzO4OTnDbtgs2btwsrvduqlBYWOjo6KisrLx9
+3bheQcroyU0K0UVcE76+PjMnTsXfsJ1LAICm4wOgr29fbdu3R4+fEhOQrCG
tIQFpCX1B0lWQ0OnWTMzKalXrLSkrEmTterqC743l5pY8unTJwsLCwUFhQsX
LnAdy/+yZcuWI0eOkJZU582bNw4ODmgruA5EQGRlZeFM6N27t7OzM9exEKIN
aQkLSEv4gr+//8SJ0xo1spaSyqirlsjIuHfqNHnPnn9L1EXy8orXLhsZGU2c
OBGKwnUs/8Ha2hrJSEiCESog3n5+foqKipVfc1BWViaWF/eKioo8PT1HjRq1
YsUKSauSBN8hLWEBaQlfKCgo+Ne/9g0cOL1x4+1SUrl10ZKbTZoobdpkLSGj
SiqD9v/SpUvKysobNmzgOpb/QFryPaAf4eHhixcv5r0iB37y8OHD2NhYbgNr
CK5fv66urq6jo0OvKSTqD2kJC0hL+AXS2bZtzn36TG3ceKOU1Mfa3LuRkTna
pMkEExOLFy9eCO3r9hqUDx8+7NixY/DgwSEhIVzHUm5jYwMtEdpJaLklPT39
9OnTc+fOZf4MDg52cXERhqPGX8LCwgwMDDQ1NW/dukWXSoj6Q1rCAtISfoEe
JTqP+/YdVFDQkpXVlZHxrLihU32Ota8Vl1OCmzRZ3anTpM2bt8JJhGfYp4Ap
KipCaps+ffq8efM4FzNbW1vSku+BHB0RETF+/Hic5KWlpWvXrlVXVxez9wsn
Jiaam5tju9zd3XNycrgOhxAHSEtYQFrCXz59+nT+/IUlS0zl5GbLyCxv0mSX
tPRFKanbUlIPpKTuSEt7y8oeatx4bdu287S09Pfu3R8fH895OuYWdMOPHTvW
q1evGzducDuLJrTk8OHDpCWVSUtLi46OZm5s4UhZWFjs3bsXJ62ysnK/fv1O
nTrFdYB8Izs728nJadq0adu3b6dzgOAXpCUsIC3hO4WFhZGRkXv3HjA2XqKm
pjt0qGGvXst+/31ljx7LBw1aPGmSvp7eIisr67t370q4kDCUlZUhzWloaKCX
mpqayuEoyq1bt0JL0GXmKgAhJCUl5erVqy4uLl5eXo8ePQoMDERzsX//fjk5
uY4dOx49epTrAPkDfPj48eNTpkxZt27d69evuQ6HEB9IS1hAWtJAIL2i/4Vm
3MPj2I4dLps3b7W3337okNuNGzfi4uLE8hEG1uTl5fn4+HTq1On27dv5+flc
hWFnZ0daUgWcqEFBQbNmzerTp4+hoSE8pHfv3goKCq1bt27ZsuXBgwfFYE4P
bCPq6cSJE42MjB4/fiwGW0QID6QlLCAtIYQBmMno0aONjY3fv3/PlbPZ29tD
S4Tz7cYcUlhY6O3tPWTIkKZNm/7000+///578+bNZWRk8O/du3dzqJF8ARIS
ExODNlBNTe3Bgwd0AZPgL6QlLCAtIYSB0tJSDw+PP/74A/1W5EFOYnBwcHBz
c5OcuUxrT3Z29rlz5yAk0tLSaFSZ/7dq1crGxkakZ5+Dk6SkpBgYGPTt2/fO
nTuirliEEEJawgLSEkJIgI0MGDDA3Nw8KiqKkwBIS2ogNTX10KFDrVu3lvr/
tGzZ0szM7O3bt1yHxp60tLQdO3Y0bdrU39+fnIRoCEhLWEBaQggPBw8eHDRo
0NWrVzmZMmLbtm2kJTWAJG5qatqqVSvmakmjRo1mz54tulOXfPr0ycnJqW3b
tsePH6cpSogGgrSEBaQlhPCALvnYsWM3bdoUHR0t+LU7OjpCS4TqpcZCRVlZ
WXJy8qhRo1q0aMGYiZKSEhyS67jY8PHjx507d/71119w0dzcXK7DIcQW0hIW
kJYQwgMSn6WlpZaWlq+vr+DXDi1xdXUlLamBr1+/Pnr0qH///k2aNEHrOmDA
gGPHjnEdVJ1JSkpCuzdhwgQIsEiPjSGEH9ISFpCWEEJFYGCgsrIyerLZ2dkC
XvX27duhJRL4cqI6UVJScuLEib59+zZq1KhLly67d+/mOqK6kZqaum/fvunT
p69Zs4aTi3KEREFawgLSEkKoyMzMnD9//rJly548eSLgVe/YsYO0pDZkZWXZ
2dn17t27devWtra2XIdTB9LT0w8ePKihoWFmZvb8+XOuwyHEH9ISFpCWEMIG
zklNTc2jR48KeGIrRkvovbG1ISYmxsjI6Ndff123bl1paSnX4dSKtLQ0Nze3
f/75Z+XKlY8ePeI6HEIiIC1hAWkJIWw8efJk1qxZ5ubmqampglyvk5MTaUnt
CQgIQIpfv369SLzVLj09/ciRIyoqKkuXLg0JCaFplgnBQFrCAtISQtgoLCy0
sLCYM2dOUFCQINfr7Ox86NCh2NhYQa5UpDl16hRyvZCPGmVeA3Hs2LERI0Ys
WbLk6dOnQuUkJSUlUKaUlJS8vDyuYyH4D2kJC0hLCCHEw8Nj9uzZODkFuVLS
krpSVFSUlpaGrMp1IN8FBpKTk3PhwoXu3bvDSSIjI4XKSQDOt8OHD+PEe/36
dV1jKy0tzalAtObMx2Yi8rKyshq2F1uUm5tbn03DD79U0BA3GVF4VgU/XJK0
hAWkJYQQEhoaumDBgsWLFwtynisXFxdkh5iYGIGtkWhokNfOnz/fvHlzU1PT
pKQkrsOpCvKyvr5+hw4dEB6L+XLj4uJw0u7evfvVq1cNEV4DAd9ITEzE4cjP
z/+emUDSDh48iPT07Nkzdmt5+fLltm3bnJycGuK4v3nzZt26dZaWlj9ckrSE
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
2bfPtH17bRGRp2RvlXxo3Xrz8uW6QjpLGkGqBbWEBKgliFBQWFjYsWPH8+fP
82/ZT3t7e75qiZeX15IlS7Zt2ybUE3DY8fPzV1NbKSW1k0b7UXst+SkhcWr8
eI2bN28J+jgQhF+glpAAtQQRFoYOHXr48OG4uDg+pQ9aApcDn7SEwWBA5ufN
m+fu7s6P9AVCbm6utbVN587/iYicp9FyauMkeSIiN/79d6GhoXEDX821VhQU
FPwsBVeEQwhQS0iAWoIIC7Nmzdq+fXvl9bGp4urVq3A5BAUF8SPxb9++6erq
amlpNfC38tWW5ORkc/PDUlLDabSbNFpRzZykmEbzlZCYuXatPl9nfNcnxcXF
4CTv3r0zMzM7dOgQueXZkcYHagkJUEsQYWHt2rU6Ojr8G5Lq4OBw6tSp9+/f
8yNxNzc3DQ0NCwsLfiQuWJKSkqysrJo16yomZkyj5dJoTJ5OkisiclxaesjW
rdtYLw4WdjIzM8Fpp02b1rt378WLF9+7d4/jfTRIkwW1hASoJYiwYGpqqqam
xr9ZG46OjvzTkt27dy9btgwCFj8SFyzFxcVpaWl37rj37z9WUnIonW5TusZa
QUUbKaLRUmi0y5KSY3r3Vjx79nxCQoKwr+wK+Y+Ojt63b9+gQYOUlZUPHjz4
+vXrnz9/5ufn40MchAC1hASoJYiwYGNjM3ny5GfPnvEp/WvXroGWvHv3jvKU
ExMT1dXVN23aFBsbS3niDQEwk+zs7JCQEAuLo0OGzJWWHi0pOUdaeo2EhLGE
xB4pqfXS0gvExBT69Zt14MChwMAX6enpQu0kGRkZ3t7e69evHzVq1OrVqx0c
HMBmU1JSWC8IRhAC1BISoJYgwoKbm5uCgoKvry+f0uefljx48GDOnDlWVlaN
+94+MY/76dNnTk7Ohw8f3bTJWEdns7b2JgMDo/37zSF2P3r0OC4uTnjHXUDO
P336dO7cOT09vcWLFxsbGzs5OYGQCLtlIfwDtYQEqCWIsPDkyZP+/ft7eHjw
aYLt9evXQUvevn1LecrHjx9ftGjRjRs3KE+5YZKfnw9+AhEcHA/KMywsLCYm
Jjc3V9D5Ik92dnZAQIClpeWaNWtWrVq1d+9eZ2fnDx8+5OXlCTprSIMGtYQE
qCWIsABhrl+/fteuXeNTgIOeLz+0BCRqxYoV69ate/nyJbUpI/wGzl1ycrKX
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
ylTJJWN2XH80nKwBCgolqdk8eJSWEu6iPWvSll3WetvHSUjvfvJ3/axqQnyt
avtfLWGUFvgWDaWlM+VVxnbtPMdA3dr7UVWxgPE15Ob6HWojoMSmT+ve+X/q
k8xcXHmUAGoJD3hoSeG7+1vlqulwpdrsKhMD9trOTnai94I5JXNXZSRn7dly
97Grq+uTB6ccdvXrUxb8/5tk9yg4cKN26bTNskVRirwvzxhYYb2UClqSHnp+
3Jy//sB5couCt8xmzxVc1Dkh15fKtlxibnZrx97RxIwV9lW/chM9Jo8sTU1E
0/bco0eQSX+/C7ePj1Uu86V1K58kUPTgSuBawigblUrQ3/RiFiViwqYlfwrS
PCd2gMTlzR1yKl+XaSEH1U3iiau7ai0hlhFwmDW3ZPZX5UrIZGT731gvW1pp
X2d/ObRikoV1WYhkMlLOmpXMa1iz5RN7bcyIf3njubfR3lmSlWoUR4IvM4K3
Txl7/MKXzNIEGbnfDmzuS6dPsriazsj7ZFTFJi4DrpjZ966v6SA93/LYR1b4
zs0IO3pkjqzcuuve2ex/AlfKnA4zTl1lb8qYabHeC1RkSPTdqtYSZkKY/cRR
0hrqdz6VdzlB6ny9DvSXHrXNKPgnt4YU4u/18yvaiCjo6z/+9p34K2Zm6oeT
lsr9//NhX5guI+rajBGmt9xZR8H4Gnp96iR6x3a7HnAOWuZ1iiktjcIg3709
Jdss1/KNKss8IzrIbuIEESWFi8G1GaVPbSUpzot7+Mj/rIthd1muly0jMdJ5
fH/i6sgOc1s0Q+teeNkpKwx9bNJVhjZM/tLHCneuq7lq8rK/mGwumTgJDXVc
6NmpYw/7BmaXXolQti6wry7tTJ/FMjPD7aZXsYlL4WYHG63vL9vHzNOfFbIh
oN/WmC+tPPZqaK0nQZSerB70mTPciPoJlfPGhWX/0HuMGe4QVVLTih9fnSNR
4RkxjxBf69pe1pBKbDttPWWsqiPLXhh5KXfcNnWk99bVelopFhQ+dZqqpOH2
rnx+H0ipV8mX6TMrXh1soJbwoKKWiGlZ7jl2zMTExM5Kx1i9dWlMrv4+MDNq
yzzuWlKcF7x6LiEPHTYfTmbzTGb0E+O2pRu6tD/8MrPg6Y2VbeAkzvRP/hsj
mU+vzhHnpiUEv6Ivs6Irl5P7N1e9jM+c6t/c4G4ItIrfD68plxn6Go8vZdn0
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
AAAAAAAAAAAAAADw3/M3Fvp4RQ==
    "], {{0, 470}, {733, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{550.9636363636372, Automatic},
  ImageSizeRaw->{733, 470},
  PlotRange->{{0, 733}, {0, 470}}]], "Input",
 CellChangeTimes->{{3.709470347139618*^9, 3.709470397164242*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Source Code", "Subsection",
 CellChangeTimes->{{3.6945082211811686`*^9, 3.6945082350165057`*^9}, {
   3.694508353277437*^9, 3.694508357986554*^9}, {3.694509485037609*^9, 
   3.6945095303971586`*^9}, 3.6981358145867968`*^9}],

Cell[BoxData[
 RowBox[{"ClearAll", "[", 
  RowBox[{"DGOptSolverFobj", ",", "DGOptSolver"}], "]"}]], "Input",
 CellChangeTimes->{{3.69813587956089*^9, 3.698135900942071*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DGOptSolverFobj", "[", 
   RowBox[{"i_", ",", "j_", ",", "d_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "=", "0"}], ",", "numberOfAtoms", ",", "ncols", ",", 
      "nrows", ",", "k", ",", "y"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"y", "=", 
      RowBox[{"ArrayReshape", "[", 
       RowBox[{"x", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "x", "]"}], "/", "3"}], ",", "3"}], "}"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"k", "=", "1"}], ",", 
       RowBox[{"k", "\[LessEqual]", 
        RowBox[{"Length", "[", "d", "]"}]}], ",", 
       RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"f", "+=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"d", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{
              RowBox[{"y", "[", 
               RowBox[{"[", 
                RowBox[{"i", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "-", 
              RowBox[{"y", "[", 
               RowBox[{"[", 
                RowBox[{"j", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}]}], "]"}], "^", 
            "2"}]}], ")"}], "^", "2"}]}]}], "\[IndentingNewLine]", "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "f", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGOptSolver", "[", "G_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "numberOfAtoms", ",", "f", ",", "y", ",", "v", ",", "w", ",", "i", ",", 
      "j", ",", "d"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", "j", ",", "d"}], "}"}], "=", 
      RowBox[{"DGGraphGetIJD", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numberOfAtoms", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"{", 
        RowBox[{"i", ",", "j"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ClearAll", "[", "z", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"y", "=", 
      RowBox[{"Array", "[", 
       RowBox[{"z", ",", 
        RowBox[{"3", "*", "numberOfAtoms"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"f", ":=", 
      RowBox[{
       RowBox[{"DGOptSolverFobj", "[", 
        RowBox[{"i", ",", "j", ",", "d", ",", "#"}], "]"}], "&"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v", ",", "y"}], "}"}], "=", 
      RowBox[{"NMinimize", "[", 
       RowBox[{
        RowBox[{"f", "[", "y", "]"}], ",", "y"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"y", "=", 
      RowBox[{"ArrayReshape", "[", 
       RowBox[{"y", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "y", "]"}], "/", "3"}], ",", "3"}], "}"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"y", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"y", "[", 
           RowBox[{"[", "iloc", "]"}], "]"}], "[", 
          RowBox[{"[", "jloc", "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"iloc", ",", 
          RowBox[{"Length", "[", "y", "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"jloc", ",", "3"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "y", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJwl0G1IU3EUBvC10AqKEBGNcuxmiDJ1mHmFJdF6AbdCxrq9KFrOUJsKRY3I
EExmJisj8u72cvU65wcjkGEur9SHcBGVisxc2IvaWFtik2WNBk2D7vPvw+EH
h4dzOIeqPm+skctksjyp4Fqvq+pBe1jb4XGaoCFovQrtqmXizOn7LZB2jbVC
YSHDBtnsA7dJXk874I9kfhTm3PjkgRWLCa+gWagMkfn2CeKkmPobKjL3EQ3b
N8Rh73iMWG7ZuvEh9vhWNsES2yIHvy5HiGyQEuGH0rwx+Cdr+v2wZOeV8Cxc
mW7yw2bhUgie6vtucEsyujNGGOj/XAan1EMm+C5WXgcHXzc1ws2HuGdwMuoh
+oTxl/CcanYGptd756FbTy1B+fqEKNxd4FyF1KO3257iDm9zOuzv2ZEFM125
anh5z7oCWE2XFMI5pVsDb70o3gvv0kVaWDGceASqjmsqYd1jtgauFVnNsCfp
ZgP8q/logQwTb4PxnwsdUMm334P5J8Vu6IvxLpLjDo7AtIYyEW4RlkKwS6b4
Bdt0zCr0MmeJ81qHfETyy2FdErwgpKRA/9CxNFh/LaKEiYHSDNK/cyIbPndU
EVkfT8NgzgCxNrCzGEbMtcTuCfuUiL9wrV64q1BhsXaGtUdH/2szDpqcknPJ
T4iUwJmhJnSxEer96hb4Zv83Yn70ehfU9fEs/AeJrpd4
  "]]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples", "Subsection",
 CellChangeTimes->{{3.694443377092915*^9, 3.69444339110975*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Example", " ", 
    RowBox[{"C", ":", " ", 
     RowBox[{
     "Solving", " ", "an", " ", "instance", " ", "with", " ", "5", " ", 
      "points", " ", "using", " ", "optimization", " ", "based", " ", 
      "method"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "=", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "3"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eij", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGProblem", "[", 
      RowBox[{"x", ",", "eij"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"y", "=", 
     RowBox[{"DGOptSolver", "[", 
      RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DGRelativeResidue", "[", 
     RowBox[{
      RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "y", ",", "True"}], "]"}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6981360211258264`*^9, 3.6981360483600693`*^9}, {
   3.6981360788457885`*^9, 3.6981360876976595`*^9}, {3.6981362425377584`*^9, 
   3.6981362793146505`*^9}, 3.700314325248334*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.732761", ",", "0.169653", ",", "0.656641"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.246863", ",", "0.660452", ",", "0.742898"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.426759", ",", "0.729058", ",", "0.897434"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.100975", ",", "0.670080", ",", "0.241258"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.204643", ",", "0.236955", ",", "0.655968"}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eij", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", 
    RowBox[{"x", ",", "eij"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGPrintGraph", "[", 
   RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGOptSolver", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.698136335320798*^9, 3.698136365971901*^9}, 
   3.698136419643999*^9, {3.6981365233312697`*^9, 3.6981365309578285`*^9}, 
   3.6982328271785564`*^9, 3.698233064588676*^9, 3.6982342865286937`*^9, 
   3.700314325301742*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Example", " ", 
    RowBox[{"D", ":", " ", 
     RowBox[{
     "Solving", " ", "an", " ", "instance", " ", "with", " ", "100", " ", 
      "points", " ", "using", " ", "optimization", " ", "based", " ", 
      "method"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "It", " ", "can", " ", "take", " ", "a", " ", "lot", " ", "of", " ", 
    RowBox[{
     RowBox[{"time", "!!"}], "!"}]}], " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"k", "=", "1"}], ",", 
     RowBox[{"k", "\[LessEqual]", "100"}], ",", 
     RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "k", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"7", ",", "3"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"eij", "=", 
       RowBox[{"MDGAllPairs", "[", 
        RowBox[{"Length", "[", "x", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"eij", "=", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"eij", ",", 
         RowBox[{"Round", "[", 
          RowBox[{"0.50", 
           RowBox[{"Length", "[", "eij", "]"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", "j", ",", "d"}], "}"}], "=", 
       RowBox[{"MDGCreateInstanceFromSolutionAndPairs", "[", 
        RowBox[{"x", ",", "eij"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"y", "=", 
       RowBox[{"MDGOptSolver", "[", 
        RowBox[{"i", ",", "j", ",", "d"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"f", "=", 
       RowBox[{"CheckMDGSolution", "[", 
        RowBox[{"i", ",", "j", ",", "d", ",", "y", ",", "False"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Or", "[", 
         RowBox[{
          RowBox[{"f", ">", "0.01"}], ",", 
          RowBox[{
           RowBox[{"Mod", "[", 
            RowBox[{"k", ",", "10"}], "]"}], "\[Equal]", "0"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<{Seed,Error}=\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "f"}], "}"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   "\[IndentingNewLine]", "*)"}]}]], "Input",
 CellChangeTimes->{{3.694509866767895*^9, 3.6945098916890173`*^9}, {
   3.694510093362407*^9, 3.6945101089935975`*^9}, {3.694510169324609*^9, 
   3.6945101956066246`*^9}, {3.69451025730608*^9, 3.6945103028323336`*^9}, {
   3.694510333348612*^9, 3.6945103372228565`*^9}, {3.694510375701194*^9, 
   3.6945103983735256`*^9}, {3.6945104397134395`*^9, 
   3.6945105412985134`*^9}, {3.6945116235631905`*^9, 
   3.6945117051807966`*^9}, {3.694511748936102*^9, 3.694511751267356*^9}, {
   3.694511828015873*^9, 3.69451182813148*^9}, {3.6945118732869487`*^9, 
   3.6945119184429393`*^9}, {3.694512052222779*^9, 3.694512063708476*^9}, {
   3.694512108959667*^9, 3.694512122482854*^9}, {3.6945122224563627`*^9, 
   3.6945122549831843`*^9}, {3.6945122929003396`*^9, 3.6945123044169874`*^9}, 
   3.6945123946710157`*^9, {3.6945124631794453`*^9, 3.6945125052038*^9}, {
   3.6945126788009663`*^9, 3.6945126790627346`*^9}, {3.6945130547371454`*^9, 
   3.6945130548839865`*^9}, {3.6945135081915073`*^9, 3.694513508353938*^9}, {
   3.694519946259391*^9, 3.6945199465126286`*^9}, {3.6945256242761097`*^9, 
   3.6945256246907053`*^9}, {3.694525800598526*^9, 3.6945258010835543`*^9}, {
   3.6957188810695877`*^9, 3.695718892192297*^9}, {3.6959992062308846`*^9, 
   3.695999250403311*^9}, {3.69807248104105*^9, 3.6980724810570617`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["DGAllEdgesSolver - Solver for complete distance matrices", "Section",
 CellChangeTimes->{{3.694440270104432*^9, 3.6944402903355665`*^9}, {
   3.694508362021762*^9, 3.6945083745408287`*^9}, {3.6945086248727016`*^9, 
   3.694508627838993*^9}, {3.6945094785730658`*^9, 3.6945094800751905`*^9}, {
   3.6945095153284197`*^9, 3.6945095197760963`*^9}, {3.6981344064787574`*^9, 
   3.6981344229460754`*^9}, 3.7003220682508497`*^9}],

Cell[CellGroupData[{

Cell["Main concepts", "Subsection",
 CellChangeTimes->{{3.698134238989613*^9, 3.698134242903209*^9}, 
   3.7094665937853384`*^9}],

Cell[CellGroupData[{

Cell["General idea", "Subsubsection",
 CellChangeTimes->{{3.709465577499*^9, 3.70946560433134*^9}, {
  3.7094666034257517`*^9, 3.7094666078966484`*^9}, {3.7094667051407757`*^9, 
  3.7094667208634553`*^9}, {3.709469242957382*^9, 3.7094692452832413`*^9}, {
  3.7094709664941397`*^9, 3.709470986290042*^9}, {3.709471493242118*^9, 
  3.709471513977575*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"The", " ", "matrix"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  StyleBox["D",
   FontSlant->"Italic"], 
  StyleBox["=",
   FontSlant->"Italic"], 
  RowBox[{
   StyleBox[
    SubscriptBox[
     RowBox[{"[", 
      SubscriptBox["d", "ij"], "]"}], 
     RowBox[{"n", "\[Times]", "n"}]],
    FontSlant->"Italic"], "  ", "=", 
   SubscriptBox[
    RowBox[{"[", 
     RowBox[{"||", 
      RowBox[{
       SubscriptBox["x", "i"], "-", 
       SubscriptBox["x", "j"]}], "||"}], "]"}], 
    RowBox[{
     RowBox[{"n", "\[Times]", "n"}], 
     "\[IndentingNewLine]"}]]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"must", " ", "be", " ", "known", " ", 
    RowBox[{"(", 
     RowBox[{"all", " ", "distances", " ", "are", " ", "given"}], ")"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"From", " ", "D"}], ",", " ", 
   RowBox[{
   "it", " ", "is", " ", "possible", " ", "to", " ", "create", " ", "a", " ", 
    "matrix", "  ", "M", "  ", "such", " ", "that"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"M", "=", 
    RowBox[{
     SuperscriptBox["X", "t"], "X"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "By", " ", "doing", " ", "the", " ", "diagonalization", " ", "of", " ", 
    "the", " ", "symmetric"}], ",", 
   RowBox[{"positive", " ", "semidefinte", " ", "matrix", " ", "M"}], ",", 
   " ", 
   RowBox[{"we", " ", "get"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"M", "=", 
    RowBox[{
     SuperscriptBox["V", "t"], "SV"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Finally", ",", " ", 
   RowBox[{
   "the", " ", "solution", " ", "X", " ", "is", " ", "given", " ", "by"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{
    SuperscriptBox["S", 
     RowBox[{"1", "/", "2"}]], "V"}]}], ";"}]}], "Text",
 CellChangeTimes->{{3.709469382050675*^9, 3.709469599132248*^9}, {
  3.709469785822062*^9, 3.709469803624137*^9}, {3.7094699947486534`*^9, 
  3.7094700397214284`*^9}, {3.709470086725078*^9, 3.7094702874048223`*^9}, {
  3.7094703757835827`*^9, 3.709470383110248*^9}, {3.709470689377967*^9, 
  3.7094707919166336`*^9}, {3.7094709766888742`*^9, 3.709471276383041*^9}, {
  3.7094713512336245`*^9, 3.7094714794163933`*^9}, {3.7094736650992675`*^9, 
  3.709473683644473*^9}},
 FontSize->18]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Source Code", "Subsection",
 CellChangeTimes->{{3.698135035451965*^9, 3.6981350399559503`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DGAllEdgesSolver", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGAllEdgesSolver", "[", "G_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "numberOfAtoms", ",", "k", ",", "m", ",", "\[Lambda]", ",", "v", ",", 
      "x", ",", "i", ",", "j", ",", "d"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", "j", ",", "d"}], "}"}], "=", 
      RowBox[{"DGGraphGetIJD", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numberOfAtoms", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"{", 
        RowBox[{"i", ",", "j"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"creates", " ", "distance", " ", "matrix"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"m", "=", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"iloc", ",", "numberOfAtoms"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"jloc", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"k", "=", "1"}], ",", 
       RowBox[{"k", "\[LessEqual]", 
        RowBox[{"Length", "[", "i", "]"}]}], ",", 
       RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"m", "[", 
           RowBox[{"[", 
            RowBox[{"i", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"j", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "=", 
         RowBox[{"d", "[", 
          RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"m", "[", 
           RowBox[{"[", 
            RowBox[{"j", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"i", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "=", 
         RowBox[{"d", "[", 
          RowBox[{"[", "k", "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"\[Lambda]", ":", 
       RowBox[{"eigenvalues", " ", "and", " ", "v"}], ":", "eigenvectors"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"m", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "iloc", "]"}], "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "jloc", "]"}], "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "iloc", "]"}], "]"}], "[", 
             RowBox[{"[", "jloc", "]"}], "]"}], "^", "2"}]}], ")"}], "/", 
         "2"}], ",", 
        RowBox[{"{", 
         RowBox[{"iloc", ",", "numberOfAtoms"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"jloc", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Lambda]", ",", "v"}], "}"}], "=", 
      RowBox[{"Eigensystem", "[", 
       RowBox[{"m", ",", "3"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"getting", " ", "solution"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"x", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Sqrt", "[", 
          RowBox[{"\[Lambda]", "[", 
           RowBox[{"[", "jloc", "]"}], "]"}], "]"}], 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "jloc", "]"}], "]"}], "[", 
          RowBox[{"[", "iloc", "]"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"iloc", ",", "numberOfAtoms"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"jloc", ",", "3"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "x", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.6945071563672113`*^9, 3.694507320236541*^9}, {
   3.694507374181988*^9, 3.6945074899994063`*^9}, {3.694508412302476*^9, 
   3.694508475668783*^9}, {3.694508530004429*^9, 3.694508561182579*^9}, {
   3.6959987033856926`*^9, 3.695998723358347*^9}, 3.698072480922473*^9, {
   3.6981333587577276`*^9, 3.698133359033911*^9}, {3.698133390002452*^9, 
   3.6981334023261256`*^9}, {3.698135717156601*^9, 3.6981357371274214`*^9}, {
   3.700322084102275*^9, 3.7003220841179*^9}, 3.702205777346334*^9, {
   3.702205852832011*^9, 3.702205863962781*^9}, {3.702205920478272*^9, 
   3.7022059370982065`*^9}, {3.702207236434928*^9, 3.7022072566342735`*^9}, {
   3.702717536736679*^9, 3.7027175405832577`*^9}, {3.7027176883324986`*^9, 
   3.702717699885353*^9}, {3.7027178659989595`*^9, 3.702717868829978*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples", "Subsection",
 CellChangeTimes->{{3.698135059085639*^9, 3.6981350698968105`*^9}}],

Cell[CellGroupData[{

Cell["Example: 5 points and 4 constraints where DGNSolver fails", \
"Subsubsection",
 CellChangeTimes->{{3.6981342903376694`*^9, 3.6981343031896935`*^9}, {
   3.6981344697819333`*^9, 3.698134470007082*^9}, {3.698136136952828*^9, 
   3.6981361465947227`*^9}, 3.7095499903540573`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"x", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.732761", ",", "0.169653", ",", "0.656641"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"0.246863", ",", "0.660452", ",", "0.742898"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"0.426759", ",", "0.729058", ",", "0.897434"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"0.100975", ",", "0.670080", ",", "0.241258"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"0.204643", ",", "0.236955", ",", "0.655968"}], "}"}]}], 
      "\[IndentingNewLine]", "}"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"x", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.526000000000000"}], ",", "0", ",", "0"}], "}"}], ",", 
      "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2.033755510908970"}], ",", " ", "1.439048415148556", 
        ",", "0"}], "}"}], ",", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "3.559719882819027"}], " ", ",", "1.439060986205111", 
        ",", "0.010427631711570"}], "}"}], ",", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "4.076155173310602"}], " ", ",", "0.764476592552454", 
        ",", 
        RowBox[{"-", "1.257210521144031"}]}], "}"}], ",", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "3.578831769689775"}], " ", ",", "1.531380885110071", 
        ",", 
        RowBox[{"-", "2.479177475798574"}]}], "}"}], ",", "\n", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "4.053530057464236"}], " ", ",", "2.979379151615945", 
        ",", 
        RowBox[{"-", "2.397700142877220"}]}], "}"}]}], "\[IndentingNewLine]", 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGProblem", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DGPrintGraph", "[", 
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"x", "=", 
     RowBox[{"DGAllEdgesSolver", "[", 
      RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DGRelativeResidue", "[", 
     RowBox[{
      RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.698135080509349*^9, 3.6981351226262827`*^9}, {
   3.698135768710869*^9, 3.698135776496533*^9}, 3.698232827201572*^9, 
   3.698233064605688*^9, 3.6982342865326967`*^9, 3.7003143253707542`*^9, 
   3.700322084150173*^9, {3.7022067183952436`*^9, 3.7022067807644897`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: 100 points all constraints", "Subsubsection",
 CellChangeTimes->{{3.6981342903376694`*^9, 3.6981343031896935`*^9}, {
  3.6981344697819333`*^9, 3.698134470007082*^9}, {3.698136155945425*^9, 
  3.6981361596994143`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "3"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"tElapsed", "=", 
  RowBox[{
   RowBox[{"Timing", "[", 
    RowBox[{"x", "=", 
     RowBox[{"DGAllEdgesSolver", "[", 
      RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6981361619569116`*^9, 3.69813618311895*^9}, 
   3.700314325402018*^9, 3.700322084181426*^9, 3.7027175502076855`*^9, {
   3.7027291828911524`*^9, 3.702729248795787*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3) Ordering, BuildUP, BP and IBP", "Chapter",
 CellChangeTimes->{
  3.6896820831181965`*^9, {3.6957184087362404`*^9, 3.695718419041832*^9}, {
   3.698067376091146*^9, 3.6980673786551833`*^9}, {3.698080445180032*^9, 
   3.698080464298929*^9}, {3.6980805484661093`*^9, 3.6980805555092807`*^9}, {
   3.6981366838232155`*^9, 3.6981367362664995`*^9}, 3.6982697383364143`*^9, {
   3.698278975629528*^9, 3.6982789823035517`*^9}},
 Background->RGBColor[1, 1, 0.85]],

Cell[CellGroupData[{

Cell[TextData[{
 "Ordering\n",
 StyleBox["DGOrdering, DGNaturalOrdering", "Text",
  FontSlant->"Italic"]
}], "Subchapter",
 CellChangeTimes->{{3.696934517173864*^9, 3.6969345185367727`*^9}, 
   3.6969346750258846`*^9, 3.6981366777421827`*^9, {3.698220137774626*^9, 
   3.698220138030796*^9}, {3.698268878385317*^9, 3.69826888252829*^9}}],

Cell[CellGroupData[{

Cell["Source Code", "Subsection",
 CellChangeTimes->{{3.696934578835677*^9, 3.696934581103756*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"DGOrdering", ",", "DGNaturalOrdering"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGOrdering", "[", 
    RowBox[{"G_", ",", "C_", ",", 
     RowBox[{"verbose_:", "False"}]}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Finds", " ", "an", " ", "order", " ", "such", " ", "that", " ", "all", 
      " ", "atoms", " ", "could", " ", "be", " ", "determined", " ", "by", 
      " ", "following", " ", "it"}], ";", " ", "\[IndentingNewLine]", "   ", 
     RowBox[{
      StyleBox["C",
       FontSlant->"Italic"], 
      StyleBox[":",
       FontSlant->"Italic"], " ", 
      StyleBox[
       RowBox[{
       "Initial", " ", "clique", " ", "used", " ", "to", " ", "start", " ", 
        "the", " ", "ordering"}],
       FontSlant->"Italic"]}], 
     StyleBox[";",
      FontSlant->"Italic"], 
     StyleBox["\[IndentingNewLine]",
      FontSlant->"Italic"], 
     StyleBox["   ",
      FontSlant->"Italic"], 
     StyleBox[
      RowBox[{"G", ":", " ", 
       RowBox[{"Instance", " ", "graph"}]}],
      FontSlant->"Italic"], 
     StyleBox[";",
      FontSlant->"Italic"]}], 
    StyleBox["\[IndentingNewLine]",
     FontSlant->"Italic"], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "i", ",", "j", ",", "k", ",", "neighs", ",", "nAtoms", ",", 
       "nFixedAtoms", ",", "nFixedNeighs", ",", "atomsToBeFixed", ",", 
       "atomOrder", ",", " ", "order", ",", "minNeighsToBeFixed"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"initial", " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"minNeighsToBeFixed", "=", 
       RowBox[{"Length", "[", "C", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"nAtoms", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nFixedNeighs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nAtoms"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"atomOrder", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nAtoms"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"atomsToBeFixed", "=", "C"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nFixedNeighs", "[", 
        RowBox[{"[", "C", "]"}], "]"}], "=", "Infinity"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nFixedAtoms", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "atomsToBeFixed", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"verbose", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<nFixedNeighs=\>\"", ",", "nFixedNeighs"}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<atomsToBeFixed=\>\"", ",", "atomsToBeFixed"}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"i", "=", 
          RowBox[{"First", "[", "atomsToBeFixed", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"remove", " ", "the", " ", "first", " ", "element"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"atomsToBeFixed", "=", 
          RowBox[{"Rest", "[", "atomsToBeFixed", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"skipped", ":", " ", 
           RowBox[{"already", " ", "fixed"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"atomOrder", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ">", "0"}], ",", 
           RowBox[{"Continue", "[", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"verbose", ",", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<Fixing: \>\"", ",", "i"}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"atomOrder", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "=", 
          RowBox[{"++", "nFixedAtoms"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"verbose", ",", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<atomOrder=\>\"", ",", "atomOrder"}], "]"}]}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"update", " ", "neighs", " ", "score"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"neighs", "=", 
          RowBox[{"AdjacencyList", "[", 
           RowBox[{"G", ",", "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"verbose", ",", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<neighs=\>\"", ",", "neighs"}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"k", "=", "1"}], ",", 
           RowBox[{"k", "\[LessEqual]", 
            RowBox[{"Length", "[", "neighs", "]"}]}], ",", 
           RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"j", "=", 
             RowBox[{"neighs", "[", 
              RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"nFixedNeighs", "[", 
              RowBox[{"[", "j", "]"}], "]"}], "++"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"atomOrder", "[", 
                 RowBox[{"[", "j", "]"}], "]"}], "\[Equal]", "0"}], "&&", 
               RowBox[{
                RowBox[{"nFixedNeighs", "[", 
                 RowBox[{"[", "j", "]"}], "]"}], "\[GreaterEqual]", 
                "minNeighsToBeFixed"}], " ", "&&", 
               RowBox[{"Not", "[", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"atomsToBeFixed", ",", "j"}], "]"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"AppendTo", "[", 
                RowBox[{"atomsToBeFixed", ",", "j"}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"nFixedAtoms", "\[NotEqual]", "nAtoms"}], ",", 
        RowBox[{
        "Throw", "[", 
         "\"\<InvalidOrdering: It has not been possible the set \
ordering.\>\"", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"order", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"i", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nAtoms"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"order", "[", 
        RowBox[{"[", "atomOrder", "]"}], "]"}], "=", "order"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "order", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGNaturalOrdering", "[", "G_", "]"}], ":=", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{"#", "&"}], ",", 
     RowBox[{"Length", "[", 
      RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6980611506193595`*^9, 3.698061152492004*^9}, 
   3.698072481134613*^9, {3.698136626484687*^9, 3.6981366266763134`*^9}, {
   3.69813681557358*^9, 3.698136816036886*^9}, {3.698137537734437*^9, 
   3.698137590182723*^9}, {3.698235991898496*^9, 3.6982360627464857`*^9}, {
   3.6982361166922655`*^9, 3.698236179383627*^9}, {3.6982362219318867`*^9, 
   3.698236263425408*^9}, {3.698268890318713*^9, 3.6982689596448994`*^9}, 
   3.6982762453630505`*^9, 3.7095499454309683`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsection",
 CellChangeTimes->{
  3.696335250480235*^9, {3.6963366417863913`*^9, 3.6963366443081226`*^9}, {
   3.69693446673809*^9, 3.6969344703216915`*^9}, {3.6969345925486455`*^9, 
   3.6969345996344643`*^9}}],

Cell[CellGroupData[{

Cell["Simple Example: The initial ordering is ok!", "Subsubsection",
 CellChangeTimes->{{3.696934614705723*^9, 3.6969346254263096`*^9}, {
  3.6981609206416388`*^9, 3.698160922002041*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"G", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
      RowBox[{"1", "\[UndirectedEdge]", "3"}], ",", 
      RowBox[{"1", "\[UndirectedEdge]", "4"}], ",", 
      RowBox[{"1", "\[UndirectedEdge]", "5"}], ",", 
      RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
      RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
      RowBox[{"2", "\[UndirectedEdge]", "5"}], ",", 
      RowBox[{"3", "\[UndirectedEdge]", "4"}], ",", 
      RowBox[{"3", "\[UndirectedEdge]", "5"}], ",", 
      RowBox[{"4", "\[UndirectedEdge]", "5"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"GraphPlot", "[", 
    RowBox[{"G", ",", 
     RowBox[{"VertexLabeling", "\[Rule]", "True"}]}], "]"}], ",", 
   RowBox[{"DGPlotAdjacencyMatrix", "[", 
    RowBox[{"G", ",", "True"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
 RowBox[{"i", "=", 
  RowBox[{"DGOrdering", "[", 
   RowBox[{"G", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", "True"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.6963351391970744`*^9, 3.6963351781245375`*^9}, {
   3.6963352250157614`*^9, 3.6963352441326723`*^9}, {3.6966991356467*^9, 
   3.6966991599848185`*^9}, {3.696699212467594*^9, 3.696699212567856*^9}, 
   3.696699760565385*^9, {3.69669979452897*^9, 3.6966998652771873`*^9}, {
   3.6967008913917418`*^9, 3.696700901880651*^9}, {3.696934477541465*^9, 
   3.6969344787881804`*^9}, {3.6969346029648733`*^9, 
   3.6969346047214565`*^9}, {3.6969459408755083`*^9, 3.696945941822027*^9}, 
   3.6980724811436186`*^9, {3.698136903087622*^9, 3.698136916136277*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Harder Example: The initial ordering is not valid", "Subsubsection",
 CellChangeTimes->{3.696934653673157*^9, 3.698160925305233*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"edges", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
     RowBox[{"1", "\[UndirectedEdge]", "3"}], ",", 
     RowBox[{"1", "\[UndirectedEdge]", "4"}], ",", 
     RowBox[{"1", "\[UndirectedEdge]", "7"}], ",", 
     RowBox[{"1", "\[UndirectedEdge]", "8"}], ",", 
     RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
     RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
     RowBox[{"2", "\[UndirectedEdge]", "5"}], ",", 
     RowBox[{"2", "\[UndirectedEdge]", "6"}], ",", 
     RowBox[{"2", "\[UndirectedEdge]", "8"}], ",", 
     RowBox[{"3", "\[UndirectedEdge]", "4"}], ",", 
     RowBox[{"3", "\[UndirectedEdge]", "7"}], ",", 
     RowBox[{"3", "\[UndirectedEdge]", "8"}], ",", 
     RowBox[{"4", "\[UndirectedEdge]", "6"}], ",", 
     RowBox[{"4", "\[UndirectedEdge]", "7"}], ",", 
     RowBox[{"4", "\[UndirectedEdge]", "8"}], ",", 
     RowBox[{"4", "\[UndirectedEdge]", "5"}], ",", 
     RowBox[{"5", "\[UndirectedEdge]", "6"}], ",", 
     RowBox[{"5", "\[UndirectedEdge]", "7"}], ",", 
     RowBox[{"6", "\[UndirectedEdge]", "7"}], ",", 
     RowBox[{"6", "\[UndirectedEdge]", "8"}], ",", 
     RowBox[{"7", "\[UndirectedEdge]", "8"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"G", "=", 
   RowBox[{"Graph", "[", "edges", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"LayeredGraphPlot", "[", 
    RowBox[{"G", ",", 
     RowBox[{"VertexLabeling", "\[Rule]", "True"}]}], "]"}], ",", 
   RowBox[{"DGPlotAdjacencyMatrix", "[", 
    RowBox[{"G", ",", "True"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
 RowBox[{"i", "=", 
  RowBox[{"DGOrdering", "[", 
   RowBox[{"G", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", "True"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.696699222452924*^9, 3.6966993598737216`*^9}, {
   3.6966993928242817`*^9, 3.69669964645918*^9}, {3.6966996846742587`*^9, 
   3.6966996863586435`*^9}, {3.696699787441859*^9, 3.6966997902261276`*^9}, {
   3.696699983277195*^9, 3.696700066799402*^9}, {3.6967001159283457`*^9, 
   3.6967001463737307`*^9}, {3.696700378130589*^9, 3.696700406037734*^9}, {
   3.6967008496726646`*^9, 3.696700855375781*^9}, {3.6967012062244864`*^9, 
   3.6967012420923347`*^9}, {3.6967013615844746`*^9, 3.696701364078554*^9}, {
   3.6967014049615245`*^9, 3.6967014090833235`*^9}, {3.696934481921709*^9, 
   3.696934483419512*^9}, 3.698072481153125*^9, {3.698136927274665*^9, 
   3.698136934192253*^9}, {3.700563046326106*^9, 3.700563132903144*^9}, {
   3.700563163619388*^9, 3.7005631745071526`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Intersection of spheres\n",
 StyleBox["DGIntersect3Spheres, DGIntersect4Spheres", "Text",
  FontSlant->"Italic"]
}], "Subchapter",
 CellChangeTimes->{{3.6982194666379185`*^9, 3.6982194765995255`*^9}, {
   3.698220168167163*^9, 3.6982202742700357`*^9}, {3.698220398059785*^9, 
   3.698220406529903*^9}, 3.698220659834761*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"DGIntersect3Spheres", ",", "DGIntersect4Spheres"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGIntersect3Spheres", "[", 
     RowBox[{"a_", ",", "ra_", ",", "b_", ",", "rb_", ",", "c_", ",", "rc_"}],
      "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Gets", " ", "the", " ", "2", " ", "solutions", " ", "of", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"||", 
            RowBox[{"x", "-", "a"}], "||"}], "=", "ra"}], ",", 
          RowBox[{
           RowBox[{"||", 
            RowBox[{"x", "-", "b"}], "||"}], "=", "rb"}], ",", 
          RowBox[{
           RowBox[{"||", 
            RowBox[{"x", "-", "c"}], "||"}], "=", "rc"}]}], "}"}]}], ";", 
       "\[IndentingNewLine]", "   ", 
       StyleBox["Input",
        FontSlant->"Italic",
        FontVariations->{"Underline"->True}], 
       StyleBox[";",
        FontSlant->"Italic",
        FontVariations->{"Underline"->True}], "\[IndentingNewLine]", "   ", 
       StyleBox["a",
        FontSlant->"Italic"]}], 
      StyleBox[",",
       FontSlant->"Italic"], 
      StyleBox["b",
       FontSlant->"Italic"], 
      StyleBox[",",
       FontSlant->"Italic"], 
      RowBox[{
       RowBox[{
        StyleBox["c",
         FontSlant->"Italic"], ":", " ", 
        StyleBox[
         RowBox[{"sphere", " ", "centers"}],
         FontWeight->"Plain"]}], ";", "\[IndentingNewLine]", "   ", "ra"}], 
      ",", "rb", ",", 
      RowBox[{
       RowBox[{"rc", ":", " ", 
        StyleBox[
         RowBox[{"respective", " ", "sphere", " ", "radius"}],
         FontWeight->"Plain"]}], 
       StyleBox[";",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["   ",
        FontWeight->"Plain"], 
       StyleBox["Output",
        FontSlant->"Italic",
        FontVariations->{"Underline"->True}], ";", "   ", 
       "\[IndentingNewLine]", "   ", 
       RowBox[{
        StyleBox["x",
         FontSlant->"Italic"], ":", " ", 
        StyleBox[
         RowBox[{"the", " ", "two", " ", "intersections", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ":", " ", 
            RowBox[{"positive", " ", "chirality", " ", "and", " ", 
             RowBox[{"x", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ":", " ", 
            RowBox[{"negative", " ", "chirality"}]}], ")"}]}],
         FontWeight->"Plain"]}], ";"}]}], "\[IndentingNewLine]", " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "n", ",", "A", ",", "x", ",", "p", ",", "dp", ",", "u", ",", "v", ",", 
        "w", ",", "du", ",", "dv", ",", "dw", ",", "dpu", ",", "AbsCos", ",", 
        "error"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "select", " ", "the", " ", "most", " ", "perpendicular", " ", "vertex",
         " ", "angle", " ", 
        RowBox[{"(", "stability", ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"AbsCos", "[", 
          RowBox[{"u_", ",", "v_"}], "]"}], ":=", 
         RowBox[{
          RowBox[{"Dot", "[", 
           RowBox[{"u", ",", "v"}], "]"}], "/", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Norm", "[", "u", "]"}], "*", 
            RowBox[{"Norm", "[", "v", "]"}]}], ")"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"u", ",", "v", ",", "w", ",", "du", ",", "dv", ",", "dw"}], 
          "}"}], "=", 
         RowBox[{
          RowBox[{
           RowBox[{"MinimalBy", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"AbsCos", "[", 
                  RowBox[{
                   RowBox[{"b", "-", "a"}], ",", 
                   RowBox[{"c", "-", "a"}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "a", ",", "b", ",", "c", ",", "ra", ",", "rb", ",", "rc"}], 
                  "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"AbsCos", "[", 
                  RowBox[{
                   RowBox[{"c", "-", "b"}], ",", 
                   RowBox[{"a", "-", "b"}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "b", ",", "c", ",", "a", ",", "rb", ",", "rc", ",", "ra"}], 
                  "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"AbsCos", "[", 
                  RowBox[{
                   RowBox[{"a", "-", "c"}], ",", 
                   RowBox[{"b", "-", "c"}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "c", ",", "a", ",", "b", ",", "rc", ",", "ra", ",", "rb"}], 
                  "}"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], ",", 
             "First"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"normal", " ", "to", " ", "the", " ", "plane", " ", 
          RowBox[{"(", 
           RowBox[{"u", ",", "v", ",", "w"}], ")"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"n", "=", 
         RowBox[{"Normalize", "[", 
          RowBox[{"Cross", "[", 
           RowBox[{
            RowBox[{"v", "-", "u"}], ",", 
            RowBox[{"w", "-", "u"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"A", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"v", "-", "u"}], ",", 
           RowBox[{"w", "-", "u"}], ",", "n"}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Dot", "[", 
               RowBox[{"v", ",", "v"}], "]"}], "-", 
              RowBox[{"Dot", "[", 
               RowBox[{"u", ",", "u"}], "]"}], "-", 
              RowBox[{"dv", "^", "2"}], "+", 
              RowBox[{"du", "^", "2"}]}], ")"}], "/", "2"}], ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Dot", "[", 
               RowBox[{"w", ",", "w"}], "]"}], "-", 
              RowBox[{"Dot", "[", 
               RowBox[{"u", ",", "u"}], "]"}], "-", 
              RowBox[{"dw", "^", "2"}], "+", 
              RowBox[{"du", "^", "2"}]}], ")"}], "/", "2"}], ",", 
           RowBox[{"Dot", "[", 
            RowBox[{"n", ",", "u"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"p", "=", 
         RowBox[{"LinearSolve", "[", 
          RowBox[{"A", ",", "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "select", " ", "the", " ", "factor", " ", "with", " ", "minimal", 
          " ", "canceling", " ", "effect", " ", 
          RowBox[{"(", "stability", ")"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"u", ",", "du"}], "}"}], "=", 
         RowBox[{
          RowBox[{
           RowBox[{"MaximalBy", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Abs", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"ra", "-", 
                    RowBox[{"Norm", "[", 
                    RowBox[{"p", "-", "a"}], "]"}]}], ")"}], "/", "ra"}], 
                  "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "ra"}], "}"}]}], "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Abs", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"rb", "-", 
                    RowBox[{"Norm", "[", 
                    RowBox[{"p", "-", "b"}], "]"}]}], ")"}], "/", "rb"}], 
                  "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"b", ",", "rb"}], "}"}]}], "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Abs", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"rc", "-", 
                    RowBox[{"Norm", "[", 
                    RowBox[{"p", "-", "c"}], "]"}]}], ")"}], "/", "rc"}], 
                  "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"c", ",", "rc"}], "}"}]}], "}"}]}], 
              "\[IndentingNewLine]", "}"}], ",", "First"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dpu", "=", 
         RowBox[{"Norm", "[", 
          RowBox[{"p", "-", "u"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dp", "=", 
         RowBox[{"N", "[", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"du", "+", "dpu"}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{"du", "-", "dpu"}], ")"}]}], "]"}], "]"}]}], ";"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"dp", "=", 
         RowBox[{"Re", "[", "dp", "]"}]}], "*)"}], ";", "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"p", "+", 
           RowBox[{"dp", "*", "n"}]}], ",", 
          RowBox[{"p", "-", 
           RowBox[{"dp", "*", "n"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<a=\>\"", ",", "a", ",", "\"\<  ra=\>\"", ",", "ra", ",", 
           "\"\<  b=\>\"", ",", "b", ",", "\"\<  rb=\>\"", ",", "rb", ",", 
           "\"\<  c=\>\"", ",", "c", ",", "\"\<  rc=\>\"", ",", "rc"}], "]"}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<p=\>\"", ",", "p", ",", "\"\<  dp=\>\"", ",", "dp", ",", 
           "\"\<  x=\>\"", ",", "x"}], "]"}], ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "calculating", " ", "max", " ", "relative", " ", "errors", " ", "of", 
         " ", "each", " ", "solution"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"error", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Max", "[", 
           RowBox[{"Abs", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Norm", "[", 
                  RowBox[{"a", "-", 
                   RowBox[{"x", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "-", "ra"}], 
                ")"}], "/", "ra"}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Norm", "[", 
                  RowBox[{"b", "-", 
                   RowBox[{"x", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "-", "rb"}], 
                ")"}], "/", "rb"}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Norm", "[", 
                  RowBox[{"c", "-", 
                   RowBox[{"x", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "-", "rc"}], 
                ")"}], "/", "rc"}]}], "}"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "2"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"x", ",", "error"}], "}"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGIntersect4Spheres", "[", 
    RowBox[{
    "a_", ",", "ra_", ",", "b_", ",", "rb_", ",", "c_", ",", "rc_", ",", "d_",
      ",", "rd_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "error", ",", "errd1", ",", "errd2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "error"}], "}"}], "=", 
       RowBox[{"DGIntersect3Spheres", "[", 
        RowBox[{"a", ",", "ra", ",", "b", ",", "rb", ",", "c", ",", "rc"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"errd1", "=", 
       RowBox[{"Abs", "[", 
        RowBox[{
         RowBox[{"N", "[", 
          RowBox[{"Norm", "[", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "d"}], "]"}], "]"}], "-", 
         "rd"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"errd2", "=", 
       RowBox[{"Abs", "[", 
        RowBox[{
         RowBox[{"N", "[", 
          RowBox[{"Norm", "[", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "-", "d"}], "]"}], "]"}], "-", 
         "rd"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"errd1", "<", "errd2"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"x", "=", 
          RowBox[{"x", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"error", "=", 
          RowBox[{"Max", "[", 
           RowBox[{
            RowBox[{"error", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", "errd1"}], "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"x", "=", 
          RowBox[{"x", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"error", "=", 
          RowBox[{"Max", "[", 
           RowBox[{
            RowBox[{"error", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", "errd2"}], "]"}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"x", ",", "error"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6982194867257423`*^9, 3.6982194896711955`*^9}, {
   3.6982195521886597`*^9, 3.6982195574006166`*^9}, {3.698219658452036*^9, 
   3.6982197616420813`*^9}, {3.6982197929738626`*^9, 3.698220066685677*^9}, {
   3.6982202502951345`*^9, 3.6982206319197464`*^9}, {3.698220667243675*^9, 
   3.698220668644104*^9}, {3.6982374927691836`*^9, 3.6982376692978663`*^9}, {
   3.6982376993873615`*^9, 3.6982377116575003`*^9}, {3.6982377427296095`*^9, 
   3.6982378010688024`*^9}, {3.698238162700093*^9, 3.69823821610886*^9}, {
   3.698238503550205*^9, 3.6982385061164074`*^9}, {3.6982394287569656`*^9, 
   3.6982395461318145`*^9}, {3.6982396045652046`*^9, 
   3.6982396143261786`*^9}, {3.6982396607885056`*^9, 
   3.6982397285916595`*^9}, {3.6982397636183057`*^9, 3.698239783426839*^9}, {
   3.6982399533225765`*^9, 3.698239972728856*^9}, {3.6982400966089387`*^9, 
   3.6982401012365484`*^9}, 3.6982427393374405`*^9, {3.698243596521635*^9, 
   3.6982437164378223`*^9}, {3.6982437695877132`*^9, 
   3.6982437905316043`*^9}, {3.6983192514474745`*^9, 
   3.6983192996453114`*^9}, {3.6983193844490786`*^9, 3.698319388494842*^9}, {
   3.6983194281754827`*^9, 3.698319433003346*^9}, {3.6983196015623474`*^9, 
   3.698319630059145*^9}, {3.698319684615945*^9, 3.698319702038396*^9}, {
   3.6983221142065024`*^9, 3.6983221170274825`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "DGBuildUpSolver\n",
 StyleBox["DGBuildUpInitX, DGBuildUpSetX, DGBuildUpSolver", "Text",
  FontSlant->"Italic"]
}], "Subchapter",
 CellChangeTimes->{{3.680878757330321*^9, 3.6808787634963007`*^9}, {
  3.682701954058903*^9, 3.6827019596222734`*^9}, {3.698244132498234*^9, 
  3.698244132699868*^9}, {3.6982442429445033`*^9, 3.6982442478042264`*^9}}],

Cell[CellGroupData[{

Cell["Source Code", "Subsection",
 CellChangeTimes->{{3.6808787874069276`*^9, 3.6808787932715735`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\[IndentingNewLine]", 
   RowBox[{
   "DGBuildUpInitX", ",", "\[IndentingNewLine]", "DGBuildUpSetX", ",", 
    "\[IndentingNewLine]", "DGBuildUpSolver"}], "\[IndentingNewLine]", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGBuildUpInitX", "[", 
     RowBox[{"G_", ",", "basis_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "i1", ",", "i2", ",", "i3", ",", "i4", ",", "d12", ",", "d13", ",", 
        "d14", ",", "d23", ",", "d24", ",", "d34", ",", "A", ",", "X", ",", 
        "X21", ",", "X31", ",", "X32", ",", "X41", ",", "X42", ",", "error"}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i1", ",", "i2", ",", "i3", ",", "i4"}], "}"}], "=", 
        "basis"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "d12", ",", "d13", ",", "d14", ",", "d23", ",", "d24", ",", "d34"}], 
         "}"}], "=", 
        RowBox[{"DGEdgeWeight", "[", 
         RowBox[{"G", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"i1", "\[UndirectedEdge]", "i2"}], ",", 
            RowBox[{"i1", "\[UndirectedEdge]", "i3"}], ",", 
            RowBox[{"i1", "\[UndirectedEdge]", "i4"}], ",", 
            RowBox[{"i2", "\[UndirectedEdge]", "i3"}], ",", 
            RowBox[{"i2", "\[UndirectedEdge]", "i4"}], ",", 
            RowBox[{"i3", "\[UndirectedEdge]", "i4"}]}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "set", " ", "the", " ", "position", " ", "of", " ", "the", " ", 
         "four", " ", "atoms", " ", "in", " ", "the", " ", "basis"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"X", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", 
             RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], "}"}]}], "]"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"X", "[", 
          RowBox[{"[", "i2", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "=", "d12"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"X21", "=", 
        RowBox[{
         RowBox[{"X", "[", 
          RowBox[{"[", "i2", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"X", "[", 
          RowBox[{"[", "i3", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"d13", "^", "2"}], "-", 
           RowBox[{"d23", "^", "2"}], "+", 
           RowBox[{"X21", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", "*", "X21"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"X31", "=", 
        RowBox[{
         RowBox[{"X", "[", 
          RowBox[{"[", "i3", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"X", "[", 
          RowBox[{"[", "i3", "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], "=", 
        RowBox[{"Sqrt", "[", 
         RowBox[{
          RowBox[{"d13", "^", "2"}], "-", 
          RowBox[{"X31", "^", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"X", "[", 
           RowBox[{"[", "i4", "]"}], "]"}], ",", "error"}], "}"}], "=", 
        RowBox[{
         RowBox[{"DGIntersect3Spheres", "[", 
          RowBox[{
           RowBox[{"X", "[", 
            RowBox[{"[", "i1", "]"}], "]"}], ",", "d14", ",", 
           RowBox[{"X", "[", 
            RowBox[{"[", "i2", "]"}], "]"}], ",", "d24", ",", 
           RowBox[{"X", "[", 
            RowBox[{"[", "i3", "]"}], "]"}], ",", "d34"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "X", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGBuildUpSetX", "[", 
     RowBox[{"G_", ",", "X_", ",", "nodes_", ",", "i_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "j", ",", "k", ",", "neighs", ",", "basis", ",", "x", ",", "i1", ",", 
        "i2", ",", "i3", ",", "i4", ",", "d1", ",", "d2", ",", "d3", ",", 
        "d4", ",", "error"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"k", "=", 
        RowBox[{"nodes", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"neighs", "=", 
        RowBox[{"Intersection", "[", 
         RowBox[{
          RowBox[{"AdjacencyList", "[", 
           RowBox[{"G", ",", "k"}], "]"}], ",", 
          RowBox[{"nodes", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", 
             RowBox[{"(", 
              RowBox[{"i", "-", "1"}], ")"}]}], "]"}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "neighs", "]"}], "<", "4"}], ",", 
         RowBox[{
         "Throw", "[", 
          "\"\<InvalidOrder: There is not enough neighs to set a basis\>\"", 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"basis", "=", 
        RowBox[{"Subsets", "[", 
         RowBox[{"neighs", ",", 
          RowBox[{"{", "4", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", 
         RowBox[{"j", "\[LessEqual]", 
          RowBox[{"Length", "[", "basis", "]"}]}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i1", ",", "i2", ",", "i3", ",", "i4"}], "}"}], "=", 
           RowBox[{"basis", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"d1", ",", "d2", ",", "d3", ",", "d4"}], "}"}], "=", 
           RowBox[{"DGEdgeWeight", "[", 
            RowBox[{"G", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"i1", "\[UndirectedEdge]", "k"}], ",", 
               RowBox[{"i2", "\[UndirectedEdge]", "k"}], ",", 
               RowBox[{"i3", "\[UndirectedEdge]", "k"}], ",", 
               RowBox[{"i4", "\[UndirectedEdge]", "k"}]}], "}"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", "error"}], "}"}], "=", 
           RowBox[{"DGIntersect4Spheres", "[", 
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"[", "i1", "]"}], "]"}], ",", "d1", ",", 
             RowBox[{"X", "[", 
              RowBox[{"[", "i2", "]"}], "]"}], ",", "d2", ",", 
             RowBox[{"X", "[", 
              RowBox[{"[", "i3", "]"}], "]"}], ",", "d3", ",", 
             RowBox[{"X", "[", 
              RowBox[{"[", "i4", "]"}], "]"}], ",", "d4"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"error", "<", 
             RowBox[{"10", "^", 
              RowBox[{"(", 
               RowBox[{"-", "3"}], ")"}]}]}], ",", "Break"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"error", ">", 
          RowBox[{"10", "^", 
           RowBox[{"(", 
            RowBox[{"-", "3"}], ")"}]}]}], ",", 
         RowBox[{
         "Throw", "[", 
          "\"\<InvalidSolution: A precise solution could not be found.\>\"", 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "x", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGBuildUpSolver", "[", 
    RowBox[{"G_", ",", "nodes_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "X"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"X", "=", 
       RowBox[{"DGBuildUpInitX", "[", 
        RowBox[{"G", ",", 
         RowBox[{"nodes", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "4"}], "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "remaining", " ", "atoms"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "5"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "X", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"X", "[", 
          RowBox[{"[", 
           RowBox[{"nodes", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", 
         RowBox[{"DGBuildUpSetX", "[", 
          RowBox[{"G", ",", "X", ",", "nodes", ",", "i"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "X", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.680878796715887*^9, 3.6808788985008335`*^9}, {
   3.6808789677890434`*^9, 3.680879020711442*^9}, {3.6808790793750415`*^9, 
   3.68087932980835*^9}, {3.6808794433580427`*^9, 3.680879452768545*^9}, {
   3.680879482957798*^9, 3.6808798572569814`*^9}, {3.6808801823844533`*^9, 
   3.6808802178347673`*^9}, {3.6808811493834057`*^9, 
   3.6808816352290897`*^9}, {3.6808816739789124`*^9, 3.680882032196274*^9}, {
   3.6808820912500343`*^9, 3.6808821757453947`*^9}, {3.680882211133314*^9, 
   3.680882378871024*^9}, {3.6808824342608643`*^9, 3.680882434823531*^9}, {
   3.680883747151867*^9, 3.680883922885659*^9}, {3.680883972978032*^9, 
   3.680884390920006*^9}, {3.6808844300037193`*^9, 3.6808845512584267`*^9}, 
   3.68088461521344*^9, {3.6808846535514545`*^9, 3.6808847349773226`*^9}, {
   3.6808850013417034`*^9, 3.6808850118309097`*^9}, {3.680885071364455*^9, 
   3.680885338050998*^9}, {3.680885369092225*^9, 3.6808854465825834`*^9}, {
   3.6808858161521587`*^9, 3.6808858165517445`*^9}, {3.680885969295744*^9, 
   3.680886034427628*^9}, {3.680886171713134*^9, 3.6808863538065033`*^9}, 
   3.6808863990841804`*^9, {3.6808864612464943`*^9, 3.680886529813063*^9}, {
   3.6808869456867824`*^9, 3.680886961764923*^9}, {3.6808870123576927`*^9, 
   3.680887019550462*^9}, {3.680887114898735*^9, 3.6808871182675095`*^9}, {
   3.680887181162428*^9, 3.680887187111746*^9}, {3.680887251367427*^9, 
   3.680887273892291*^9}, {3.680887323898876*^9, 3.680887325082522*^9}, {
   3.680887456347989*^9, 3.6808874620826855`*^9}, {3.6808875561244335`*^9, 
   3.680887573091951*^9}, {3.680887721148032*^9, 3.6808878253963804`*^9}, {
   3.680887892923795*^9, 3.680887895438401*^9}, {3.6808883279068727`*^9, 
   3.6808883742127953`*^9}, {3.6808887446347*^9, 3.6808888009663877`*^9}, {
   3.680888843084072*^9, 3.68088888217283*^9}, {3.6808889672984886`*^9, 
   3.680888980048806*^9}, {3.680889012873393*^9, 3.680889017001927*^9}, {
   3.6809607127676287`*^9, 3.680960713931309*^9}, {3.680963627939675*^9, 
   3.6809636936788006`*^9}, {3.680963725032446*^9, 3.68096375932222*^9}, {
   3.680963996232436*^9, 3.680964178133572*^9}, {3.680964213180361*^9, 
   3.6809642748716707`*^9}, {3.680964349959564*^9, 3.6809643607069154`*^9}, {
   3.6809643998686404`*^9, 3.680964423431587*^9}, {3.6809649940240765`*^9, 
   3.6809650555320835`*^9}, {3.680965297215009*^9, 3.680965374687066*^9}, {
   3.680965746541073*^9, 3.680965840873766*^9}, {3.680966028202756*^9, 
   3.6809661594200068`*^9}, {3.680966229724207*^9, 3.6809662777779217`*^9}, {
   3.6809663143619595`*^9, 3.680966336214636*^9}, {3.68096644404537*^9, 
   3.6809666533585944`*^9}, {3.680966782656155*^9, 3.68096684043402*^9}, {
   3.6809669531870036`*^9, 3.680967156904188*^9}, {3.6809672053008804`*^9, 
   3.680967224729057*^9}, {3.680967332314844*^9, 3.680967339149928*^9}, {
   3.6809673783050733`*^9, 3.6809674245168176`*^9}, {3.6809676623088226`*^9, 
   3.6809678364166517`*^9}, {3.6809683681222277`*^9, 
   3.6809686165290656`*^9}, {3.6809686831482697`*^9, 3.680968684388035*^9}, {
   3.680968722806388*^9, 3.6809688286478157`*^9}, {3.6809688660650325`*^9, 
   3.6809688731104565`*^9}, {3.680968922304273*^9, 3.680968979206273*^9}, {
   3.6809690865346055`*^9, 3.680969130012158*^9}, {3.680969781989382*^9, 
   3.680969872823762*^9}, {3.6809699400381446`*^9, 3.680970004489729*^9}, {
   3.6809700536833115`*^9, 3.6809700682716103`*^9}, {3.6809710208681808`*^9, 
   3.680971077002434*^9}, {3.680971109326406*^9, 3.680971115550733*^9}, {
   3.6809711907370863`*^9, 3.680971216592291*^9}, {3.680971278912956*^9, 
   3.6809712801192245`*^9}, {3.6809718771352825`*^9, 3.680971944993314*^9}, {
   3.6809720034773016`*^9, 3.6809720732264376`*^9}, {3.6809724406934075`*^9, 
   3.68097248602604*^9}, {3.6809726599472265`*^9, 3.6809726602954173`*^9}, {
   3.6809727230464745`*^9, 3.6809727291279593`*^9}, {3.680973017680879*^9, 
   3.6809730380391974`*^9}, {3.6809731227303166`*^9, 
   3.6809731466993895`*^9}, {3.680973762644851*^9, 3.6809737679144526`*^9}, {
   3.680973813745384*^9, 3.6809738243622527`*^9}, {3.6809739095062947`*^9, 
   3.680973940278738*^9}, {3.680973995792797*^9, 3.6809740011452093`*^9}, {
   3.6809740466010485`*^9, 3.680974060123784*^9}, {3.6809753469202642`*^9, 
   3.680975657929818*^9}, {3.680975695072091*^9, 3.6809758501681805`*^9}, {
   3.6809758996673946`*^9, 3.6809762262710686`*^9}, {3.680976301712438*^9, 
   3.6809763299510756`*^9}, {3.6809763746469035`*^9, 3.680976380499403*^9}, {
   3.6809764218826056`*^9, 3.6809765347847033`*^9}, {3.680976581667529*^9, 
   3.680976597026043*^9}, {3.680976666398885*^9, 3.6809766669610734`*^9}, {
   3.6809767210323706`*^9, 3.680976781558323*^9}, {3.6809768323302093`*^9, 
   3.680976846514173*^9}, {3.680976911357921*^9, 3.6809769209581203`*^9}, {
   3.680977049628893*^9, 3.6809771526850805`*^9}, {3.6809773883553143`*^9, 
   3.6809774793566475`*^9}, {3.6809775209278545`*^9, 3.680977521665044*^9}, {
   3.6809776512633805`*^9, 3.6809776515167046`*^9}, {3.680977712319936*^9, 
   3.6809777460168*^9}, {3.6810531539619203`*^9, 3.681053166959158*^9}, {
   3.6810532473507404`*^9, 3.6810532616980743`*^9}, {3.681053537630972*^9, 
   3.6810535971654816`*^9}, {3.6810536299030733`*^9, 3.681053764619897*^9}, {
   3.6810540191911044`*^9, 3.6810541426058364`*^9}, {3.681054193325778*^9, 
   3.681054202050123*^9}, {3.681054407650793*^9, 3.681054422525179*^9}, {
   3.6810544649467773`*^9, 3.6810544702728024`*^9}, {3.6810545196776843`*^9, 
   3.6810545642818737`*^9}, {3.6810546574028754`*^9, 
   3.6810546706011558`*^9}, {3.6811147611436043`*^9, 3.681114794728092*^9}, {
   3.681114882040724*^9, 3.6811148829097633`*^9}, {3.6811149340621448`*^9, 
   3.6811149841654096`*^9}, {3.6811151906954145`*^9, 3.68111537573689*^9}, {
   3.681115515816817*^9, 3.6811155891013746`*^9}, {3.6811156493781*^9, 
   3.681115666641453*^9}, {3.6811157198894944`*^9, 3.681115785849764*^9}, {
   3.681115827017232*^9, 3.6811158347965927`*^9}, {3.6811159033938723`*^9, 
   3.681116089029919*^9}, {3.681116213755548*^9, 3.681116272066968*^9}, {
   3.6811163405323725`*^9, 3.6811163422818956`*^9}, {3.6811164168073506`*^9, 
   3.6811164867154493`*^9}, {3.6811169255299654`*^9, 
   3.6811172248748937`*^9}, {3.681117258961213*^9, 3.6811174496638355`*^9}, {
   3.681117533579012*^9, 3.681117647560803*^9}, {3.681117763229082*^9, 
   3.681117783811084*^9}, {3.6811178439925947`*^9, 3.6811178454111786`*^9}, {
   3.6811178787361465`*^9, 3.681118062900173*^9}, {3.6811182140723333`*^9, 
   3.681118242911724*^9}, {3.681118570175209*^9, 3.681118576971583*^9}, {
   3.6811186959610105`*^9, 3.6811187586878242`*^9}, {3.6811187891790757`*^9, 
   3.681118790999563*^9}, {3.6811188571056223`*^9, 3.681118914067198*^9}, {
   3.6811189451494126`*^9, 3.681119011066283*^9}, {3.681119048258296*^9, 
   3.681119051434639*^9}, {3.681119092032136*^9, 3.681119104913178*^9}, {
   3.6811191834650784`*^9, 3.6811191867953424`*^9}, {3.6811196359476748`*^9, 
   3.681119688600884*^9}, {3.68111975028333*^9, 3.6811197807530875`*^9}, {
   3.6811198129044657`*^9, 3.681119817415021*^9}, 3.6811199829716883`*^9, {
   3.681120060387*^9, 3.68112008143056*^9}, {3.6811205197179084`*^9, 
   3.681120554142846*^9}, {3.68112059755657*^9, 3.6811209608421526`*^9}, {
   3.681121000321582*^9, 3.6811213121725974`*^9}, {3.68112299321381*^9, 
   3.681123012107442*^9}, {3.681123048832554*^9, 3.6811232172421627`*^9}, {
   3.6811273234720945`*^9, 3.681127432423428*^9}, {3.6811274800609336`*^9, 
   3.6811274809005604`*^9}, {3.6811275257683163`*^9, 3.681127578179681*^9}, {
   3.681127694826793*^9, 3.681127710789095*^9}, {3.6811278110887747`*^9, 
   3.681127844848827*^9}, {3.6811318326745567`*^9, 3.6811318616049323`*^9}, {
   3.6811320378293934`*^9, 3.6811321022246556`*^9}, {3.6811322022846727`*^9, 
   3.6811322197331595`*^9}, {3.681132275270756*^9, 3.681132303924238*^9}, {
   3.681132952546542*^9, 3.681132975747823*^9}, {3.6811330533869743`*^9, 
   3.681133069989792*^9}, {3.6811331401560717`*^9, 3.681133210129423*^9}, {
   3.68113355997246*^9, 3.681133580734687*^9}, {3.681133629200098*^9, 
   3.681133630070923*^9}, {3.6811337049047832`*^9, 3.6811337124057627`*^9}, {
   3.681133819975602*^9, 3.681133840938975*^9}, {3.681133980113397*^9, 
   3.6811339892678027`*^9}, {3.6811340593396463`*^9, 
   3.6811340697445583`*^9}, {3.6811341524626665`*^9, 3.681134155389428*^9}, {
   3.6811384085644703`*^9, 3.681138416451669*^9}, {3.6811384531639957`*^9, 
   3.6811387332515326`*^9}, {3.696326247015401*^9, 3.696326290249895*^9}, {
   3.6963263290758915`*^9, 3.6963263534943542`*^9}, {3.6963265499230905`*^9, 
   3.6963267199909678`*^9}, {3.6963267593116693`*^9, 
   3.6963269229873137`*^9}, {3.696326975109809*^9, 3.6963269771450577`*^9}, {
   3.6963270084709077`*^9, 3.6963270268753195`*^9}, {3.696327279707534*^9, 
   3.6963277124342194`*^9}, {3.6963277670566783`*^9, 
   3.6963279383852067`*^9}, {3.6963279795211296`*^9, 
   3.6963281839315977`*^9}, {3.696328216429962*^9, 3.696328350263246*^9}, {
   3.696328411126731*^9, 3.6963286380076227`*^9}, {3.6963286951665726`*^9, 
   3.6963289772073884`*^9}, {3.696329031822198*^9, 3.696329290347029*^9}, {
   3.6963293252573895`*^9, 3.696329474349821*^9}, {3.6963295071975946`*^9, 
   3.6963295732929854`*^9}, {3.6963296485433044`*^9, 
   3.6963296648466263`*^9}, {3.6963298886113076`*^9, 3.696329943964314*^9}, {
   3.6963299828627825`*^9, 3.696330037711483*^9}, {3.6963301105312886`*^9, 
   3.6963301559281893`*^9}, {3.69633018944613*^9, 3.696330215930565*^9}, {
   3.696330259860301*^9, 3.6963304438441257`*^9}, {3.696330475475258*^9, 
   3.6963306230483894`*^9}, {3.6963306563291655`*^9, 
   3.6963307206242332`*^9}, {3.6963345425594997`*^9, 3.696334563107193*^9}, {
   3.696334653622881*^9, 3.696334663105197*^9}, {3.6963351846429973`*^9, 
   3.696335191975522*^9}, {3.696338539683173*^9, 3.6963385468592424`*^9}, {
   3.6967009588676825`*^9, 3.6967009616899395`*^9}, {3.696701101654566*^9, 
   3.6967011779401827`*^9}, {3.696934183996126*^9, 3.696934207031106*^9}, {
   3.696934260981206*^9, 3.696934285673975*^9}, {3.696934322808727*^9, 
   3.6969343619935703`*^9}, {3.6969344502573805`*^9, 
   3.6969344569846115`*^9}, {3.6969345597853594`*^9, 3.696934564670198*^9}, {
   3.6981370507222033`*^9, 3.6981370610160313`*^9}, {3.6981373191413965`*^9, 
   3.6981373679463625`*^9}, {3.698137636535467*^9, 3.698137640349996*^9}, {
   3.698137692978403*^9, 3.698137694388838*^9}, {3.6981377371096735`*^9, 
   3.6981378087923565`*^9}, {3.6981378413129263`*^9, 3.698137901443728*^9}, {
   3.6981379713812246`*^9, 3.6981381104371033`*^9}, {3.698138163007603*^9, 
   3.698138273010347*^9}, {3.6981383288703957`*^9, 3.6981383470199337`*^9}, {
   3.698138383433584*^9, 3.6981385107632823`*^9}, {3.6981385728761735`*^9, 
   3.698138601187451*^9}, {3.6981386377627096`*^9, 3.6981386923429112`*^9}, {
   3.698138727770139*^9, 3.6981387340603113`*^9}, {3.6981387792380495`*^9, 
   3.698138792421794*^9}, {3.6981388289921837`*^9, 3.698139280883665*^9}, {
   3.698139335557928*^9, 3.6981394881856575`*^9}, {3.698139521639346*^9, 
   3.6981396956565886`*^9}, {3.6981397462081165`*^9, 
   3.6981397622967873`*^9}, {3.698155520709202*^9, 3.6981555904389486`*^9}, {
   3.6981556674640684`*^9, 3.698155693967147*^9}, {3.6981557545088015`*^9, 
   3.698155808280466*^9}, {3.698155853286815*^9, 3.698155855055989*^9}, {
   3.6982189983475137`*^9, 3.698219030988694*^9}, {3.698219100474406*^9, 
   3.698219198969232*^9}, {3.6982192381510115`*^9, 3.698219253221507*^9}, {
   3.698220777816371*^9, 3.6982208595135517`*^9}, {3.698220963698536*^9, 
   3.6982211178834953`*^9}, {3.698221212645543*^9, 3.6982212782050257`*^9}, 
   3.6982213725109158`*^9, {3.6982215131814556`*^9, 3.698221514190624*^9}, {
   3.698223369061162*^9, 3.698223370668728*^9}, {3.698223428680704*^9, 
   3.698223498676685*^9}, {3.698232667104102*^9, 3.6982327100590925`*^9}, {
   3.6982363879168158`*^9, 3.698236497420759*^9}, {3.698236542712164*^9, 
   3.698236577277589*^9}, {3.698236653268828*^9, 3.698236745014656*^9}, {
   3.698236775330765*^9, 3.6982368007891493`*^9}, {3.6982368409967117`*^9, 
   3.6982369917653947`*^9}, {3.6982370416917057`*^9, 3.698237114115241*^9}, {
   3.698237161049319*^9, 3.6982372226609635`*^9}, {3.6982372605330825`*^9, 
   3.698237302611991*^9}, {3.698237340209424*^9, 3.698237346900936*^9}, {
   3.6982374036160526`*^9, 3.6982374125940075`*^9}, {3.6982378428289995`*^9, 
   3.6982380410494075`*^9}, {3.698238254286378*^9, 3.6982382988629436`*^9}, 
   3.6982384288421555`*^9, {3.69823846001383*^9, 3.698238473616352*^9}, {
   3.6982386797612762`*^9, 3.69823869086414*^9}, {3.698238937783132*^9, 
   3.698238973369734*^9}, {3.698239054302782*^9, 3.698239120169636*^9}, 
   3.698240491600814*^9, 3.698240522976124*^9, {3.6982424083772717`*^9, 
   3.698242443063778*^9}, {3.698242810686262*^9, 3.698242818332333*^9}, {
   3.6982431621439376`*^9, 3.69824321141813*^9}, {3.6982432460511*^9, 
   3.6982432468136053`*^9}, {3.6982432868221755`*^9, 
   3.6982432902635994`*^9}, {3.6982435559692388`*^9, 
   3.6982435562439213`*^9}, {3.698245000504096*^9, 3.698245044587835*^9}, {
   3.698245079434947*^9, 3.698245100812493*^9}, {3.698245837087344*^9, 
   3.6982458669331384`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Example", "Subsection",
 CellChangeTimes->{{3.6808847610415177`*^9, 3.680884762636571*^9}}],

Cell[CellGroupData[{

Cell["Check DGBuildUpInitX", "Subsubsection",
 CellChangeTimes->{
  3.696335266702453*^9, {3.6981397985113087`*^9, 3.698139801145554*^9}, {
   3.6981401554311843`*^9, 3.6981401676693015`*^9}, 3.6981402250229177`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"edges", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", 
    RowBox[{"x", ",", "edges"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"DGPrintGraph", "[", 
  RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basis", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGBuildUpInitX", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "basis"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DGPrintDistanceMatrix", "[", 
  RowBox[{"x", ",", "edges"}], "]"}]}], "Input",
 CellChangeTimes->{{3.698139821137314*^9, 3.698139825253544*^9}, {
  3.698139858701729*^9, 3.698139897364232*^9}, {3.698139966756256*^9, 
  3.6981399694110174`*^9}, {3.698140019910511*^9, 3.69814010999942*^9}, {
  3.698218926550845*^9, 3.698218982996833*^9}, {3.698221528171595*^9, 
  3.6982215292478094`*^9}, {3.698223229496271*^9, 3.69822324531176*^9}, {
  3.698232789723715*^9, 3.6982327915454226`*^9}, {3.6982330045728703`*^9, 
  3.698233050778017*^9}, {3.698233185373212*^9, 3.6982331896285343`*^9}, {
  3.698234330535508*^9, 3.6982343508117933`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Check DGBuildUpSolver", "Subsubsection",
 CellChangeTimes->{
  3.696335266702453*^9, {3.6981397985113087`*^9, 3.698139801145554*^9}, {
   3.6981401554311843`*^9, 3.6981401676693015`*^9}, 3.698140236428483*^9, 
   3.698238321752689*^9, {3.6982383734862976`*^9, 3.6982383771012917`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"edges", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", 
    RowBox[{"x", ",", "edges"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nodes", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGBuildUpSolver", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "nodes"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DGPrintX", "[", "x", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "x", ",", "True"}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.698139821137314*^9, 3.698139825253544*^9}, {
   3.698139858701729*^9, 3.698139897364232*^9}, {3.698139966756256*^9, 
   3.6981399694110174`*^9}, {3.698140019910511*^9, 3.69814010999942*^9}, {
   3.6981402466162415`*^9, 3.698140340332897*^9}, 3.6981556019936123`*^9, {
   3.6982187458271065`*^9, 3.698218876577999*^9}, {3.6982344194696364`*^9, 
   3.6982344493154306`*^9}, {3.6982383323257017`*^9, 3.698238406412279*^9}, {
   3.6982385625786076`*^9, 3.698238587018317*^9}, {3.698238626331799*^9, 
   3.698238646767353*^9}, {3.6982387148145256`*^9, 3.698238802521889*^9}, {
   3.6982388531985006`*^9, 3.6982389113771334`*^9}, {3.6982390082525625`*^9, 
   3.698239019195321*^9}, {3.698239169984175*^9, 3.6982392406763315`*^9}, {
   3.698239330259947*^9, 3.69823933328045*^9}, 3.6982393807854576`*^9, 
   3.698239584306156*^9, 3.6982400280690603`*^9, 3.7003143255491667`*^9, {
   3.7009919838539476`*^9, 3.700992101070965*^9}, {3.700992166609742*^9, 
   3.7009922125087585`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving an instance using BuilUpSolver method ", "Subsubsection",
 CellChangeTimes->{3.696335266702453*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"edges", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"P", "=", 
    RowBox[{"DGProblem", "[", 
     RowBox[{"x", ",", "edges"}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGRandomMDGP", "[", 
      RowBox[{"20", ",", "0.0", ",", "5.0", ",", "0"}], "]"}]}], ";"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"P", "[", "\"\<X\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"G", "=", 
   RowBox[{"P", "[", "\"\<G\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"nodes", "=", 
  RowBox[{"Table", "[", 
   RowBox[{"i", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", 
       RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"DGBuildUpSolver", "[", 
    RowBox[{"G", ",", "nodes"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{"G", ",", "X", ",", "True"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.6811193723446083`*^9, 3.681119412620857*^9}, {
   3.6811199311928988`*^9, 3.681119960930756*^9}, {3.681119990991001*^9, 
   3.6811200405793905`*^9}, {3.6811230224344797`*^9, 3.681123028526058*^9}, {
   3.6811277224020305`*^9, 3.6811277237741623`*^9}, {3.6811285593560123`*^9, 
   3.681128578782134*^9}, {3.6811286737619624`*^9, 3.681128765537285*^9}, {
   3.681128804607932*^9, 3.6811288239519253`*^9}, {3.681130635133052*^9, 
   3.6811306585684404`*^9}, {3.681132006711861*^9, 3.6811320068519697`*^9}, {
   3.6811322329539566`*^9, 3.6811322568870325`*^9}, {3.681132509241618*^9, 
   3.681132516105033*^9}, {3.6811328599020844`*^9, 3.681132874485738*^9}, {
   3.6811342789491444`*^9, 3.6811343056250167`*^9}, {3.6815665500810804`*^9, 
   3.681566551437929*^9}, {3.681569740351883*^9, 3.681569740852806*^9}, {
   3.6815710193111305`*^9, 3.681571023000434*^9}, {3.6815714400430307`*^9, 
   3.681571491286482*^9}, 3.682752354751058*^9, 3.682757377921311*^9, {
   3.69633473379433*^9, 3.696334739241384*^9}, 3.696335048087739*^9, {
   3.6963351061616244`*^9, 3.696335135730406*^9}, {3.696335254918723*^9, 
   3.6963352586483583`*^9}, 3.698072481347253*^9, {3.6982401401846647`*^9, 
   3.698240149132599*^9}, {3.698240224116712*^9, 3.6982403996781855`*^9}, {
   3.6982405533797884`*^9, 3.698240564408103*^9}, {3.6982422163981752`*^9, 
   3.6982422286963325`*^9}, {3.698242338147665*^9, 3.698242351792679*^9}, {
   3.6982427561150675`*^9, 3.6982427695394716`*^9}, {3.698243314622154*^9, 
   3.6982433155002365`*^9}, 3.7003143256025734`*^9, {3.7009922376381283`*^9, 
   3.7009922464586315`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"natoms", "=", "20"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGRandomMDGP", "[", 
    RowBox[{"natoms", ",", "0", ",", "5"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nodes", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "natoms"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"tElapsed", "=", 
  RowBox[{"Timing", "[", 
   RowBox[{"x", "=", 
    RowBox[{"DGBuildUpSolver", "[", 
     RowBox[{
      RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "nodes"}], "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.7027290713254433`*^9, 3.7027291171333704`*^9}, {
  3.70272931101943*^9, 3.702729363838706*^9}, {3.7027294015416803`*^9, 
  3.7027294019425626`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["DGBPSolver", "Subchapter",
 CellChangeTimes->{{3.680878757330321*^9, 3.6808787634963007`*^9}, {
  3.682701954058903*^9, 3.6827019596222734`*^9}, {3.698244126381677*^9, 
  3.6982441350594325`*^9}}],

Cell[CellGroupData[{

Cell["Source Code", "Section",
 CellChangeTimes->{{3.679557165643343*^9, 3.6795571685082006`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"DGBPXinit", ",", "DGBPGetX", ",", "DGBPSolver"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGBPXinit", "[", 
    RowBox[{"G_", ",", "basis_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "a", ",", "b", ",", "c", ",", "numberOfAtoms", ",", "dab", ",", "dac", 
       ",", "dbc", ",", "\[Theta]", ",", "X"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"numberOfAtoms", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"X", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"three", " ", "first", " ", "atoms"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c"}], "}"}], "=", 
       RowBox[{"basis", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"dab", ",", "dac", ",", "dbc"}], "}"}], "=", 
       RowBox[{"DGEdgeWeight", "[", 
        RowBox[{"G", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"a", "\[UndirectedEdge]", "b"}], ",", 
           RowBox[{"a", "\[UndirectedEdge]", "c"}], ",", 
           RowBox[{"b", "\[UndirectedEdge]", "c"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "planar", " ", "rotation", " ", "angle", " ", "for", " ", "third", " ",
         "atom"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"\[Theta]", "=", 
       RowBox[{"ArcCos", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"dab", "^", "2"}], "+", 
           RowBox[{"dbc", "^", "2"}], "-", 
           RowBox[{"dac", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", "*", "dab", "*", "dbc"}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "set", " ", "the", " ", "position", " ", "of", " ", "the", " ", 
        "three", " ", "first", " ", "points"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"X", "[", 
        RowBox[{"[", 
         RowBox[{"{", 
          RowBox[{"a", ",", "b", ",", "c"}], "}"}], "]"}], "]"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "dab"}], ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "dab"}], "+", 
            RowBox[{"dbc", "*", 
             RowBox[{"Cos", "[", "\[Theta]", "]"}]}]}], ",", 
           RowBox[{"dbc", "*", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}]}], " ", ",", "0"}], "}"}]}],
         "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "X", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGBPGetX", "[", 
     RowBox[{"G_", ",", "X_", ",", "branch_", ",", "nid_", ",", "i_"}], "]"}],
     ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "j", ",", "k", ",", "neighs", ",", "x", ",", "error", ",", "i1", ",", 
        "i2", ",", "i3", ",", "d1", ",", "d2", ",", "d3"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"k", "=", 
        RowBox[{"nid", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"neighs", "=", 
        RowBox[{"Intersection", "[", 
         RowBox[{
          RowBox[{"AdjacencyList", "[", 
           RowBox[{"G", ",", "k"}], "]"}], ",", 
          RowBox[{"nid", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"i", "-", "3"}], ")"}], ";;", 
             RowBox[{"(", 
              RowBox[{"i", "-", "1"}], ")"}]}], "]"}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "neighs", "]"}], "<", "3"}], ",", 
         RowBox[{
         "Throw", "[", 
          "\"\<InvalidOrder: There is not enough neighs to set a basis.\>\"", 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i1", ",", "i2", ",", "i3"}], "}"}], "=", 
        RowBox[{"neighs", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"d1", ",", "d2", ",", "d3"}], "}"}], "=", 
        RowBox[{"DGEdgeWeight", "[", 
         RowBox[{"G", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"i1", "\[UndirectedEdge]", "k"}], ",", 
            RowBox[{"i2", "\[UndirectedEdge]", "k"}], ",", 
            RowBox[{"i3", "\[UndirectedEdge]", "k"}]}], "}"}]}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "error"}], "}"}], "=", 
        RowBox[{"DGIntersect3Spheres", "[", 
         RowBox[{
          RowBox[{"X", "[", 
           RowBox[{"[", "i1", "]"}], "]"}], ",", "d1", ",", 
          RowBox[{"X", "[", 
           RowBox[{"[", "i2", "]"}], "]"}], ",", "d2", ",", 
          RowBox[{"X", "[", 
           RowBox[{"[", "i3", "]"}], "]"}], ",", "d3"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{"branch", "+", "1"}], "]"}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGBPSolver", "[", 
    RowBox[{"G_", ",", "nodes_", ",", 
     RowBox[{"onesol_:", "False"}], ",", 
     RowBox[{"verbose_:", "False"}]}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Calculate", " ", "all", " ", "solutions", " ", "of", " ", "the", " ", 
     "DMDGP", " ", "instance", " ", "defined", " ", "by", " ", "the", " ", 
     "graph", " ", 
     RowBox[{"G", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"local", " ", "variables"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "i", ",", "k", ",", "numberOfAtoms", ",", "prune", ",", "branch", ",", 
       "X", ",", "S", ",", "work", ",", "error", ",", 
       RowBox[{"tol", "=", 
        RowBox[{"10", "^", 
         RowBox[{"(", 
          RowBox[{"-", "5"}], ")"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"numberOfAtoms", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"X", "=", 
       RowBox[{"DGBPXinit", "[", 
        RowBox[{"G", ",", 
         RowBox[{"nodes", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"init", " ", "BPTree"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"branch", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"branch", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "3"}], "]"}], "]"}], "=", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"work", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"work", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "3"}], "]"}], "]"}], "=", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"solutions", " ", "and", " ", "branches"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"S", "=", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Points\>\"", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"\"\<Branches\>\"", "\[Rule]", 
          RowBox[{"{", "}"}]}]}], "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"k", "=", "4"}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"k", ">", "3"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"work", "[", 
           RowBox[{"[", "k", "]"}], "]"}], "++"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"X", "[", 
           RowBox[{"[", 
            RowBox[{"nodes", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}], "=", 
          RowBox[{"DGBPGetX", "[", 
           RowBox[{"G", ",", "X", ",", 
            RowBox[{"branch", "[", 
             RowBox[{"[", "k", "]"}], "]"}], ",", "nodes", ",", "k"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"error", "=", 
          RowBox[{"DGRelativeResidue", "[", 
           RowBox[{"G", ",", "X", ",", "nodes", ",", "k"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"prune", "=", 
          RowBox[{"error", ">", "tol"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<[bp] k=\>\"", ",", "k", ",", "\"\<  branch=\>\"", ",", 
             "branch", ",", "\"\<  error=\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"error", ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", 
             "\"\<  prune=\>\"", ",", "prune"}], "]"}], ";"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"DGPrintX", "[", 
            RowBox[{"X", "[", 
             RowBox[{"[", 
              RowBox[{"nodes", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "k"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
           ";"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"solution", " ", "found"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "[", "prune", "]"}], "&&", 
            RowBox[{"k", "\[Equal]", "numberOfAtoms"}]}], " ", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"S", "[", "\"\<Points\>\"", "]"}], ",", "X"}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"S", "[", "\"\<Branches\>\"", "]"}], ",", "branch"}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"onesol", ",", 
              RowBox[{"Return", "[", 
               RowBox[{"{", 
                RowBox[{"S", ",", "work"}], "}"}], "]"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"update", " ", "tree", " ", "node"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"prune", "=", 
          RowBox[{"prune", "||", 
           RowBox[{"k", "\[Equal]", 
            RowBox[{"Length", "[", "branch", "]"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"prune", "&&", 
            RowBox[{
             RowBox[{"branch", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "\[Equal]", "1"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"k", ">", "3"}], "&&", 
               RowBox[{
                RowBox[{"branch", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], "\[Equal]", "1"}]}], ",", 
              RowBox[{"k", "--"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"prune", "&&", 
            RowBox[{
             RowBox[{"branch", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "\[Equal]", "0"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"branch", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "=", "1"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"i", "=", 
               RowBox[{"k", "+", "1"}]}], ",", 
              RowBox[{"i", "\[LessEqual]", 
               RowBox[{"Length", "[", "branch", "]"}]}], ",", 
              RowBox[{"i", "++"}], ",", 
              RowBox[{
               RowBox[{"branch", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", "0"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", "prune", "]"}], ",", 
           RowBox[{"k", "++"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"verbose", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<\!\(\*
StyleBox[\"DGBPSolver\",
FontSlant->\"Italic\",
FontVariations->{\"Underline\"->True}]\)\>\"", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Number of solutions: \>\"", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"S", "[", "\"\<Points\>\"", "]"}], "]"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"S", ",", "work"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.679558175961939*^9, 3.6795582465756893`*^9}, {
   3.6795582826425705`*^9, 3.6795582839429235`*^9}, {3.6795657231676226`*^9, 
   3.6795657791530952`*^9}, {3.6795658130773067`*^9, 3.679565871544673*^9}, {
   3.6795861090630603`*^9, 3.679586268296414*^9}, {3.6795863005452967`*^9, 
   3.679586495840868*^9}, {3.6795865460918303`*^9, 3.6795865970915422`*^9}, {
   3.6795868432394185`*^9, 3.6795869018284483`*^9}, {3.679586939131709*^9, 
   3.679586976913601*^9}, {3.6795870626458464`*^9, 3.6795871011073523`*^9}, {
   3.6795871633176947`*^9, 3.679587758105817*^9}, {3.679587804838523*^9, 
   3.6795878406799817`*^9}, {3.6795881298229246`*^9, 3.679588139590253*^9}, {
   3.679588432141921*^9, 3.679588820678732*^9}, {3.67958885218464*^9, 
   3.679588859454245*^9}, {3.679591543221243*^9, 3.6795916551338434`*^9}, {
   3.679591702248043*^9, 3.679591773731745*^9}, {3.6795919722830153`*^9, 
   3.6795919729205785`*^9}, {3.6795920143454957`*^9, 
   3.6795920373721275`*^9}, {3.6795920942295294`*^9, 3.679592111174794*^9}, {
   3.6795921457433033`*^9, 3.6795921895011177`*^9}, {3.6795922813103876`*^9, 
   3.6795922980595803`*^9}, {3.679592407947278*^9, 3.6795924086627626`*^9}, {
   3.6795924498624945`*^9, 3.679592466754154*^9}, {3.679592757750784*^9, 
   3.679592801039822*^9}, {3.679592909747943*^9, 3.6795929608876143`*^9}, {
   3.679593939143162*^9, 3.6795940165402756`*^9}, {3.679594087903904*^9, 
   3.6795941883419476`*^9}, {3.679594287225954*^9, 3.6795943875196476`*^9}, {
   3.679594448595685*^9, 3.679594478828597*^9}, {3.6795945652724648`*^9, 
   3.6795946280032177`*^9}, {3.6795946789134407`*^9, 
   3.6795947026597376`*^9}, {3.679594776154107*^9, 3.6795948130815954`*^9}, {
   3.679594874794201*^9, 3.6795948828190813`*^9}, {3.6795949534488997`*^9, 
   3.6795949725060587`*^9}, {3.6795953069724016`*^9, 3.679595386091648*^9}, {
   3.6795955639765224`*^9, 3.6795956274997435`*^9}, {3.679595702271488*^9, 
   3.6795959233026123`*^9}, {3.679595965972151*^9, 3.6795959811159763`*^9}, {
   3.679596019161744*^9, 3.6795961007578773`*^9}, {3.679596138153123*^9, 
   3.679596343165894*^9}, {3.6795963808982925`*^9, 3.679596485412173*^9}, {
   3.679596522566841*^9, 3.6795965922679443`*^9}, {3.6795966325388813`*^9, 
   3.6795966980857244`*^9}, {3.679596732170254*^9, 3.679596952279262*^9}, {
   3.6795970019970694`*^9, 3.6795970768712177`*^9}, {3.679597120771289*^9, 
   3.679597123641965*^9}, {3.679597504661482*^9, 3.67959752405188*^9}, {
   3.6795977558745494`*^9, 3.679597791424835*^9}, 3.6795987087156878`*^9, {
   3.6795988192242517`*^9, 3.67959883584793*^9}, {3.679598870164411*^9, 
   3.6795991011240025`*^9}, {3.679599318938053*^9, 3.679599340969948*^9}, {
   3.6795993740469303`*^9, 3.679599392408225*^9}, {3.679599446418444*^9, 
   3.6795994936803236`*^9}, {3.6795995268675137`*^9, 3.6795995571197987`*^9}, 
   3.679599593529305*^9, {3.6795996462842827`*^9, 3.679599664667951*^9}, 
   3.6796000535012045`*^9, {3.6796005685888577`*^9, 3.6796006406104794`*^9}, {
   3.679600696928871*^9, 3.6796007267160053`*^9}, {3.6796008413370132`*^9, 
   3.6796008545284967`*^9}, {3.6796009031430583`*^9, 
   3.6796009310933266`*^9}, {3.6796010302991343`*^9, 3.67960105103058*^9}, {
   3.679601123591203*^9, 3.6796011690061445`*^9}, {3.6796012042311897`*^9, 
   3.6796012284117613`*^9}, {3.6796013171753454`*^9, 
   3.6796013538183103`*^9}, {3.679678803727684*^9, 3.6796788489988422`*^9}, {
   3.6796789029728556`*^9, 3.679678973714923*^9}, {3.679679007940275*^9, 
   3.6796790171013775`*^9}, {3.6796791140754843`*^9, 3.679679297244875*^9}, {
   3.679679330413969*^9, 3.6796793579806814`*^9}, {3.6796794551957006`*^9, 
   3.6796794760541725`*^9}, {3.679679575327817*^9, 3.6796796729758596`*^9}, {
   3.679679868010354*^9, 3.6796800326147842`*^9}, {3.6796800872006283`*^9, 
   3.679680109202219*^9}, {3.6796801598977137`*^9, 3.679680170399706*^9}, {
   3.679680211818449*^9, 3.6796804482737713`*^9}, {3.6796805112298536`*^9, 
   3.6796805744565773`*^9}, {3.6796806218580914`*^9, 3.679680757892975*^9}, {
   3.679680811495949*^9, 3.6796808818651915`*^9}, {3.6796809144827785`*^9, 
   3.6796809666833677`*^9}, {3.6796810029485235`*^9, 
   3.6796810081740055`*^9}, {3.6796810575156417`*^9, 
   3.6796811033995237`*^9}, {3.679681332527998*^9, 3.6796813333625546`*^9}, {
   3.6796813807917876`*^9, 3.67968147752941*^9}, {3.679681563739986*^9, 
   3.6796815769607897`*^9}, {3.6796817221757703`*^9, 3.679681763490862*^9}, {
   3.679681838781067*^9, 3.6796818408804646`*^9}, {3.6796818894447145`*^9, 
   3.679682079969407*^9}, {3.679682121825989*^9, 3.6796821248530035`*^9}, {
   3.679682265526948*^9, 3.679682306277526*^9}, {3.6796823673326397`*^9, 
   3.679682384445038*^9}, {3.6796824443186035`*^9, 3.679682475464719*^9}, {
   3.6796825288595295`*^9, 3.6796825637327585`*^9}, {3.67968278119676*^9, 
   3.679682782882883*^9}, {3.6797345890383964`*^9, 3.6797346061187067`*^9}, {
   3.679734645268098*^9, 3.679734678069255*^9}, {3.679734719550336*^9, 
   3.679734728336152*^9}, {3.679734851985812*^9, 3.6797348613539844`*^9}, {
   3.6797349632167463`*^9, 3.6797349754570136`*^9}, {3.679735010318187*^9, 
   3.679735089425761*^9}, {3.6797352029473877`*^9, 3.6797352174003067`*^9}, {
   3.679735334219095*^9, 3.6797353520668097`*^9}, {3.6797354127852964`*^9, 
   3.6797354225972743`*^9}, {3.6797356146960435`*^9, 3.6797356233076*^9}, {
   3.679735670171296*^9, 3.679735748032075*^9}, {3.679735818469843*^9, 
   3.679735848457308*^9}, {3.67973596027987*^9, 3.679735975920292*^9}, {
   3.6797360359884872`*^9, 3.679736087721181*^9}, {3.6797362491591873`*^9, 
   3.679736251571519*^9}, {3.6797363112665663`*^9, 3.67973638863768*^9}, {
   3.6797365176603727`*^9, 3.679736520301809*^9}, {3.679736670119876*^9, 
   3.6797367431527596`*^9}, {3.679756482791448*^9, 3.679756557876812*^9}, {
   3.6797567570184045`*^9, 3.6797567594612527`*^9}, {3.6797567906860046`*^9, 
   3.679756802275606*^9}, {3.6797568773893633`*^9, 3.679756886271783*^9}, {
   3.679757001405609*^9, 3.6797570054216137`*^9}, {3.679757180744531*^9, 
   3.6797572214769106`*^9}, {3.6797572539267645`*^9, 
   3.6797572552707305`*^9}, {3.679757302135573*^9, 3.679757309602027*^9}, {
   3.6797576159368067`*^9, 3.679757640960533*^9}, {3.6797577488837395`*^9, 
   3.6797577653388815`*^9}, {3.6797577958104706`*^9, 3.679757803108025*^9}, {
   3.6797578760871897`*^9, 3.6797578901608458`*^9}, {3.679758056388175*^9, 
   3.679758057856022*^9}, {3.679758116808442*^9, 3.679758142175377*^9}, {
   3.6797583149135833`*^9, 3.679758607202947*^9}, {3.679758663127587*^9, 
   3.6797586884288898`*^9}, {3.679759119373311*^9, 3.679759252843992*^9}, {
   3.679760070123723*^9, 3.679760141715478*^9}, {3.6797601874366446`*^9, 
   3.67976021978776*^9}, {3.679761268846787*^9, 3.6797613467221656`*^9}, {
   3.6797613820967917`*^9, 3.679761404174221*^9}, {3.6797614488257165`*^9, 
   3.6797615135316324`*^9}, {3.6797616958144684`*^9, 3.679761727076391*^9}, {
   3.6797629611339755`*^9, 3.6797630599393997`*^9}, {3.6797632969326744`*^9, 
   3.6797633450875072`*^9}, {3.6797633864858117`*^9, 3.679763417622408*^9}, {
   3.679763454154428*^9, 3.679763458232932*^9}, {3.679763559460507*^9, 
   3.679763559766924*^9}, {3.67976360142772*^9, 3.679763602011773*^9}, {
   3.679763652514624*^9, 3.6797636554635086`*^9}, {3.6797636883303623`*^9, 
   3.6797636933229237`*^9}, {3.679763739648059*^9, 3.6797637500153637`*^9}, {
   3.6797638017358065`*^9, 3.679763821403262*^9}, {3.6797639540004077`*^9, 
   3.679763967875004*^9}, {3.679764012996402*^9, 3.679764053151238*^9}, {
   3.679764105585392*^9, 3.6797641333006964`*^9}, {3.679764241169329*^9, 
   3.6797642550419507`*^9}, {3.6797642965486746`*^9, 
   3.6797642974911604`*^9}, {3.679766312258819*^9, 3.6797663400081835`*^9}, {
   3.6797665204820805`*^9, 3.6797666179276123`*^9}, {3.6797666878843207`*^9, 
   3.679766700259632*^9}, 3.679766730824309*^9, {3.67976678431518*^9, 
   3.6797667911152844`*^9}, {3.679766899700026*^9, 3.6797669126934752`*^9}, {
   3.6797669454005632`*^9, 3.679766965008849*^9}, {3.6797670469007864`*^9, 
   3.6797670576985207`*^9}, {3.679767112514214*^9, 3.6797671303351617`*^9}, {
   3.6797675537044563`*^9, 3.6797676224830623`*^9}, {3.679767976648643*^9, 
   3.6797680158816223`*^9}, {3.679768074496215*^9, 3.6797680775963783`*^9}, {
   3.6797683593332515`*^9, 3.6797683759920163`*^9}, {3.6797689343634205`*^9, 
   3.67976894926108*^9}, {3.679769294256039*^9, 3.679769332344527*^9}, {
   3.6798191469974074`*^9, 3.679819160356634*^9}, 3.6798192106398354`*^9, {
   3.67981926129202*^9, 3.679819264210451*^9}, {3.6798201118432903`*^9, 
   3.6798201155779047`*^9}, {3.679820335384288*^9, 3.679820377209854*^9}, {
   3.679820499748266*^9, 3.679820500648081*^9}, {3.6798205849449463`*^9, 
   3.679820599020897*^9}, {3.679820651543778*^9, 3.679820717123869*^9}, 
   3.6798208645536685`*^9, {3.679820946173946*^9, 3.6798209585549765`*^9}, {
   3.6798211650566034`*^9, 3.679821179641118*^9}, {3.6798212774784584`*^9, 
   3.6798212833238792`*^9}, {3.6798215653792295`*^9, 3.67982157108221*^9}, {
   3.679821616893424*^9, 3.679821653145285*^9}, {3.6798222987882447`*^9, 
   3.6798223432753534`*^9}, 3.679822416580861*^9, {3.679822823372448*^9, 
   3.6798228417201242`*^9}, {3.679823267991959*^9, 3.6798232844684114`*^9}, {
   3.679826381840706*^9, 3.67982643359863*^9}, 3.6798265156658287`*^9, {
   3.6798266225012636`*^9, 3.679826673734756*^9}, {3.679826743782586*^9, 
   3.679826770138029*^9}, {3.6798288730382085`*^9, 3.6798288749212675`*^9}, 
   3.679830925818262*^9, {3.6799122356862607`*^9, 3.679912420141233*^9}, 
   3.679912621838517*^9, {3.679912660005648*^9, 3.6799127645180964`*^9}, {
   3.679912796764311*^9, 3.679912833673414*^9}, {3.679912923419185*^9, 
   3.6799130110394573`*^9}, {3.6799132053019743`*^9, 
   3.6799132383140087`*^9}, {3.6799132802516465`*^9, 3.67991331943956*^9}, {
   3.679913510472663*^9, 3.6799136126746993`*^9}, {3.6799143039934287`*^9, 
   3.679914498499134*^9}, {3.6799146006025815`*^9, 3.679914665572703*^9}, {
   3.6799147788339305`*^9, 3.6799147832198434`*^9}, {3.679915529268517*^9, 
   3.6799155521864934`*^9}, {3.6799163694288054`*^9, 
   3.6799163759577293`*^9}, {3.679916633719616*^9, 3.6799166874558907`*^9}, {
   3.6799167701444783`*^9, 3.6799167738622227`*^9}, {3.6799168079043493`*^9, 
   3.6799168533126335`*^9}, {3.679916959985268*^9, 3.6799169731612396`*^9}, 
   3.6799170200748706`*^9, {3.6799171302212915`*^9, 3.679917141185356*^9}, {
   3.679917187615794*^9, 3.6799171931360073`*^9}, {3.679917338879426*^9, 
   3.679917349384443*^9}, {3.6799174136620827`*^9, 3.6799174401714363`*^9}, {
   3.6799175166104527`*^9, 3.6799175282932596`*^9}, 3.6799178373631587`*^9, {
   3.6799179537059784`*^9, 3.6799179803577185`*^9}, {3.67991866146945*^9, 
   3.6799187062925053`*^9}, {3.679918827393654*^9, 3.6799189074639287`*^9}, {
   3.6799189626153173`*^9, 3.6799189686805744`*^9}, {3.6799190280052376`*^9, 
   3.6799190455061207`*^9}, {3.6799190972022314`*^9, 3.679919125280387*^9}, {
   3.679924566119967*^9, 3.679924604385762*^9}, {3.6799246642790704`*^9, 
   3.6799246956132803`*^9}, {3.6799247527275844`*^9, 
   3.6799247930164156`*^9}, {3.679924951195854*^9, 3.6799249803781705`*^9}, {
   3.679925022623218*^9, 3.6799250488316956`*^9}, {3.6799253861656322`*^9, 
   3.6799254381888103`*^9}, {3.6799255434641275`*^9, 3.679925616718331*^9}, {
   3.679925661348341*^9, 3.679925698259054*^9}, {3.67992573602477*^9, 
   3.6799257478959365`*^9}, {3.6799258174994507`*^9, 
   3.6799259665814676`*^9}, {3.679926003783972*^9, 3.679926024748337*^9}, {
   3.679926069235965*^9, 3.6799260902291036`*^9}, {3.6799261736068425`*^9, 
   3.679926196432872*^9}, {3.679926255248601*^9, 3.6799262580962477`*^9}, {
   3.679926293552193*^9, 3.679926293751954*^9}, {3.6799263246875305`*^9, 
   3.67992632905294*^9}, {3.6799263775010214`*^9, 3.6799264110418615`*^9}, {
   3.6799264515895023`*^9, 3.679926470697673*^9}, {3.6799267773032274`*^9, 
   3.6799268074427676`*^9}, {3.6799273312718644`*^9, 
   3.6799273548658895`*^9}, {3.6799274096231394`*^9, 
   3.6799274791310563`*^9}, {3.6802492252310677`*^9, 
   3.6802494747564917`*^9}, {3.680249508550872*^9, 3.6802495430476055`*^9}, {
   3.680249675725598*^9, 3.6802497003809333`*^9}, 3.68024975508574*^9, {
   3.680256236853915*^9, 3.6802562600900726`*^9}, {3.68025634441387*^9, 
   3.680256365234165*^9}, {3.6802567065770197`*^9, 3.6802567081447225`*^9}, {
   3.68025976930814*^9, 3.6802597702248554`*^9}, {3.6802649405067997`*^9, 
   3.6802650359517117`*^9}, {3.680265067363373*^9, 3.6802650674600096`*^9}, {
   3.6802651867038527`*^9, 3.680265190137226*^9}, {3.680265223704136*^9, 
   3.680265238230487*^9}, {3.680265490528492*^9, 3.6802655052228985`*^9}, {
   3.680265558508396*^9, 3.680265561709672*^9}, {3.6808879559628687`*^9, 
   3.680888011732835*^9}, {3.6809606117806787`*^9, 3.6809606203078012`*^9}, 
   3.6809606847064285`*^9, {3.6809675539292154`*^9, 3.6809675860694647`*^9}, {
   3.6809692430036077`*^9, 3.680969426149309*^9}, {3.680969611597622*^9, 
   3.680969678171399*^9}, {3.6809717051663656`*^9, 3.680971757266692*^9}, {
   3.681049731545925*^9, 3.6810497326806526`*^9}, {3.6815751098190413`*^9, 
   3.6815752193084803`*^9}, {3.681575314417507*^9, 3.6815753681505737`*^9}, 
   3.6815761221030645`*^9, {3.6827804798722897`*^9, 3.682780494816037*^9}, 
   3.682780604217006*^9, {3.682781704192978*^9, 3.682781710459713*^9}, {
   3.682781876637768*^9, 3.682781904072253*^9}, {3.6827830443626947`*^9, 
   3.6827830549350944`*^9}, {3.682783127758354*^9, 3.6827832541087*^9}, {
   3.682783660581412*^9, 3.6827836734256077`*^9}, {3.682783792501422*^9, 
   3.682783800043203*^9}, {3.682783844406822*^9, 3.682783854282976*^9}, {
   3.6827840511165624`*^9, 3.682784068157834*^9}, {3.68278424789962*^9, 
   3.682784265851144*^9}, {3.6827844475525365`*^9, 3.6827845018196874`*^9}, {
   3.682784564540927*^9, 3.682784585555146*^9}, {3.682784632517503*^9, 
   3.6827846755811577`*^9}, {3.6827849678890543`*^9, 
   3.6827849698689795`*^9}, {3.6827850127031283`*^9, 3.682785092085968*^9}, {
   3.6827851570326347`*^9, 3.682785214146377*^9}, {3.6827852794649224`*^9, 
   3.6827852820630054`*^9}, {3.682785312889785*^9, 3.682785314900358*^9}, {
   3.682874358256663*^9, 3.682874360903284*^9}, {3.682934839631378*^9, 
   3.682934847817806*^9}, 3.682935758206027*^9, {3.6830328654542093`*^9, 
   3.683032867551629*^9}, 3.683032898094671*^9, {3.693310963628379*^9, 
   3.6933111790311046`*^9}, {3.693311218561573*^9, 3.6933112303168716`*^9}, {
   3.693311272066084*^9, 3.6933113625963125`*^9}, {3.6950523845124087`*^9, 
   3.6950523866515436`*^9}, {3.695052424890731*^9, 3.6950524370506387`*^9}, {
   3.6961619545602474`*^9, 3.6961620702824574`*^9}, {3.696338889049758*^9, 
   3.6963338496056805`*^9}, {3.6969507875440702`*^9, 
   3.6969508014723735`*^9}, {3.696950922935711*^9, 3.6969509459133635`*^9}, {
   3.697550371565403*^9, 3.697550371949326*^9}, 3.6979836235158963`*^9, {
   3.697983655060665*^9, 3.6979837327770033`*^9}, {3.697983790859722*^9, 
   3.6979838074844527`*^9}, {3.6979838473949614`*^9, 3.697983851665854*^9}, {
   3.697983950552133*^9, 3.6979840506270604`*^9}, {3.697984105707975*^9, 
   3.697984297952173*^9}, {3.6979847495993657`*^9, 3.6979847803348207`*^9}, 
   3.697984835994111*^9, {3.6979851699465094`*^9, 3.697985191261283*^9}, {
   3.697993736941249*^9, 3.697993822054891*^9}, {3.697995079340356*^9, 
   3.6979951862910323`*^9}, {3.697995230421173*^9, 3.697995375695047*^9}, {
   3.6979959019891167`*^9, 3.6979959454676337`*^9}, {3.6980465852605247`*^9, 
   3.69804683109072*^9}, {3.698047088010625*^9, 3.6980471411569014`*^9}, {
   3.6980472323885565`*^9, 3.6980472377501125`*^9}, {3.6980473104644995`*^9, 
   3.698047354675248*^9}, {3.6980473947561235`*^9, 3.698047402385198*^9}, {
   3.6980475542975597`*^9, 3.698047608345428*^9}, {3.6980476472397304`*^9, 
   3.6980476615872464`*^9}, {3.6980477094119816`*^9, 
   3.6980477828026576`*^9}, {3.698047829278983*^9, 3.698048018965683*^9}, {
   3.698048240561721*^9, 3.698048259884059*^9}, {3.698056934456436*^9, 
   3.6980571566496816`*^9}, {3.698057237832131*^9, 3.6980572462169743`*^9}, {
   3.6980579118181686`*^9, 3.6980579607923365`*^9}, {3.6980580053419185`*^9, 
   3.698058005805474*^9}, {3.6980580742219687`*^9, 3.698058079955908*^9}, {
   3.698058164953802*^9, 3.698058196322177*^9}, {3.698059333503028*^9, 
   3.6980594776024847`*^9}, {3.698061155504623*^9, 3.69806128012282*^9}, {
   3.69806131126612*^9, 3.698061611727914*^9}, 3.698061886200822*^9, {
   3.6980619836449723`*^9, 3.6980622098389125`*^9}, {3.6980622685617027`*^9, 
   3.698062269630556*^9}, {3.6980623644826*^9, 3.6980623815051975`*^9}, {
   3.6980624151710653`*^9, 3.698062418731555*^9}, {3.698062454202283*^9, 
   3.698062459051075*^9}, {3.698062507249819*^9, 3.6980625091454873`*^9}, 
   3.69807248122217*^9, {3.6982443204084044`*^9, 3.6982443820402813`*^9}, {
   3.6982444141631303`*^9, 3.6982444162199945`*^9}, {3.69824444651709*^9, 
   3.6982447022968225`*^9}, {3.6982448483396826`*^9, 3.698244851450246*^9}, {
   3.698244933819071*^9, 3.698244958976886*^9}, {3.698245395254878*^9, 
   3.6982454425872707`*^9}, {3.6982455334518604`*^9, 3.698245695213285*^9}, {
   3.698245781741675*^9, 3.6982457826152544`*^9}, {3.6982458825059676`*^9, 
   3.6982459172355022`*^9}, {3.698246045059526*^9, 3.698246100321678*^9}, {
   3.698253129835696*^9, 3.6982531386876264`*^9}, {3.6982532304499874`*^9, 
   3.69825324168644*^9}, {3.6982532778355227`*^9, 3.6982534073757544`*^9}, {
   3.698253465180602*^9, 3.6982534977651043`*^9}, {3.698254190143094*^9, 
   3.6982542433688955`*^9}, {3.698254279969256*^9, 3.698254353568982*^9}, {
   3.6982544022712836`*^9, 3.6982544534763365`*^9}, {3.6982544873733187`*^9, 
   3.698254508807534*^9}, {3.698254595014316*^9, 3.698254597343861*^9}, {
   3.698254634108245*^9, 3.698254680962821*^9}, {3.6982547749639425`*^9, 
   3.698254789407022*^9}, 3.698254861014345*^9, {3.6982549544580545`*^9, 
   3.6982549839301014`*^9}, {3.698255015125292*^9, 3.6982550486934605`*^9}, {
   3.6982551208823404`*^9, 3.6982552963360257`*^9}, {3.6982553362324867`*^9, 
   3.698255342231966*^9}, {3.698255465912278*^9, 3.698255486190133*^9}, {
   3.698255686124612*^9, 3.6982557622596884`*^9}, {3.6982558094149637`*^9, 
   3.6982558199469495`*^9}, 3.698256018427397*^9, {3.6982560569529486`*^9, 
   3.6982561175620804`*^9}, {3.698256229300191*^9, 3.6982562416898055`*^9}, {
   3.6982562844544973`*^9, 3.6982562938097024`*^9}, {3.6982563758321037`*^9, 
   3.698256377887467*^9}, {3.698256415702329*^9, 3.6982564539306993`*^9}, {
   3.6982566963957667`*^9, 3.698256770189762*^9}, {3.698256801014397*^9, 
   3.6982569997499104`*^9}, {3.6982570494969053`*^9, 3.698257072085887*^9}, {
   3.6982571653623567`*^9, 3.698257192433812*^9}, {3.6982572469951086`*^9, 
   3.6982573639914455`*^9}, {3.6982574279343557`*^9, 
   3.6982574668984146`*^9}, {3.698257511397131*^9, 3.6982575172485123`*^9}, {
   3.698257584419564*^9, 3.6982576933415976`*^9}, {3.6982577499231243`*^9, 
   3.6982577501943045`*^9}, {3.69825785394013*^9, 3.698257872567484*^9}, 
   3.6982579412235203`*^9, {3.698258013468663*^9, 3.6982580318583593`*^9}, {
   3.698258339897382*^9, 3.6982583475944867`*^9}, {3.6982583791599216`*^9, 
   3.698258380355215*^9}, {3.6982584368701987`*^9, 3.698258462045396*^9}, 
   3.6982585281301856`*^9, {3.698258606776347*^9, 3.698258607964134*^9}, {
   3.698259032988323*^9, 3.698259039056348*^9}, {3.6982590936030264`*^9, 
   3.6982591024363847`*^9}, {3.6982591576172233`*^9, 3.698259166864355*^9}, {
   3.698259200680093*^9, 3.698259243642088*^9}, {3.6982592893579845`*^9, 
   3.698259311563212*^9}, {3.698259404324794*^9, 3.6982594615177617`*^9}, {
   3.6982595450400524`*^9, 3.6982595530380344`*^9}, {3.69825971680807*^9, 
   3.698259723223493*^9}, 3.698259820699207*^9, {3.6982606713400655`*^9, 
   3.6982607004496317`*^9}, {3.6982607665887327`*^9, 
   3.6982607822190995`*^9}, {3.698260846650982*^9, 3.6982608594689837`*^9}, {
   3.6982609151166964`*^9, 3.6982609543557205`*^9}, {3.6982610021420703`*^9, 
   3.69826104096456*^9}, {3.6982610775518847`*^9, 3.6982610816931314`*^9}, {
   3.6982612369141397`*^9, 3.698261250419097*^9}, {3.698262305377144*^9, 
   3.6982623858675575`*^9}, {3.6982624440639563`*^9, 
   3.6982624579936953`*^9}, {3.6982680541222563`*^9, 3.698268104513773*^9}, {
   3.698268352069643*^9, 3.698268356044016*^9}, {3.6982692866625395`*^9, 
   3.6982693246676664`*^9}, 3.698269518825307*^9, 3.6983103791587944`*^9, {
   3.698310440083367*^9, 3.698310441363062*^9}, {3.698317111589958*^9, 
   3.698317113164505*^9}, {3.698318652996944*^9, 3.6983186843734655`*^9}, {
   3.698318741470319*^9, 3.6983187662058525`*^9}, {3.6983188359678097`*^9, 
   3.6983188588205843`*^9}, {3.698318889818942*^9, 3.698318935753536*^9}, {
   3.6983190542967052`*^9, 3.6983190942500157`*^9}, {3.6983198910647526`*^9, 
   3.698319940327596*^9}, {3.6983222530352154`*^9, 3.6983222561663446`*^9}, {
   3.698322286437148*^9, 3.698322288498358*^9}, {3.6983224085677023`*^9, 
   3.698322427449193*^9}, {3.6983224617708344`*^9, 3.6983224961451883`*^9}, {
   3.6983226973291006`*^9, 3.698322720017496*^9}, {3.6983257179480543`*^9, 
   3.6983257268086743`*^9}, 3.700314325718482*^9, {3.7034514891327367`*^9, 
   3.7034514915484447`*^9}, {3.7034515579852333`*^9, 3.703451560644167*^9}, {
   3.709549264558355*^9, 3.709549317301183*^9}, {3.7095493777662086`*^9, 
   3.7095493876947145`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples and Applications", "Section",
 CellChangeTimes->{{3.6797567333782396`*^9, 3.6797567347311673`*^9}, {
  3.696335502893475*^9, 3.6963355050803843`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Creates", " ", "a", " ", "DGProblem", " ", "with", " ", "specific", " ", 
    "edges"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"x", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", " ", "0", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1.5"}], ",", 
         RowBox[{
          RowBox[{"Sqrt", "[", "3", "]"}], "/", "2"}], ",", " ", "0"}], "}"}],
        ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1.311"}], ",", "1.552", ",", "0.702"}], "}"}], ",", 
       " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.779"}], ",", "2.368", ",", "0.474"}], "}"}]}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"eij", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", " ", 
       RowBox[{"1", "\[UndirectedEdge]", "3"}], ",", " ", 
       RowBox[{"1", "\[UndirectedEdge]", "4"}], ",", 
       RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
       RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
       RowBox[{"2", "\[UndirectedEdge]", "5"}], ",", 
       RowBox[{"3", "\[UndirectedEdge]", "4"}], ",", 
       RowBox[{"3", "\[UndirectedEdge]", "5"}], ",", 
       RowBox[{"4", "\[UndirectedEdge]", "5"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"P", " ", "=", " ", 
     RowBox[{"DGProblem", "[", 
      RowBox[{"x", ",", " ", "eij"}], "]"}]}], ";"}], " ", "\n", 
   RowBox[{
    RowBox[{"G", " ", "=", 
     RowBox[{"P", "[", "\"\<G\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PropertyValue", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"G", ",", " ", 
         RowBox[{"2", "\[UndirectedEdge]", "5"}]}], "}"}], ",", " ", 
       "EdgeWeight"}], "]"}], "=", "2.575"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PropertyValue", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"G", ",", " ", 
         RowBox[{"2", "\[UndirectedEdge]", "5"}]}], "}"}], ",", " ", 
       "\"\<DistanceBounds\>\""}], "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"2.2", ",", "2.6"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nodes", "=", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"DGPrintGraph", "[", "G", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"S7", ",", "work"}], "}"}], "=", 
    RowBox[{"DGBPSolver", "[", 
     RowBox[{"G", ",", "nodes", ",", "False", ",", "True"}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.698070175421965*^9, 3.698070175861757*^9}, {
   3.698070213177312*^9, 3.698070315300525*^9}, {3.6980713539418945`*^9, 
   3.6980713662326765`*^9}, {3.6980714206781745`*^9, 
   3.6980714208693013`*^9}, {3.698072476186808*^9, 3.698072476201317*^9}, 
   3.698079529705022*^9, {3.698079678277562*^9, 3.6980796782830653`*^9}, 
   3.698232826904878*^9, 3.69823306442557*^9, {3.6982342604183755`*^9, 
   3.6982342641588564`*^9}, {3.703450355467492*^9, 3.703450505919418*^9}, {
   3.7034505850559626`*^9, 3.7034505932233405`*^9}, {3.7034508902121344`*^9, 
   3.703450963099632*^9}, {3.703451023721037*^9, 3.7034510647777505`*^9}, {
   3.7034511083846593`*^9, 3.703451108817379*^9}, {3.7034511423819675`*^9, 
   3.703451158626009*^9}, {3.703451199287035*^9, 3.703451205657975*^9}, {
   3.7034513335943737`*^9, 3.703451367966873*^9}, {3.7034515381976824`*^9, 
   3.7034515393623114`*^9}, {3.7034517482425175`*^9, 3.703451777160204*^9}, 
   3.7034518510950785`*^9, {3.703452062414386*^9, 3.703452091031469*^9}, {
   3.7034522126552577`*^9, 3.703452287278256*^9}}],

Cell[BoxData[
 RowBox[{"DGPlot3DBackbone", "[", 
  RowBox[{
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"S0", "[", "\"\<Points\>\"", "]"}], ",", 
     RowBox[{"S1", "[", "\"\<Points\>\"", "]"}], ",", 
     RowBox[{"S2", "[", "\"\<Points\>\"", "]"}], ",", 
     RowBox[{"S3", "[", "\"\<Points\>\"", "]"}], ",", 
     RowBox[{"S4", "[", "\"\<Points\>\"", "]"}], ",", 
     RowBox[{"S5", "[", "\"\<Points\>\"", "]"}], ",", 
     RowBox[{"S6", "[", "\"\<Points\>\"", "]"}], ",", 
     RowBox[{"S7", "[", "\"\<Points\>\"", "]"}]}], "]"}], ",", ".2", ",", 
   "0.1"}], "]"}]], "Input",
 CellChangeTimes->{{3.703451608372284*^9, 3.7034516796417027`*^9}, {
  3.703451798710941*^9, 3.7034518374562125`*^9}, {3.7034520955512094`*^9, 
  3.7034521071086063`*^9}, {3.703452292208468*^9, 3.7034523099039793`*^9}}],

Cell[CellGroupData[{

Cell["Small Instance", "Subsection",
 CellChangeTimes->{{3.698268221056161*^9, 3.698268229004469*^9}, {
  3.7009922963106003`*^9, 3.7009923183190393`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"edges", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "7"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "7"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"DGRandom3DBackbone", "[", "7", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", 
    RowBox[{
     RowBox[{"X", "[", "\"\<Points\>\"", "]"}], ",", "edges"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"P", "[", "\"\<X\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"G", "=", 
   RowBox[{"P", "[", "\"\<G\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"nodes", "=", 
  RowBox[{"Table", "[", 
   RowBox[{"i", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", 
       RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"S", ",", "work"}], "}"}], "=", 
   RowBox[{"DGBPSolver", "[", 
    RowBox[{"G", ",", "nodes", ",", "False", ",", "True"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"X", "=", 
  RowBox[{"S", "[", "\"\<Points\>\"", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"B", "=", 
  RowBox[{"S", "[", "\"\<Branches\>\"", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"DGPlot3DBackbone", "[", 
  RowBox[{"X", ",", ".2", ",", ".08"}], "]"}]}], "Input",
 CellChangeTimes->{{3.700992316272402*^9, 3.7009923884478188`*^9}, {
   3.7009925127862043`*^9, 3.700992537293635*^9}, {3.70099305171308*^9, 
   3.7009930566034174`*^9}, {3.700993247763296*^9, 3.700993340032179*^9}, {
   3.700993521193789*^9, 3.700993536375091*^9}, {3.700993602648387*^9, 
   3.7009936033240385`*^9}, {3.700994063161317*^9, 3.700994100399763*^9}, {
   3.700994221044218*^9, 3.700994249734191*^9}, {3.7009969511055737`*^9, 
   3.7009969632500596`*^9}, {3.7027175853756847`*^9, 3.7027176224992905`*^9}, 
   3.7027179367510824`*^9, {3.702717987756665*^9, 3.70271798969906*^9}, {
   3.7027180484700594`*^9, 3.7027181111759844`*^9}, {3.7027181454983077`*^9, 
   3.702718210788308*^9}, {3.7027182591529436`*^9, 3.702718265089552*^9}, {
   3.7027183355720863`*^9, 3.7027183645707674`*^9}, {3.7027189430955796`*^9, 
   3.7027189441498065`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Easy case using natural order", "Subsection",
 CellChangeTimes->{{3.698268221056161*^9, 3.698268229004469*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGRandomMDGP", "[", 
    RowBox[{"20", ",", "0.0", ",", "5"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nodes", "=", 
   RowBox[{"DGNaturalOrdering", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"timeElapsed", "=", 
   RowBox[{
    RowBox[{"Timing", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"S", ",", "work"}], "}"}], "=", 
      RowBox[{"DGBPSolver", "[", 
       RowBox[{
        RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "nodes", ",", "False", ",",
         "True"}], "]"}]}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<TimeElapsed=\>\"", ",", "timeElapsed"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGRelativeResidue", "[", 
   RowBox[{
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", 
    RowBox[{
     RowBox[{"S", "[", "\"\<Points\>\"", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", "True"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.693311450156807*^9, 3.693311476044976*^9}, {
   3.696338936452612*^9, 3.696338990378742*^9}, {3.6979845883633885`*^9, 
   3.697984617355788*^9}, {3.6979850347422743`*^9, 3.697985037135499*^9}, {
   3.6979953998165607`*^9, 3.6979954128237066`*^9}, {3.6979955008255515`*^9, 
   3.697995501469979*^9}, {3.698063057075743*^9, 3.6980630699679604`*^9}, 
   3.69807248124969*^9, {3.698258900635863*^9, 3.698259006148343*^9}, {
   3.698259380018849*^9, 3.6982593802355237`*^9}, {3.6982597311305723`*^9, 
   3.698259910722397*^9}, {3.69826115973089*^9, 3.698261179310876*^9}, {
   3.6982612672137356`*^9, 3.6982612687552586`*^9}, {3.698262268542156*^9, 
   3.698262269980609*^9}, {3.698262398805439*^9, 3.698262426512816*^9}, {
   3.698262569782508*^9, 3.6982625713080196`*^9}, {3.69826263228246*^9, 
   3.6982626331715517`*^9}, {3.6982682099045897`*^9, 3.698268212604455*^9}, {
   3.698268974378912*^9, 3.6982689818583913`*^9}, {3.6983225309017057`*^9, 
   3.698322539129117*^9}, 3.7003143257713733`*^9, {3.7005613624266267`*^9, 
   3.7005613782175703`*^9}, {3.7005614096460247`*^9, 3.700561462382221*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Instance with more than two solutions", "Subsection",
 CellChangeTimes->{{3.698268221056161*^9, 3.698268229004469*^9}, {
  3.69826828783591*^9, 3.6982682959829154`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "3"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"edges", "=", 
    RowBox[{"DGEdgesMDGP", "[", 
     RowBox[{"Length", "[", "x", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"AppendTo", "[", 
    RowBox[{"edges", ",", 
     RowBox[{"1", "\[UndirectedEdge]", "6"}]}], "]"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGProblem", "[", 
    RowBox[{"x", ",", "edges"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nodes", "=", 
   RowBox[{"DGNaturalOrdering", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"S", ",", "work"}], "}"}], "=", 
   RowBox[{"DGBPSolver", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "nodes", ",", "False", ",", 
     "True"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6982675435780106`*^9, 3.6982676849749393`*^9}, {
   3.6982677879648824`*^9, 3.69826778900282*^9}, 3.6982678486650257`*^9, {
   3.6982678894365683`*^9, 3.6982678923935056`*^9}, {3.698267923742344*^9, 
   3.6982679643030577`*^9}, {3.6982680118994756`*^9, 
   3.6982680172609124`*^9}, {3.6982682635398445`*^9, 
   3.6982682725164557`*^9}, {3.698268335835042*^9, 3.6982683377986155`*^9}, {
   3.6982683734273853`*^9, 3.69826837813604*^9}, {3.6982688333430157`*^9, 
   3.698268846448496*^9}, 3.698268908772118*^9, {3.698268995492119*^9, 
   3.6982690516700015`*^9}, {3.69832255207037*^9, 3.6983225532429857`*^9}, {
   3.7027184519543343`*^9, 3.7027184669269233`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Calculating the number of solution as a function of the number of constraints \
(max distance)\
\>", "Subsection",
 CellChangeTimes->{{3.698268221056161*^9, 3.698268229004469*^9}, {
  3.69826828783591*^9, 3.6982682959829154`*^9}, {3.698322580067991*^9, 
  3.698322582100933*^9}}],

Cell[BoxData[{
 RowBox[{"G", "=", 
  RowBox[{
   RowBox[{"DGRandomMDGP", "[", "10", "]"}], "[", "\"\<G\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nSample", "=", "25"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"density", "=", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5"}], 
     "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"density", " ", "of", " ", "edges"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"generating", " ", "sample", " ", "data"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<ErrorBarPlots`\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"allEdges", "=", 
  RowBox[{"EdgeList", "[", "G", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nSols", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "density", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "nSample"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "density", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "nSample"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", 
      RowBox[{"Length", "[", "density", "]"}]}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"d", "=", 
       RowBox[{"density", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"j", "=", "1"}], ",", 
        RowBox[{"j", "\[LessEqual]", "nSample"}], ",", 
        RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"create", " ", "subgraph"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gij", "=", "G"}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"k", "=", "1"}], ",", 
           RowBox[{"k", "\[LessEqual]", 
            RowBox[{"Length", "[", "allEdges", "]"}]}], ",", 
           RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ek", "=", 
             RowBox[{"allEdges", "[", 
              RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"RandomReal", "[", "]"}], ">", "d"}], "&&", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{
                  RowBox[{"ek", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "-", 
                  RowBox[{"ek", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ">", "3"}]}], ",", 
              RowBox[{"gij", "=", 
               RowBox[{"EdgeDelete", "[", 
                RowBox[{"gij", ",", "ek"}], "]"}]}]}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"g", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", "j", "]"}], "]"}], "=", "gij"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"solve", " ", "instance"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"nodes", "=", 
          RowBox[{"Table", "[", 
           RowBox[{"i", ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", 
               RowBox[{"VertexList", "[", "gij", "]"}], "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"S", ",", "work"}], "}"}], "=", 
          RowBox[{"DGBPSolver", "[", 
           RowBox[{"gij", ",", "nodes"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"nSols", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", "j", "]"}], "]"}], "=", 
          RowBox[{"Length", "[", 
           RowBox[{"S", "[", "\"\<Points\>\"", "]"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"plot", " ", "results"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"ErrorListPlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"density", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"Mean", "[", 
          RowBox[{"nSols", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}], ",", 
       RowBox[{"ErrorBar", "[", 
        RowBox[{"StandardDeviation", "[", 
         RowBox[{"nSols", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "density", "]"}]}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Density of Edges\>\"", ",", " ", "\"\<Number of Solutions\>\""}], 
     "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.696334028602558*^9, 3.6963341389390335`*^9}, {
   3.696334203814807*^9, 3.696334553004195*^9}, {3.6963345893136067`*^9, 
   3.6963346447828355`*^9}, {3.6963346937306294`*^9, 
   3.6963348195399055`*^9}, {3.6963348799142075`*^9, 
   3.6963348804536867`*^9}, {3.696334945896783*^9, 3.6963349840214233`*^9}, {
   3.696335032797847*^9, 3.6963351414831853`*^9}, {3.6963352043938837`*^9, 
   3.696335230724231*^9}, {3.696335343802195*^9, 3.6963353555009074`*^9}, 
   3.696335412777022*^9, {3.696339497682501*^9, 3.6963395030722947`*^9}, {
   3.696339541525276*^9, 3.6963395556060305`*^9}, {3.69634027449716*^9, 
   3.6963403350733366`*^9}, {3.6982620163546495`*^9, 
   3.6982620232827463`*^9}, {3.698262097986717*^9, 3.6982621670029964`*^9}, {
   3.6982698650202107`*^9, 3.6982699046144314`*^9}}]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["IBPSolver", "Subchapter",
 CellChangeTimes->{{3.6795571036686206`*^9, 3.679557113728629*^9}, {
  3.6811328435634823`*^9, 3.681132843691572*^9}, {3.682701946598136*^9, 
  3.682701963537011*^9}}],

Cell[CellGroupData[{

Cell["Source Code", "Section",
 CellChangeTimes->{{3.679557165643343*^9, 3.6795571685082006`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", 
    RowBox[{"DGIPBSubG", ",", "DGIBPSolver"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGIPBSubG", "[", 
     RowBox[{"G_", ",", "k_", ",", "branch_", ",", "nslices_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", "E", ",", 
        RowBox[{"W", "=", "G"}], ",", "nodes", ",", "ei", ",", "ej", ",", 
        "dij", ",", "lij", ",", "uij"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Delete", " ", "vertices", " ", "k"}], "+", "1"}], ",", "...",
         ",", "numberOfAtoms"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nodes", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"i", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"k", "+", "1"}], ",", 
            RowBox[{"Length", "[", 
             RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], "}"}]}], "]"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"W", "=", 
        RowBox[{"VertexDelete", "[", 
         RowBox[{"G", ",", "nodes"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"E", "=", 
        RowBox[{"EdgeList", "[", "W", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dij", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"lij", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"uij", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "E", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", 
          RowBox[{"Length", "[", "E", "]"}]}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"lij", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"uij", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "=", 
           RowBox[{"DGEdgeDistanceBounds", "[", 
            RowBox[{"G", ",", 
             RowBox[{"E", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"dij", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{"DGEdgeWeight", "[", 
            RowBox[{"G", ",", 
             RowBox[{"E", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "set", " ", "weight", " ", "affected", " ", "by", " ", "branch"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ei", "=", 
           RowBox[{
            RowBox[{"E", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ej", "=", 
           RowBox[{
            RowBox[{"E", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ei", ">", "ej"}], ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ei", ",", "ej"}], "}"}], "=", 
             RowBox[{"{", 
              RowBox[{"ej", ",", "ei"}], "}"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ej", "-", "ei"}], "\[Equal]", "3"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"dij", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"uij", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "-", 
                 RowBox[{"lij", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", "nslices"}]}],
              ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"dij", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "=", 
              RowBox[{
               RowBox[{
                RowBox[{"dij", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "*", 
                RowBox[{"branch", "[", 
                 RowBox[{"[", "ej", "]"}], "]"}]}], "+", 
               RowBox[{"lij", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "+", 
               RowBox[{
                RowBox[{"dij", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "/", "2.0"}]}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"W", "=", 
        RowBox[{"Graph", "[", 
         RowBox[{"E", ",", 
          RowBox[{"EdgeWeight", "\[Rule]", "dij"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", 
          RowBox[{"Length", "[", "E", "]"}]}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"W", ",", 
               RowBox[{"E", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", " ", 
             "\"\<DistanceBounds\>\""}], "]"}], " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"lij", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"uij", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "W", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGIBPSolver", "[", 
    RowBox[{"G_", ",", "nslices_", ",", 
     RowBox[{"verbose_:", "False"}]}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Calculate", " ", "all", " ", "solutions", " ", "of", " ", "the", " ", 
     "DMDGP", " ", "instance", " ", "defined", " ", "by", " ", "the", " ", 
     "graph", " ", "G", " ", "using", " ", "natural", " ", 
     RowBox[{"ordering", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"local", " ", "variables"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "i", ",", "k", ",", "numberOfAtoms", ",", "prune", ",", "branch", ",", 
       "W", ",", "S", ",", "SW", ",", "work", ",", "locwork", ",", 
       RowBox[{"tol", "=", 
        RowBox[{"10", "^", 
         RowBox[{"(", 
          RowBox[{"-", "5"}], ")"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"numberOfAtoms", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"init", " ", "IBPTree"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"branch", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"branch", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "3"}], "]"}], "]"}], "=", 
       RowBox[{"nslices", "-", "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"work", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "numberOfAtoms"}], "}"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"work", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "3"}], "]"}], "]"}], "=", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"solutions", " ", "and", " ", "branches"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"S", "=", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Points\>\"", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"\"\<Branches\>\"", "\[Rule]", 
          RowBox[{"{", "}"}]}]}], "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"k", "=", "4"}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"k", ">", "3"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"W", "=", 
          RowBox[{"DGIPBSubG", "[", 
           RowBox[{"G", ",", "k", ",", "branch", ",", "nslices"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"SW", ",", "locwork"}], "}"}], "=", 
          RowBox[{"DGBPSolver", "[", 
           RowBox[{"W", ",", 
            RowBox[{"DGNaturalOrdering", "[", "W", "]"}], ",", 
            RowBox[{"k", "\[NotEqual]", "numberOfAtoms"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"i", "=", "4"}], ",", 
           RowBox[{"i", "\[LessEqual]", "k"}], ",", 
           RowBox[{"i", "++"}], ",", 
           RowBox[{
            RowBox[{"work", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "+=", 
            RowBox[{"locwork", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"prune", "=", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"SW", "[", "\"\<Points\>\"", "]"}], "]"}], "\[Equal]", 
           "0"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"unfeasible", " ", "subgraph"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<[ibp] k=\>\"", ",", "k", ",", "\"\<  branch=\>\"", ",", 
             "branch", ",", " ", "\"\<   work=\>\"", ",", "work", ",", 
             "\"\< prune=\>\"", ",", "prune"}], "]"}], ";"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"solution", " ", "found"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "[", "prune", "]"}], "&&", 
            RowBox[{"k", "\[Equal]", "numberOfAtoms"}]}], " ", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"S", "[", "\"\<Points\>\"", "]"}], "=", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"S", "[", "\"\<Points\>\"", "]"}], ",", 
               RowBox[{"SW", "[", "\"\<Points\>\"", "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"S", "[", "\"\<Branches\>\"", "]"}], ",", "branch"}], 
             "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"update", " ", "tree", " ", "node"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"prune", "=", 
          RowBox[{"prune", "||", 
           RowBox[{"k", "\[Equal]", 
            RowBox[{"Length", "[", "branch", "]"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"prune", "&&", 
            RowBox[{
             RowBox[{"branch", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "\[Equal]", 
             RowBox[{"nslices", "-", "1"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"k", ">", "3"}], "&&", 
               RowBox[{
                RowBox[{"branch", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], "\[Equal]", 
                RowBox[{"nslices", "-", "1"}]}]}], ",", 
              RowBox[{"k", "--"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"prune", "&&", 
            RowBox[{
             RowBox[{"branch", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "<", 
             RowBox[{"nslices", "-", "1"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"branch", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "++"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"i", "=", 
               RowBox[{"k", "+", "1"}]}], ",", 
              RowBox[{"i", "\[LessEqual]", 
               RowBox[{"Length", "[", "branch", "]"}]}], ",", 
              RowBox[{"i", "++"}], ",", 
              RowBox[{
               RowBox[{"branch", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", "0"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", "prune", "]"}], ",", 
           RowBox[{"k", "++"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"verbose", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<\!\(\*
StyleBox[\"DGIBPSolver\",
FontSlant->\"Italic\",
FontVariations->{\"Underline\"->True}]\)\>\"", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Number of solutions: \>\"", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"S", "[", "\"\<Points\>\"", "]"}], "]"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"S", ",", "work"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6827019671531935`*^9, 3.6827019883797054`*^9}, {
   3.6827520058773313`*^9, 3.682752007842795*^9}, {3.682773523900758*^9, 
   3.6827739504220514`*^9}, {3.6827739820939207`*^9, 3.682773997290721*^9}, {
   3.6827748027586565`*^9, 3.6827748602420864`*^9}, {3.682774937541239*^9, 
   3.6827753481045656`*^9}, {3.6827754855464773`*^9, 3.682775768077546*^9}, {
   3.6827758431794395`*^9, 3.682775852191575*^9}, {3.6827761086040697`*^9, 
   3.6827761356665545`*^9}, {3.6827761799051275`*^9, 
   3.6827762569294157`*^9}, {3.682776288487507*^9, 3.6827764838117733`*^9}, {
   3.682776598677207*^9, 3.682776711866549*^9}, {3.682776757766048*^9, 
   3.682776806526044*^9}, {3.6827769820156193`*^9, 3.6827770574592137`*^9}, {
   3.6827771830672836`*^9, 3.6827772226146555`*^9}, {3.6827772538317227`*^9, 
   3.682777263271402*^9}, {3.6827775456748238`*^9, 3.682777546518789*^9}, {
   3.6827775797151136`*^9, 3.6827775984622955`*^9}, {3.682777657482841*^9, 
   3.6827777067571774`*^9}, {3.6827777903994412`*^9, 
   3.6827777968861074`*^9}, {3.682777869172826*^9, 3.682777869551065*^9}, {
   3.6827779315169716`*^9, 3.682777931686807*^9}, {3.682778028203849*^9, 
   3.6827780327785378`*^9}, {3.682778114875511*^9, 3.6827781151693735`*^9}, {
   3.6827786318985825`*^9, 3.6827786532106905`*^9}, {3.682778780232845*^9, 
   3.6827788150088916`*^9}, {3.682778860589865*^9, 3.682778918862643*^9}, {
   3.6827790426077757`*^9, 3.6827794809945264`*^9}, {3.6827795619985237`*^9, 
   3.682779590990248*^9}, {3.682779976097824*^9, 3.6827799798825316`*^9}, 
   3.6827800453274255`*^9, {3.6827800812274303`*^9, 3.6827801376397424`*^9}, {
   3.6827801817742767`*^9, 3.682780266523752*^9}, {3.6827805401257453`*^9, 
   3.682780661598824*^9}, {3.6827807301684313`*^9, 3.6827807439590216`*^9}, {
   3.6827807922573433`*^9, 3.682780825155981*^9}, {3.68278089072889*^9, 
   3.6827809003062625`*^9}, {3.6827809636600475`*^9, 
   3.6827809691730986`*^9}, {3.682781052145022*^9, 3.6827810576947823`*^9}, 
   3.6827811031071897`*^9, {3.68278114552192*^9, 3.682781148502773*^9}, {
   3.682781191030442*^9, 3.682781251899205*^9}, {3.682781354202553*^9, 
   3.6827813544128523`*^9}, 3.6827813991698384`*^9, {3.6827814442928348`*^9, 
   3.6827814467598443`*^9}, {3.682781487351517*^9, 3.6827814884135475`*^9}, {
   3.6827818109759817`*^9, 3.682781813545724*^9}, {3.6827853356617775`*^9, 
   3.682785337550229*^9}, {3.6827867368412943`*^9, 3.682786741159988*^9}, {
   3.682786807927786*^9, 3.682786819894947*^9}, {3.68278715946465*^9, 
   3.682787162255832*^9}, {3.6827874230740376`*^9, 3.6827874366378717`*^9}, {
   3.682789227649762*^9, 3.682789230497446*^9}, {3.6827893815529485`*^9, 
   3.6827893845262256`*^9}, {3.682874323027193*^9, 3.682874336182909*^9}, {
   3.6829343494785357`*^9, 3.682934438253458*^9}, {3.682934871900261*^9, 
   3.682934888830892*^9}, {3.6829350043195353`*^9, 3.6829350106554976`*^9}, {
   3.6829355309198093`*^9, 3.682935703315592*^9}, {3.6829357824619856`*^9, 
   3.682935807468607*^9}, {3.683022005274223*^9, 3.6830220091210856`*^9}, {
   3.683022039821942*^9, 3.683022086349081*^9}, {3.6830326439989023`*^9, 
   3.6830326466660814`*^9}, {3.6982787207453346`*^9, 
   3.6982787416320457`*^9}, {3.6982788335657873`*^9, 
   3.6982788373652954`*^9}, {3.6982788850684876`*^9, 3.698278897118658*^9}, 
   3.698279124824894*^9, {3.6982791582475395`*^9, 3.6982791711539445`*^9}, {
   3.698309861882863*^9, 3.698309882569612*^9}, {3.69831038648313*^9, 
   3.698310415785906*^9}, {3.698310468313056*^9, 3.6983104947750435`*^9}, {
   3.6983105670383787`*^9, 3.6983108051037474`*^9}, {3.6983108460196304`*^9, 
   3.69831084647191*^9}, {3.6983109559174995`*^9, 3.6983109779913588`*^9}, {
   3.6983110265178947`*^9, 3.698311291553689*^9}, {3.6983145988464184`*^9, 
   3.69831460419575*^9}, {3.6983146463789663`*^9, 3.698314707852988*^9}, {
   3.6983147821238956`*^9, 3.698314782640411*^9}, {3.6983150107432384`*^9, 
   3.698315047343246*^9}, {3.698315092713068*^9, 3.6983152004211903`*^9}, {
   3.698315232561533*^9, 3.698315260222073*^9}, {3.6983157676291466`*^9, 
   3.698315857264064*^9}, {3.6983164679800034`*^9, 3.6983164752378836`*^9}, {
   3.6983168783230886`*^9, 3.6983170132968063`*^9}, {3.698317121264511*^9, 
   3.698317124532487*^9}, {3.6983171651430187`*^9, 3.6983172096940494`*^9}, {
   3.6983172690091677`*^9, 3.698317285520046*^9}, {3.698317341261922*^9, 
   3.6983174086930933`*^9}, {3.6983175075561094`*^9, 
   3.6983175489928827`*^9}, {3.698317985726252*^9, 3.6983180308053017`*^9}, {
   3.6983180804420214`*^9, 3.698318153053418*^9}, {3.6983182050383067`*^9, 
   3.698318227520159*^9}, {3.6983184577908587`*^9, 3.698318459816066*^9}, {
   3.6983201490009527`*^9, 3.6983202171540594`*^9}, {3.6983202616319118`*^9, 
   3.698320359747717*^9}, {3.6983204038955097`*^9, 3.698320404847747*^9}, {
   3.6983204662064514`*^9, 3.6983204668746033`*^9}, {3.6983205699139247`*^9, 
   3.6983205727767935`*^9}, {3.6983206452559185`*^9, 
   3.6983207396592913`*^9}, {3.698320820824626*^9, 3.698320839575612*^9}, {
   3.6983210012734385`*^9, 3.698321017213336*^9}, {3.6983210938335676`*^9, 
   3.6983211554295063`*^9}, {3.698321266161542*^9, 3.6983213674918222`*^9}, {
   3.6983214012285056`*^9, 3.698321481513752*^9}, {3.6983215312120943`*^9, 
   3.6983216238692656`*^9}, {3.6983217143387938`*^9, 3.6983218106859655`*^9}, 
   3.6983218871641626`*^9, {3.6983221735633664`*^9, 3.6983221756940465`*^9}, {
   3.6983223206968775`*^9, 3.6983223430101957`*^9}, {3.6983226000175014`*^9, 
   3.698322604477955*^9}, {3.6983227729344378`*^9, 3.698322785837361*^9}, {
   3.6983228585817385`*^9, 3.6983230005510645`*^9}, {3.6983241502043796`*^9, 
   3.6983247033865213`*^9}, {3.6983247355954504`*^9, 
   3.6983247369419065`*^9}, {3.698324818157818*^9, 3.698324911463064*^9}, {
   3.6983251317568593`*^9, 3.6983251389555683`*^9}, {3.6983253273352985`*^9, 
   3.698325353730069*^9}, {3.6983253976947374`*^9, 3.6983254234251127`*^9}, {
   3.698325469724806*^9, 3.6983254824073663`*^9}, {3.6983256972091217`*^9, 
   3.6983257021931415`*^9}, 3.6983257621151047`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples and Applications", "Section",
 CellChangeTimes->{{3.682777369516736*^9, 3.6827773754382195`*^9}, {
  3.6983259775553503`*^9, 3.6983259809093723`*^9}}],

Cell[CellGroupData[{

Cell["Check DGIBPSolver", "Subsection",
 CellChangeTimes->{{3.6983258405729327`*^9, 3.6983258521025915`*^9}, {
  3.7034507013622255`*^9, 3.7034507032381945`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGRandomMDGP", "[", 
    RowBox[{"5", ",", "0.1", ",", "5.0"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"branch", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nslices", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"W", "=", 
   RowBox[{"DGIPBSubG", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "4", ",", "branch", ",", 
     "nslices"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGPrintGraph", "[", 
   RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGPrintGraph", "[", "W", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.698324758634654*^9, 3.6983248054901347`*^9}, {
  3.6983249364999857`*^9, 3.698324940575715*^9}, {3.698325054588522*^9, 
  3.698325054742776*^9}, {3.6983258176326985`*^9, 3.698325836345594*^9}, {
  3.6983258878299446`*^9, 3.6983259175102806`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving a small instance using DGIBP ", "Subsection",
 CellChangeTimes->{{3.698325939397998*^9, 3.6983259605760155`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"DGRandomMDGP", "[", 
    RowBox[{"5", ",", "0.1", ",", "5.0"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DGPrintGraph", "[", 
  RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6798218509178233`*^9, 3.679821852271891*^9}, {
   3.6798220754379344`*^9, 3.6798220755372047`*^9}, {3.679822744321784*^9, 
   3.6798227445214615`*^9}, {3.6798231052765684`*^9, 3.679823107593405*^9}, 
   3.679823226558363*^9, {3.6798233451775875`*^9, 3.679823345308581*^9}, {
   3.679823525737986*^9, 3.679823549906366*^9}, {3.6798263139146395`*^9, 
   3.679826344570452*^9}, {3.6798288602280912`*^9, 3.6798288604903975`*^9}, {
   3.6798288950564623`*^9, 3.679828994620492*^9}, {3.679829044969572*^9, 
   3.6798290909698343`*^9}, {3.6798294100005565`*^9, 
   3.6798294105697436`*^9}, {3.6798295004715223`*^9, 
   3.6798295681002893`*^9}, {3.6798296319378924`*^9, 3.679829632507357*^9}, {
   3.6798299800985794`*^9, 3.6798299863477526`*^9}, {3.679830157933735*^9, 
   3.6798301597117043`*^9}, {3.6798302974701996`*^9, 
   3.6798303164031887`*^9}, {3.6798303891181116`*^9, 3.679830389302563*^9}, {
   3.6798304759096456`*^9, 3.679830478014727*^9}, {3.6799119298147106`*^9, 
   3.6799119406954846`*^9}, {3.679912001613147*^9, 3.679912019708365*^9}, {
   3.6799121456440763`*^9, 3.6799121778114533`*^9}, 3.679912535631927*^9, {
   3.6799174812432394`*^9, 3.6799174816978993`*^9}, {3.679918592547327*^9, 
   3.6799186296132526`*^9}, {3.6799255011209993`*^9, 
   3.6799255012742624`*^9}, {3.6799265772569237`*^9, 
   3.6799266196275845`*^9}, {3.679927091468864*^9, 3.6799271177650127`*^9}, {
   3.679927217233017*^9, 3.679927233987025*^9}, {3.679927271460558*^9, 
   3.679927271760435*^9}, {3.679927363032942*^9, 3.679927363786351*^9}, 
   3.6799274640577226`*^9, {3.6799274956489134`*^9, 3.6799275047564964`*^9}, {
   3.6802494864436903`*^9, 3.680249517698353*^9}, {3.680249838745507*^9, 
   3.680249885493765*^9}, {3.6802499632347374`*^9, 3.68024997989824*^9}, {
   3.6802500278218193`*^9, 3.680250042557376*^9}, {3.6802500816458673`*^9, 
   3.680250094230627*^9}, {3.6802501729429226`*^9, 3.680250245242584*^9}, {
   3.680250277069769*^9, 3.680250349656209*^9}, {3.6802561938862762`*^9, 
   3.680256217314024*^9}, {3.6802562822999315`*^9, 3.6802562845355077`*^9}, {
   3.680259514448849*^9, 3.68025956932335*^9}, {3.680259617915313*^9, 
   3.680259625069577*^9}, {3.6802596588968315`*^9, 3.6802596591149898`*^9}, {
   3.6802597057100697`*^9, 3.680259710865752*^9}, {3.680259778882868*^9, 
   3.680259779298339*^9}, {3.6802598345877275`*^9, 3.6802598347003174`*^9}, {
   3.6802634539441957`*^9, 3.6802634724224014`*^9}, {3.680264125324051*^9, 
   3.680264127539488*^9}, {3.680971309238633*^9, 3.6809713321665344`*^9}, {
   3.6809713775361547`*^9, 3.680971388619849*^9}, 3.680971453133582*^9, {
   3.6809717846377277`*^9, 3.6809717933103046`*^9}, 3.682752354734047*^9, 
   3.682757377902835*^9, {3.6827585847612524`*^9, 3.682758585270115*^9}, {
   3.682758922849889*^9, 3.6827589310888653`*^9}, 3.682758963373986*^9, {
   3.682777338739936*^9, 3.6827773397706623`*^9}, {3.6827773885972614`*^9, 
   3.682777509880164*^9}, {3.682777995186551*^9, 3.6827779952866464`*^9}, {
   3.682778057930979*^9, 3.6827780633222637`*^9}, {3.682778129241908*^9, 
   3.682778129377575*^9}, {3.682778697943698*^9, 3.682778699490327*^9}, {
   3.682778953526342*^9, 3.6827789556117177`*^9}, {3.682779505273485*^9, 
   3.682779536222084*^9}, {3.6827800751236987`*^9, 3.682780075207179*^9}, {
   3.682781360244443*^9, 3.682781393632818*^9}, 3.682781437277698*^9, {
   3.6830326521888623`*^9, 3.68303266619322*^9}, 3.6980724813342457`*^9, {
   3.698316545143901*^9, 3.698316631268173*^9}, {3.698316730685111*^9, 
   3.698316736404586*^9}, {3.6983167909271526`*^9, 3.698316800641884*^9}, {
   3.6983170748361397`*^9, 3.698317079814169*^9}, {3.698318182985692*^9, 
   3.6983181898300004`*^9}, {3.6983183336292505`*^9, 3.698318356878724*^9}, 
   3.6983187108076825`*^9, {3.6983189659733076`*^9, 3.6983189766865835`*^9}, 
   3.698324932826663*^9, 3.698325230415392*^9, {3.6983257987214537`*^9, 
   3.6983258007115965`*^9}, {3.6983259353272004`*^9, 3.698325936799776*^9}, {
   3.698325998727798*^9, 3.6983260250657864`*^9}, {3.7027185261646767`*^9, 
   3.7027185719281225`*^9}, {3.702718621203302*^9, 3.7027186541041775`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"nslices", "=", "2"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "testing", " ", "increasing", " ", "the", " ", "the", " ", "number", " ", 
    "of", " ", "slices"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"S", ",", "work"}], "}"}], "=", 
   RowBox[{"DGIBPSolver", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "nslices", ",", "True"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.702718576496505*^9, 3.702718618169186*^9}, 
   3.7027186645379457`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"nslices", "=", "3"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "increasing", " ", "the", " ", "number", " ", "of", " ", "slices"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"S", ",", "work"}], "}"}], "=", 
   RowBox[{"DGIBPSolver", "[", 
    RowBox[{
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], ",", "nslices", ",", "True"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7027186765200605`*^9, 3.702718693221716*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Illustrating the tree exponential growth", "Subsection",
 CellChangeTimes->{{3.697799201845194*^9, 3.6977992165628195`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Plot", " ", "IBP", " ", "Tree", " ", 
    RowBox[{"(", 
     RowBox[{"it", " ", "can", " ", "be", " ", "very", " ", 
      RowBox[{
       RowBox[{"slow", "!!"}], "!"}]}], ")"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"numberOfAtoms", "=", "9"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numberOfSlices", "=", "2"}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"or", " ", "2", " ", "at", " ", "max"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"node", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"edges", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"count", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", 
      RowBox[{"i", "\[LessEqual]", 
       RowBox[{"2", "*", "numberOfSlices"}]}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"edges", ",", 
        RowBox[{"node", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{"++", "count"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]", 
     "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"T", "=", 
     RowBox[{"TreeGraph", "[", "edges", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"k", "=", "5"}], ",", 
     RowBox[{"k", "\[LessEqual]", "numberOfAtoms"}], ",", 
     RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"leafs", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"VertexList", "[", "T", "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"VertexDegree", "[", 
            RowBox[{"T", ",", "#"}], "]"}], "===", "1"}], "&"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"count", "=", 
       RowBox[{"Max", "[", 
        RowBox[{"VertexList", "[", "T", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "leafs", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"node", "=", 
          RowBox[{"leafs", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"j", "=", "1"}], ",", 
           RowBox[{"j", "\[LessEqual]", 
            RowBox[{"2", "*", "numberOfSlices"}]}], ",", 
           RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"edges", ",", 
             RowBox[{"node", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{"++", "count"}], ")"}]}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"T", "=", 
       RowBox[{"TreeGraph", "[", "edges", "]"}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   RowBox[{"Print", "[", "T", "]"}], "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Number of Vertex=\>\"", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"VertexList", "[", "T", "]"}], "]"}]}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.697799241731846*^9, 3.697799254334177*^9}, {
   3.697799346715639*^9, 3.697799494692484*^9}, {3.6977995415977516`*^9, 
   3.697799554133665*^9}, {3.69779958568857*^9, 3.6977996515207334`*^9}, {
   3.6977997018072743`*^9, 3.6977998432952023`*^9}, {3.697800084682583*^9, 
   3.697800241626899*^9}, {3.6978002876775465`*^9, 3.697800679942664*^9}, {
   3.697805514452196*^9, 3.6978056518731575`*^9}, {3.697822288932176*^9, 
   3.6978223841049337`*^9}, {3.697822429222677*^9, 3.6978225315229197`*^9}, {
   3.697822594480259*^9, 3.6978225945599475`*^9}, {3.6978228346728067`*^9, 
   3.697822844849125*^9}, {3.6978235002195606`*^9, 3.6978235312395496`*^9}, {
   3.697823578517539*^9, 3.697823602359697*^9}, {3.697823669118662*^9, 
   3.697823677917166*^9}, {3.697824726940096*^9, 3.697824736486435*^9}, 
   3.6981575223574333`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Number", " ", "of", " ", "nodes", " ", "on", " ", "IBP", " ", "tree"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"NumberOfIBPVertex", "[", 
      RowBox[{"numberOfAtoms_", ",", "numberOfSlices_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"2", "*", "numberOfSlices"}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"numberOfAtoms", "-", "2"}], ")"}]}], "-", "1"}], ")"}], 
        "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"2", "*", "numberOfSlices"}], ")"}], "-", "1"}], ")"}]}]}],
       "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"NumberOfIBPVertex", "[", 
    RowBox[{"9", ",", "1"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6978228548611045`*^9, 3.697822917604511*^9}, {
  3.6978229575375485`*^9, 3.6978231634677305`*^9}, {3.6978236566561227`*^9, 
  3.697823659776985*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"xy", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"NumberOfIBPVertex", "[", 
        RowBox[{"9", ",", "i"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListLogPlot", "[", 
  RowBox[{"xy", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Number of Vertex on IBP Tree\>\""}]}],
   "]"}]}], "Input",
 CellChangeTimes->{{3.697823173590905*^9, 3.6978232361668634`*^9}, {
  3.697823267024607*^9, 3.6978232863122206`*^9}, {3.697823356320365*^9, 
  3.6978234212662773`*^9}, {3.697823707493438*^9, 3.697823746026819*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Top", " ", "1"}], ":", " ", 
    RowBox[{
    "Sunway", " ", "TaihuLight", " ", "at", " ", "93", " ", "petaflops", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"10", "^", "15"}], " ", "flops"}], ")"}], " ", "on", " ", 
     "November", " ", "2016"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"xy", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{
          RowBox[{"NumberOfIBPVertex", "[", 
           RowBox[{"i", ",", "4"}], "]"}], "/", 
          RowBox[{"(", 
           RowBox[{"365", "*", "24", "*", "3600", "*", 
            RowBox[{"(", 
             RowBox[{"93", "*", 
              RowBox[{"10", "^", "15"}]}], ")"}]}], ")"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "40"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"ListLogPlot", "[", 
    RowBox[{"xy", ",", 
     RowBox[{"Joined", "\[Rule]", "True"}], ",", 
     RowBox[{
     "PlotLabel", "\[Rule]", 
      "\"\<Time to compute IBP tree on 93 petaflops\>\""}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Number of Atoms\>\"", ",", "\"\<Years\>\""}], "}"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.697823996331522*^9, 3.697824013870758*^9}, {
  3.69782413901967*^9, 3.6978242355134754`*^9}, {3.697824272133033*^9, 
  3.6978242812725134`*^9}, {3.6978243603271613`*^9, 3.6978243609971724`*^9}, {
  3.697824393211303*^9, 3.6978244203256054`*^9}, {3.697824458619769*^9, 
  3.697824517973592*^9}, {3.6978245542102156`*^9, 3.697824700730853*^9}, {
  3.698157868126751*^9, 3.698157870975642*^9}, {3.6981579468509655`*^9, 
  3.6981579486031284`*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4) Applets ", "Chapter",
 CellChangeTimes->{
  3.6896820831181965`*^9, {3.6957184087362404`*^9, 3.695718419041832*^9}, {
   3.698067376091146*^9, 3.6980673786551833`*^9}, {3.698080445180032*^9, 
   3.698080464298929*^9}, {3.6980805484661093`*^9, 3.6980805555092807`*^9}, {
   3.6981366838232155`*^9, 3.6981367362664995`*^9}, 3.6982697383364143`*^9, {
   3.6982698149338293`*^9, 3.6982698227630577`*^9}, {3.709549792985443*^9, 
   3.70954979582732*^9}},
 Background->RGBColor[1, 1, 0.85]],

Cell[CellGroupData[{

Cell["Applet: Continuos Problem", "Subchapter",
 CellChangeTimes->{{3.6957228443800993`*^9, 3.695722871251212*^9}, {
  3.696000820192024*^9, 3.6960008204222765`*^9}, {3.6960009494192247`*^9, 
  3.696000958663651*^9}, {3.69827002677421*^9, 3.698270028592888*^9}, {
  3.7095498003315573`*^9, 3.7095498015655036`*^9}}],

Cell[CellGroupData[{

Cell["Applet", "Section",
 CellChangeTimes->{{3.6982766607424917`*^9, 3.698276672021037*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"DGByHandGetX", ",", "DGByHandErrorMatrix"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGByHandGetX", "[", "\[Theta]_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"d", "=", "1.526"}], ",", 
        RowBox[{"\[Phi]", "=", "1.91"}], ",", "a", ",", "b", ",", "c", ",", 
        "i", ",", "p", ",", "u", ",", "v", ",", "x"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "\[Theta]", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "3"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "d"}], ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "d"}], "+", 
             RowBox[{"d", "*", 
              RowBox[{"Cos", "[", "\[Phi]", "]"}]}]}], ",", 
            RowBox[{"d", "*", 
             RowBox[{"Sin", "[", "\[Phi]", "]"}]}], " ", ",", "0"}], "}"}]}], 
         "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "4"}], ",", 
         RowBox[{"i", "\[LessEqual]", "n"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"dihedral", " ", "rotation", " ", "axis"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", "b", ",", "c"}], "}"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", 
               RowBox[{"i", "-", "3"}], "]"}], "]"}], ",", 
             RowBox[{"x", "[", 
              RowBox[{"[", 
               RowBox[{"i", "-", "2"}], "]"}], "]"}], ",", 
             RowBox[{"x", "[", 
              RowBox[{"[", 
               RowBox[{"i", "-", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"u", "=", 
           RowBox[{"Normalize", "[", 
            RowBox[{"b", "-", "c"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"p", "=", " ", 
           RowBox[{"c", "+", 
            RowBox[{"d", "*", " ", "u"}]}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "normal", " ", "to", " ", "the", " ", "plane", " ", "abc"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"v", "=", 
           RowBox[{"Cross", "[", 
            RowBox[{
             RowBox[{"b", "-", "c"}], ",", 
             RowBox[{"a", "-", "c"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"plane", " ", "rotation"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"p", "=", 
           RowBox[{
            RowBox[{"RotationTransform", "[", 
             RowBox[{"\[Phi]", ",", "v", ",", "c"}], "]"}], "[", "p", "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"dihedral", " ", "rotation"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"p", "=", 
           RowBox[{
            RowBox[{"RotationTransform", "[", 
             RowBox[{
              RowBox[{"\[Theta]", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "u", ",", "c"}], "]"}], 
            "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"set", " ", "i"}], "-", 
            RowBox[{"th", " ", "coordinate"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", "p"}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "x", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGByHandErrorMatrix", "[", 
     RowBox[{"G_", ",", "x_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", "j", ",", "k", ",", "edges", ",", "M", ",", "dij"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"M", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "x", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", 
            RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"edges", "=", 
        RowBox[{"EdgeList", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "1"}], ",", 
         RowBox[{"k", "\[LessEqual]", 
          RowBox[{"Length", "[", "edges", "]"}]}], ",", 
         RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"i", "=", 
           RowBox[{
            RowBox[{"edges", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"j", "=", 
           RowBox[{
            RowBox[{"edges", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"dij", "=", 
           RowBox[{"DGEdgeWeight", "[", 
            RowBox[{"G", ",", 
             RowBox[{"i", "\[UndirectedEdge]", "j"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"M", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "j", "]"}], "]"}], "=", 
           RowBox[{"Abs", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Norm", "[", 
                RowBox[{
                 RowBox[{"x", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "-", 
                 RowBox[{"x", "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "-", "dij"}], 
              ")"}], "/", "dij"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"M", "[", 
             RowBox[{"[", "j", "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"M", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "M", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\[Omega]", "=", 
  RowBox[{"RandomReal", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", "9"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGByHandGetX", "[", "\[Omega]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"G", "=", 
   RowBox[{
    RowBox[{"DGProblem", "[", "x", "]"}], "[", "\"\<G\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Graphics3D", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Red", ",", 
             RowBox[{"Tube", "[", 
              RowBox[{"DGByHandGetX", "[", 
               RowBox[{"{", 
                RowBox[{
                "0", ",", "0", ",", "0", ",", "\[Omega]4", ",", "\[Omega]5", 
                 ",", "\[Omega]6", ",", "\[Omega]7", ",", "\[Omega]8", ",", 
                 "\[Omega]9"}], "}"}], "]"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"PointSize", "[", "Large", "]"}], ",", "Blue", ",", 
             RowBox[{"Point", "[", 
              RowBox[{"DGByHandGetX", "[", 
               RowBox[{"{", 
                RowBox[{
                "0", ",", "0", ",", "0", ",", "\[Omega]4", ",", "\[Omega]5", 
                 ",", "\[Omega]6", ",", "\[Omega]7", ",", "\[Omega]8", ",", 
                 "\[Omega]9"}], "}"}], "]"}], "]"}]}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"xrange", ",", "yrange", ",", "zrange"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"RotationAction", "\[Rule]", "\"\<Clip\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Axes", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], "}"}]}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Mean(error):\>\"", ",", 
            RowBox[{"NumberForm", "[", 
             RowBox[{
              RowBox[{"Max", "[", 
               RowBox[{"DGByHandErrorMatrix", "[", 
                RowBox[{"G", ",", 
                 RowBox[{"DGByHandGetX", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "0", ",", "0", ",", "0", ",", "\[Omega]4", ",", 
                    "\[Omega]5", ",", "\[Omega]6", ",", "\[Omega]7", ",", 
                    "\[Omega]8", ",", "\[Omega]9"}], "}"}], "]"}]}], "]"}], 
               "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"BoxStyle", "\[Rule]", 
          RowBox[{"Directive", "[", "Dashed", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"MatrixPlot", "[", 
        RowBox[{
         RowBox[{"DGByHandErrorMatrix", "[", 
          RowBox[{"G", ",", 
           RowBox[{"DGByHandGetX", "[", 
            RowBox[{"{", 
             RowBox[{
             "0", ",", "0", ",", "0", ",", "\[Omega]4", ",", "\[Omega]5", ",",
               "\[Omega]6", ",", "\[Omega]7", ",", "\[Omega]8", ",", 
              "\[Omega]9"}], "}"}], "]"}]}], "]"}], ",", 
         RowBox[{"ColorFunction", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"ColorData", "[", "\"\<TemperatureMap\>\"", "]"}], "[", 
             RowBox[{"Rescale", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "]"}], "]"}], "&"}], 
           ")"}]}], ",", 
         RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}]}], "]"}]}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Torsion", " ", "angles"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Torsion Angles\>\"", ",", "Bold", ",", "Medium"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Omega]4", ",", "0"}], "}"}], ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Omega]5", ",", "0"}], "}"}], ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Omega]6", ",", "0"}], "}"}], ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Omega]7", ",", "0"}], "}"}], ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Omega]8", ",", "0"}], "}"}], ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Omega]9", ",", "0"}], "}"}], ",", 
       RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Bounding", " ", "boxes"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Bounding Limits\>\"", ",", "Bold", ",", "Medium"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"xrange", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "}"}], ",", 
       RowBox[{"-", "10"}], ",", "10", ",", 
       RowBox[{"ControlType", " ", "\[Rule]", " ", "IntervalSlider"}], ",", 
       RowBox[{"Method", " ", "\[Rule]", " ", "\"\<Push\>\""}], ",", 
       RowBox[{"MinIntervalSize", "\[Rule]", "0.1"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"yrange", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "}"}], ",", 
       RowBox[{"-", "10"}], ",", "10", ",", 
       RowBox[{"ControlType", " ", "\[Rule]", " ", "IntervalSlider"}], ",", 
       RowBox[{"Method", " ", "\[Rule]", " ", "\"\<Push\>\""}], ",", 
       RowBox[{"MinIntervalSize", "\[Rule]", "0.1"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"zrange", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "}"}], ",", 
       RowBox[{"-", "10"}], ",", "10", ",", 
       RowBox[{"ControlType", " ", "\[Rule]", " ", "IntervalSlider"}], ",", 
       RowBox[{"Method", " ", "\[Rule]", " ", "\"\<Push\>\""}], ",", 
       RowBox[{"MinIntervalSize", "\[Rule]", "0.1"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"OpenerView", "[", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Solution\>\"", ",", "Bold", ",", " ", "Medium"}], "]"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"Column", "[", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<\[Omega]4  \>\"", ",", 
              RowBox[{"Slider", "[", 
               RowBox[{
                RowBox[{"\[Omega]", "[", 
                 RowBox[{"[", "4", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
                RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}]}], "}"}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<\[Omega]5  \>\"", ",", 
              RowBox[{"Slider", "[", 
               RowBox[{
                RowBox[{"\[Omega]", "[", 
                 RowBox[{"[", "5", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
                RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}]}], "}"}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<\[Omega]6  \>\"", ",", 
              RowBox[{"Slider", "[", 
               RowBox[{
                RowBox[{"\[Omega]", "[", 
                 RowBox[{"[", "6", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
                RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}]}], "}"}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<\[Omega]7  \>\"", ",", 
              RowBox[{"Slider", "[", 
               RowBox[{
                RowBox[{"\[Omega]", "[", 
                 RowBox[{"[", "7", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
                RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}]}], "}"}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<\[Omega]8  \>\"", ",", 
              RowBox[{"Slider", "[", 
               RowBox[{
                RowBox[{"\[Omega]", "[", 
                 RowBox[{"[", "8", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
                RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}]}], "}"}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<\[Omega]9  \>\"", ",", 
              RowBox[{"Slider", "[", 
               RowBox[{
                RowBox[{"\[Omega]", "[", 
                 RowBox[{"[", "9", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
                RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}]}], "}"}], 
            "]"}]}], "}"}], "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ControlPlacement", "\[Rule]", "Left"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.695723321371716*^9, 3.6957233477244525`*^9}, {
   3.6957234760533085`*^9, 3.6957235098336396`*^9}, {3.695723735715779*^9, 
   3.6957237877536187`*^9}, {3.695723850173235*^9, 3.6957239031129613`*^9}, {
   3.695728140234626*^9, 3.695728170469324*^9}, {3.695728206912562*^9, 
   3.6957283189207373`*^9}, {3.6957302430448112`*^9, 3.695730251925662*^9}, {
   3.695730284192649*^9, 3.6957303072451687`*^9}, 3.6957303419698424`*^9, {
   3.6957303818606863`*^9, 3.695730385876433*^9}, {3.695730776871158*^9, 
   3.6957307799432144`*^9}, {3.695730913909477*^9, 3.695731056625264*^9}, {
   3.6957319251514997`*^9, 3.6957319315696564`*^9}, {3.6957321042594004`*^9, 
   3.6957321106365647`*^9}, {3.6957322295983095`*^9, 
   3.6957322502411985`*^9}, {3.695732413433252*^9, 3.695732417498835*^9}, {
   3.6957325188132176`*^9, 3.6957326476413317`*^9}, {3.6957327030329676`*^9, 
   3.6957327379451895`*^9}, {3.6957328580897083`*^9, 3.695732908861949*^9}, {
   3.695732976478773*^9, 3.695732988297332*^9}, {3.6957330608395104`*^9, 
   3.6957331084110994`*^9}, {3.6957331512650113`*^9, 3.6957331875252066`*^9}, 
   3.695733451581834*^9, {3.6957335101968355`*^9, 3.6957335723975716`*^9}, {
   3.695733630567013*^9, 3.6957336843221555`*^9}, {3.6957337403604355`*^9, 
   3.6957338169156723`*^9}, {3.695733865807949*^9, 3.695733871196596*^9}, {
   3.6957339622950974`*^9, 3.695733976453291*^9}, {3.695734172561076*^9, 
   3.6957341961862507`*^9}, {3.6957343224310236`*^9, 3.695734490364665*^9}, {
   3.6957345316085634`*^9, 3.6957345401498027`*^9}, {3.6957345864160423`*^9, 
   3.695734631603385*^9}, {3.6957347012036605`*^9, 3.6957347215090895`*^9}, {
   3.69573479380623*^9, 3.695734822739337*^9}, {3.695734874725807*^9, 
   3.695734922835139*^9}, {3.6957349678751855`*^9, 3.6957350309412208`*^9}, {
   3.6957350745613704`*^9, 3.695735083754054*^9}, {3.6957351324046464`*^9, 
   3.6957351801778193`*^9}, {3.695735237659878*^9, 3.6957352843844495`*^9}, 
   3.6957353270579834`*^9, {3.695735465755406*^9, 3.6957354886370554`*^9}, {
   3.6957355946776204`*^9, 3.695735604012744*^9}, {3.6957356352356386`*^9, 
   3.6957357853389974`*^9}, {3.695736023894952*^9, 3.695736029581028*^9}, {
   3.6957361614117217`*^9, 3.6957361738382483`*^9}, {3.6957362038644595`*^9, 
   3.695736210350934*^9}, {3.6957363377798505`*^9, 3.695736339913566*^9}, {
   3.695736388787493*^9, 3.695736395158078*^9}, {3.695736466272395*^9, 
   3.6957364681925907`*^9}, {3.6957365737824*^9, 3.6957367221996307`*^9}, {
   3.695736804774605*^9, 3.695736824849099*^9}, {3.695736870426489*^9, 
   3.6957368746607704`*^9}, {3.695737066994382*^9, 3.6957370745685244`*^9}, {
   3.695737180725799*^9, 3.6957373546184263`*^9}, {3.6957375699866943`*^9, 
   3.6957375998386583`*^9}, {3.6957377143178205`*^9, 3.695737742205675*^9}, {
   3.6957378110143795`*^9, 3.6957378850992956`*^9}, {3.6957379340609617`*^9, 
   3.695737934462038*^9}, {3.695738259762306*^9, 3.695738367274972*^9}, {
   3.695738409500598*^9, 3.6957384421132274`*^9}, {3.6957385706618986`*^9, 
   3.695738572694256*^9}, {3.695738612038187*^9, 3.69573864960015*^9}, 
   3.6957388507380824`*^9, {3.6957394459987955`*^9, 3.695739542795068*^9}, {
   3.6957396054892187`*^9, 3.6957396122208004`*^9}, {3.6957398838947153`*^9, 
   3.6957398874824905`*^9}, {3.6957406530594573`*^9, 3.695740661880864*^9}, {
   3.6957408944610014`*^9, 3.6957410066013136`*^9}, {3.6957410861236067`*^9, 
   3.6957411096802387`*^9}, {3.6957411462041087`*^9, 3.695741146320501*^9}, {
   3.6957411825985527`*^9, 3.69574118828378*^9}, {3.6957412376215544`*^9, 
   3.6957412475596485`*^9}, {3.695741432878501*^9, 3.695741446835599*^9}, {
   3.6957415063069725`*^9, 3.6957415325437765`*^9}, {3.6957416929362893`*^9, 
   3.6957418450245347`*^9}, 3.695741894746039*^9, {3.6957419279122915`*^9, 
   3.695741993636595*^9}, 3.6957420446016536`*^9, {3.695742091680943*^9, 
   3.6957421855837917`*^9}, {3.6957422226389103`*^9, 3.695742266516306*^9}, {
   3.69574234306454*^9, 3.695742385774511*^9}, {3.6957424775536404`*^9, 
   3.695742506889844*^9}, {3.6957425514568357`*^9, 3.695742633174608*^9}, {
   3.6957428115295515`*^9, 3.695742880306145*^9}, 3.6957491344650517`*^9, {
   3.6957493282972527`*^9, 3.6957493520816793`*^9}, 3.698072481114099*^9, {
   3.69827040072288*^9, 3.6982704392809677`*^9}, {3.6982704767129464`*^9, 
   3.698270486055981*^9}, {3.69827075311152*^9, 3.6982707839129333`*^9}, {
   3.6982708784692116`*^9, 3.6982710009520674`*^9}, {3.6982715503151693`*^9, 
   3.6982715571021194`*^9}, {3.698272298434101*^9, 3.6982723177884903`*^9}, {
   3.6982723607627*^9, 3.69827240129832*^9}, {3.6982724730876207`*^9, 
   3.6982724852625875`*^9}, {3.6982730960285783`*^9, 
   3.6982731030891294`*^9}, {3.6982731437015963`*^9, 3.698273157638199*^9}, {
   3.6982732033569045`*^9, 3.698273255405436*^9}, {3.698273380784088*^9, 
   3.6982733865643682`*^9}, {3.6982736799909735`*^9, 
   3.6982737316605234`*^9}, {3.698273897730236*^9, 3.6982739858410864`*^9}, {
   3.698274019835471*^9, 3.6982740332992177`*^9}, {3.698274112747086*^9, 
   3.698274124762021*^9}, {3.6982742677501135`*^9, 3.698274306521473*^9}, {
   3.698274498396601*^9, 3.6982745027545166`*^9}, {3.698274571764159*^9, 
   3.6982745897139077`*^9}, {3.6982746688748364`*^9, 3.698274741074173*^9}, {
   3.6982747716472054`*^9, 3.6982747847418785`*^9}, {3.6982748189324727`*^9, 
   3.6982748841478977`*^9}, {3.698274926542649*^9, 3.698274949153207*^9}, {
   3.698275160206649*^9, 3.698275187277109*^9}, {3.6982752501926146`*^9, 
   3.698275267361329*^9}, {3.698275308349368*^9, 3.6982753398186407`*^9}, {
   3.6982760798753653`*^9, 3.6982761022060823`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Applet: Discrete Problem (BP)", "Subchapter",
 CellChangeTimes->{{3.6957228443800993`*^9, 3.695722871251212*^9}, {
   3.696000820192024*^9, 3.6960008204222765`*^9}, {3.6960009494192247`*^9, 
   3.6960009726613865`*^9}, 3.6969455372420783`*^9, {3.7095497861848884`*^9, 
   3.7095498068509827`*^9}}],

Cell[CellGroupData[{

Cell["Applet", "Section",
 CellChangeTimes->{{3.6982766832687664`*^9, 3.6982766889084167`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DGByHandTreeFromBranches", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DGByHandTreeFromBranches", "[", 
     RowBox[{"G_", ",", "branch_", ",", "branches_", ",", "checkBP_"}], "]"}],
     ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "T", ",", "X", ",", "k", ",", "i", ",", "n", ",", "b", ",", "x", ",", 
        "y", ",", "z", ",", "dx", ",", "dy", ",", "dz", ",", 
        RowBox[{"edges", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"v", "=", 
         RowBox[{"{", "}"}]}], ",", "styVertex", ",", 
        RowBox[{"styEdges", "=", 
         RowBox[{"{", "}"}]}], ",", "m", ",", "color", ",", "valid", ",", 
        "nid"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nid", "=", 
        RowBox[{"DGNaturalOrdering", "[", "G", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"VertexList", "[", "G", "]"}], "]"}], "-", "3"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"creating", " ", "edges"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "1"}], ",", 
         RowBox[{"k", "\[LessEqual]", 
          RowBox[{
           RowBox[{"2", "^", "n"}], "-", "1"}]}], ",", 
         RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"edges", ",", 
            RowBox[{"k", "\[UndirectedEdge]", 
             RowBox[{"2", "k"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"edges", ",", 
            RowBox[{"k", "\[UndirectedEdge]", 
             RowBox[{
              RowBox[{"2", "k"}], "+", "1"}]}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"highlighting", " ", "current", " ", "branch"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"k", "=", "0"}], ",", 
         RowBox[{"k", "\[LessEqual]", "n"}], ",", 
         RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"v", ",", 
            RowBox[{"FromDigits", "[", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", "1", "}"}], ",", 
                RowBox[{"branch", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ";;", "k"}], "]"}], "]"}]}], "]"}], ",", "2"}],
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"k", ">", "0"}], ",", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"styEdges", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"v", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], "\[UndirectedEdge]", 
                RowBox[{"v", "[", 
                 RowBox[{"[", 
                  RowBox[{"k", "+", "1"}], "]"}], "]"}]}], "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"Blue", ",", 
                 RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}]}]}], 
             "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"coloring", " ", "visited", " ", "nodes", " ", 
         RowBox[{"(", "branches", ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"styVertex", "=", 
        RowBox[{"{", "LightGray", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "branches", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"k", "=", "1"}], ",", 
            RowBox[{"k", "\[LessEqual]", 
             RowBox[{"Length", "[", "branches", "]"}]}], ",", 
            RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"X", "=", 
              RowBox[{"DGBPXinit", "[", 
               RowBox[{"G", ",", 
                RowBox[{"nid", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"b", "=", 
              RowBox[{"branches", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"checkBP", ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"checking", " ", "partial", " ", "solutions", " ", 
                 RowBox[{"(", 
                  RowBox[{"checkBP", "=", "True"}], ")"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"For", "[", 
                RowBox[{
                 RowBox[{"i", "=", "1"}], ",", 
                 RowBox[{"i", "\[LessEqual]", "n"}], ",", 
                 RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"X", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "+", "3"}], "]"}], "]"}], "=", 
                   RowBox[{"DGBPGetX", "[", 
                    RowBox[{"G", ",", "X", ",", 
                    RowBox[{"b", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "nid", ",", 
                    RowBox[{"i", "+", "3"}]}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"DGRelativeResidue", "[", 
                    RowBox[{"G", ",", "X", ",", "nid", ",", 
                    RowBox[{"i", "+", "3"}]}], "]"}], "<", "0.001"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"color", "=", "Green"}], ",", 
                    RowBox[{"(*", " ", 
                    RowBox[{"if", " ", "true"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"color", "=", "Red"}]}], " ", 
                   RowBox[{"(*", " ", 
                    RowBox[{"if", " ", "false"}], " ", "*)"}], 
                   "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"v", "=", 
                   RowBox[{"FromDigits", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"b", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "i"}], "]"}], "]"}]}], "]"}], ",", 
                    "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"AppendTo", "[", 
                   RowBox[{"styVertex", ",", 
                    RowBox[{"v", "\[Rule]", "color"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "checking", " ", "only", " ", "final", " ", "solution"}], " ",
                 "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"valid", "=", "True"}], ";", "\[IndentingNewLine]", 
                RowBox[{"For", "[", 
                 RowBox[{
                  RowBox[{"i", "=", "1"}], ",", 
                  RowBox[{"i", "\[LessEqual]", "n"}], ",", 
                  RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"X", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "+", "3"}], "]"}], "]"}], "=", 
                    RowBox[{"DGBPGetX", "[", 
                    RowBox[{"G", ",", "X", ",", 
                    RowBox[{"b", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "nid", ",", 
                    RowBox[{"i", "+", "3"}]}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DGRelativeResidue", "[", 
                    RowBox[{"G", ",", "X", ",", "nid", ",", 
                    RowBox[{"i", "+", "3"}]}], "]"}], ">", "0.001"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"valid", "=", "False"}]}], "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{"valid", ",", 
                    RowBox[{"color", "=", "Green"}], ",", 
                    RowBox[{"color", "=", "Red"}]}], "]"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"v", "=", 
                    RowBox[{"FromDigits", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "b"}], "]"}], ",", "2"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"styVertex", ",", 
                    RowBox[{"v", "\[Rule]", "color"}]}], "]"}]}]}], 
                 "\[IndentingNewLine]", "]"}]}], ","}], "\[IndentingNewLine]",
               "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"T", "=", 
        RowBox[{"TreeGraph", "[", "\[IndentingNewLine]", 
         RowBox[{"edges", ",", "\[IndentingNewLine]", 
          RowBox[{"VertexStyle", "\[Rule]", "styVertex"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"EdgeStyle", "\[Rule]", "styEdges"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"GraphLayout", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<LayeredEmbedding\>\"", ",", 
             RowBox[{"LayerSizeFunction", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{"8", "&"}], ")"}]}]}], "}"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "T", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"set", " ", "minimal", " ", "edge", " ", "set"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"P", "=", 
    RowBox[{"DGRandomMDGP", "[", 
     RowBox[{"9", ",", "0.0", ",", "0.0"}], "]"}]}], ";", " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "it", " ", "must", " ", "be", " ", "a", " ", "graph", " ", "with", " ", 
     "9", " ", "nodes"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"edges", "=", 
    RowBox[{"EdgeList", "[", 
     RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"add", " ", "extra", " ", "constraints"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"edges", "=", 
    RowBox[{"Union", "[", 
     RowBox[{"edges", ",", 
      RowBox[{"{", 
       RowBox[{"2", "\[UndirectedEdge]", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", "\[UndirectedEdge]", "5"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"init", " ", "graph"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"G", "=", 
    RowBox[{
     RowBox[{"DGProblem", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"DGRandom3DBackbone", "[", "9", "]"}], "[", "\"\<Points\>\"", 
        "]"}], ",", "edges"}], "]"}], "[", "\"\<G\>\"", "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"set", " ", "order"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nodes", "=", 
   RowBox[{"DGNaturalOrdering", "[", 
    RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"branches", "=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"b", "=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"s", "=", 
      RowBox[{"{", "}"}]}], ",", "node", ",", 
     RowBox[{"X", "=", 
      RowBox[{"DGBPXinit", "[", 
       RowBox[{"G", ",", 
        RowBox[{"nodes", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"DGByHandTreeFromBranches", "[", 
         RowBox[{"G", ",", 
          RowBox[{"{", 
           RowBox[{
           "\[Omega]4", ",", "\[Omega]5", ",", "\[Omega]6", ",", "\[Omega]7", 
            ",", "\[Omega]8", ",", "\[Omega]9"}], "}"}], ",", "branches", ",",
           "BP"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Column", "[", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"DGPlotAdjacencyMatrix", "[", 
            RowBox[{"G", ",", "Sym"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics3D", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Red", ",", 
                RowBox[{"Tube", "[", "X", "]"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"PointSize", "[", "Large", "]"}], ",", "Blue", ",", 
                RowBox[{"Point", "[", "X", "]"}]}], "}"}]}], "}"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"MatrixForm", "[", 
            RowBox[{"s", ",", 
             RowBox[{"TableHeadings", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"None", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<\[Omega]4\>\"", ",", "\"\<\[Omega]5\>\"", ",", 
                  "\"\<\[Omega]6\>\"", ",", "\"\<\[Omega]7\>\"", ",", 
                  "\"\<\[Omega]8\>\"", ",", "\"\<\[Omega]9\>\""}], "}"}]}], 
               "}"}]}]}], "]"}]}], "}"}], "]"}]}], "}"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "Branches", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Branches\>\"", ",", "Bold", ",", "Medium"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\[Omega]4", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\[Omega]5", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\[Omega]6", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\[Omega]7", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\[Omega]8", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\[Omega]9", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Button", "[", 
      RowBox[{"\"\<Try\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"b", "=", 
          RowBox[{"{", 
           RowBox[{
           "\[Omega]4", ",", "\[Omega]5", ",", "\[Omega]6", ",", "\[Omega]7", 
            ",", "\[Omega]8", ",", "\[Omega]9"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"node", "=", "1"}], ",", 
           RowBox[{"node", "\[LessEqual]", 
            RowBox[{"Length", "[", "b", "]"}]}], ",", 
           RowBox[{"node", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"X", "[", 
              RowBox[{"[", 
               RowBox[{"node", "+", "3"}], "]"}], "]"}], "=", 
             RowBox[{"DGBPGetX", "[", 
              RowBox[{"G", ",", "X", ",", 
               RowBox[{"b", "[", 
                RowBox[{"[", "node", "]"}], "]"}], ",", "nodes", ",", 
               RowBox[{"node", "+", "3"}]}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"branches", ",", 
           RowBox[{"{", 
            RowBox[{
            "\[Omega]4", ",", "\[Omega]5", ",", "\[Omega]6", ",", "\[Omega]7",
              ",", "\[Omega]8", ",", "\[Omega]9"}], "}"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"Background", "\[Rule]", "LightBlue"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Options\>\"", ",", "Bold", ",", " ", "Medium"}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"BP", ",", 
       RowBox[{"{", 
        RowBox[{"False", ",", "True"}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "Checkbox"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"Sym", ",", 
       RowBox[{"{", 
        RowBox[{"False", ",", "True"}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "Checkbox"}]}], "}"}], ",", 
     "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"show", " ", "solutions"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Solutions\>\"", ",", "Bold", ",", "Medium"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Button", "[", 
      RowBox[{"\"\<Show\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"s", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"DGBPSolver", "[", 
             RowBox[{"G", ",", "nodes"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Branches\>\"", "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"s", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", "j", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "s", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "4", ",", "9"}], "}"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"branches", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"branches", ",", "s"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Background", "\[Rule]", "LightRed"}]}], "\[IndentingNewLine]",
       "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Button", "[", 
      RowBox[{"\"\<Reset\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"G", "=", 
          RowBox[{
           RowBox[{"DGProblem", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"DGRandom3DBackbone", "[", "9", "]"}], "[", 
              "\"\<Points\>\"", "]"}], ",", "edges"}], "]"}], "[", 
           "\"\<G\>\"", "]"}]}], ",", 
         RowBox[{"branches", "=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"b", "=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"s", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Background", "\[Rule]", "LightRed"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.695723321371716*^9, 3.6957233477244525`*^9}, {
   3.6957234760533085`*^9, 3.6957235098336396`*^9}, {3.695723735715779*^9, 
   3.6957237877536187`*^9}, {3.695723850173235*^9, 3.6957239031129613`*^9}, {
   3.695728140234626*^9, 3.695728170469324*^9}, {3.695728206912562*^9, 
   3.6957283189207373`*^9}, {3.6957302430448112`*^9, 3.695730251925662*^9}, {
   3.695730284192649*^9, 3.6957303072451687`*^9}, 3.6957303419698424`*^9, {
   3.6957303818606863`*^9, 3.695730385876433*^9}, {3.695730776871158*^9, 
   3.6957307799432144`*^9}, {3.695730913909477*^9, 3.695731056625264*^9}, {
   3.6957319251514997`*^9, 3.6957319315696564`*^9}, {3.6957321042594004`*^9, 
   3.6957321106365647`*^9}, {3.6957322295983095`*^9, 
   3.6957322502411985`*^9}, {3.695732413433252*^9, 3.695732417498835*^9}, {
   3.6957325188132176`*^9, 3.6957326476413317`*^9}, {3.6957327030329676`*^9, 
   3.6957327379451895`*^9}, {3.6957328580897083`*^9, 3.695732908861949*^9}, {
   3.695732976478773*^9, 3.695732988297332*^9}, {3.6957330608395104`*^9, 
   3.6957331084110994`*^9}, {3.6957331512650113`*^9, 3.6957331875252066`*^9}, 
   3.695733451581834*^9, {3.6957335101968355`*^9, 3.6957335723975716`*^9}, {
   3.695733630567013*^9, 3.6957336843221555`*^9}, {3.6957337403604355`*^9, 
   3.6957338169156723`*^9}, {3.695733865807949*^9, 3.695733871196596*^9}, {
   3.6957339622950974`*^9, 3.695733976453291*^9}, {3.695734172561076*^9, 
   3.6957341961862507`*^9}, {3.6957343224310236`*^9, 3.695734490364665*^9}, {
   3.6957345316085634`*^9, 3.6957345401498027`*^9}, {3.6957345864160423`*^9, 
   3.695734631603385*^9}, {3.6957347012036605`*^9, 3.6957347215090895`*^9}, {
   3.69573479380623*^9, 3.695734822739337*^9}, {3.695734874725807*^9, 
   3.695734922835139*^9}, {3.6957349678751855`*^9, 3.6957350309412208`*^9}, {
   3.6957350745613704`*^9, 3.695735083754054*^9}, {3.6957351324046464`*^9, 
   3.6957351801778193`*^9}, {3.695735237659878*^9, 3.6957352843844495`*^9}, 
   3.6957353270579834`*^9, {3.695735465755406*^9, 3.6957354886370554`*^9}, {
   3.6957355946776204`*^9, 3.695735604012744*^9}, {3.6957356352356386`*^9, 
   3.6957357853389974`*^9}, {3.695736023894952*^9, 3.695736029581028*^9}, {
   3.6957361614117217`*^9, 3.6957361738382483`*^9}, {3.6957362038644595`*^9, 
   3.695736210350934*^9}, {3.6957363377798505`*^9, 3.695736339913566*^9}, {
   3.695736388787493*^9, 3.695736395158078*^9}, {3.695736466272395*^9, 
   3.6957364681925907`*^9}, {3.6957365737824*^9, 3.6957367221996307`*^9}, {
   3.695736804774605*^9, 3.695736824849099*^9}, {3.695736870426489*^9, 
   3.6957368746607704`*^9}, {3.695737066994382*^9, 3.6957370745685244`*^9}, {
   3.695737180725799*^9, 3.6957373546184263`*^9}, {3.6957375699866943`*^9, 
   3.6957375998386583`*^9}, {3.6957377143178205`*^9, 3.695737742205675*^9}, {
   3.6957378110143795`*^9, 3.6957378850992956`*^9}, {3.6957379340609617`*^9, 
   3.695737934462038*^9}, {3.695738259762306*^9, 3.695738367274972*^9}, {
   3.695738409500598*^9, 3.6957384421132274`*^9}, {3.6957385706618986`*^9, 
   3.695738572694256*^9}, {3.695738612038187*^9, 3.69573864960015*^9}, 
   3.6957388507380824`*^9, {3.6957394459987955`*^9, 3.695739542795068*^9}, {
   3.6957396054892187`*^9, 3.6957396122208004`*^9}, {3.6957398838947153`*^9, 
   3.6957398874824905`*^9}, {3.6957406530594573`*^9, 3.695740661880864*^9}, {
   3.6957408944610014`*^9, 3.6957410066013136`*^9}, {3.6957410861236067`*^9, 
   3.6957411096802387`*^9}, {3.6957411462041087`*^9, 3.695741146320501*^9}, {
   3.6957411825985527`*^9, 3.69574118828378*^9}, {3.6957412376215544`*^9, 
   3.6957412475596485`*^9}, {3.695741432878501*^9, 3.695741446835599*^9}, {
   3.6957415063069725`*^9, 3.6957415325437765`*^9}, {3.6957416929362893`*^9, 
   3.6957418450245347`*^9}, 3.695741894746039*^9, {3.6957419279122915`*^9, 
   3.695741993636595*^9}, 3.6957420446016536`*^9, {3.695742091680943*^9, 
   3.6957421855837917`*^9}, {3.6957422226389103`*^9, 3.695742266516306*^9}, {
   3.69574234306454*^9, 3.695742385774511*^9}, {3.6957424775536404`*^9, 
   3.695742506889844*^9}, {3.6957425514568357`*^9, 3.695742633174608*^9}, {
   3.6957428115295515`*^9, 3.695742880306145*^9}, 3.6957491344650517`*^9, {
   3.6957493282972527`*^9, 3.6957493520816793`*^9}, {3.6960012909403973`*^9, 
   3.6960012938883305`*^9}, {3.696156255994712*^9, 3.6961562650100794`*^9}, {
   3.696156295886201*^9, 3.6961563106886444`*^9}, {3.6961564013359656`*^9, 
   3.6961564517039223`*^9}, {3.6961565250416493`*^9, 
   3.6961566543467717`*^9}, {3.6961567288961554`*^9, 
   3.6961568441226873`*^9}, {3.6961568909910555`*^9, 3.696156903900296*^9}, {
   3.6961569672255335`*^9, 3.696156969304701*^9}, {3.6961571034179225`*^9, 
   3.696157110312049*^9}, {3.696160282114659*^9, 3.696160302223087*^9}, {
   3.6961605625418644`*^9, 3.6961606222501583`*^9}, {3.696160658944554*^9, 
   3.6961606778289185`*^9}, {3.6961609283775125`*^9, 
   3.6961609808174286`*^9}, {3.6961610459570017`*^9, 
   3.6961610477260633`*^9}, {3.696161209739623*^9, 3.6961613158159175`*^9}, {
   3.696161357319108*^9, 3.69616136948481*^9}, {3.696162431625352*^9, 
   3.6961624330647745`*^9}, {3.6961628027014465`*^9, 
   3.6961628571260533`*^9}, {3.696162900512824*^9, 3.6961629049376287`*^9}, {
   3.6961642456888447`*^9, 3.696164270507456*^9}, {3.6961649316798134`*^9, 
   3.696164998676358*^9}, {3.696165041400201*^9, 3.696165083729754*^9}, {
   3.6961651566015034`*^9, 3.696165206769026*^9}, {3.6961652700456624`*^9, 
   3.696165289007637*^9}, {3.6961653864122925`*^9, 3.696165497141945*^9}, {
   3.696165743808255*^9, 3.696165799254837*^9}, {3.696165845290099*^9, 
   3.696165990776334*^9}, {3.6961661230691767`*^9, 3.696166191968793*^9}, {
   3.6961662871277575`*^9, 3.696166327478566*^9}, {3.696166386078822*^9, 
   3.6961664236976624`*^9}, {3.696166496850869*^9, 3.6961664989856625`*^9}, {
   3.6961665602905154`*^9, 3.69616677076039*^9}, {3.69616684916016*^9, 
   3.696166888844514*^9}, {3.696166989227959*^9, 3.6961669927334337`*^9}, {
   3.696167046616452*^9, 3.696167051273269*^9}, {3.6961670863546443`*^9, 
   3.69616711698417*^9}, {3.696168089856365*^9, 3.696168121062352*^9}, {
   3.69616818237259*^9, 3.6961682224238987`*^9}, {3.6961683411240253`*^9, 
   3.696168384465231*^9}, 3.6961684150385275`*^9, {3.6961684819548564`*^9, 
   3.6961685051447563`*^9}, {3.696168568475537*^9, 3.696168570263974*^9}, {
   3.6961686351296844`*^9, 3.6961686370314665`*^9}, {3.696168686385473*^9, 
   3.696168691443553*^9}, {3.6961687468176303`*^9, 3.6961688101433983`*^9}, {
   3.6961689711518*^9, 3.6961690483381233`*^9}, {3.696169125123598*^9, 
   3.696169175323496*^9}, {3.69616950254916*^9, 3.696169563303851*^9}, {
   3.6961696075874076`*^9, 3.6961696257426414`*^9}, {3.69616969935327*^9, 
   3.6961697070144925`*^9}, 3.6961697386375637`*^9, {3.696169815828497*^9, 
   3.6961698450990944`*^9}, {3.696169882730567*^9, 3.6961699262763777`*^9}, {
   3.6961699622860117`*^9, 3.6961699750439024`*^9}, {3.6961700134511185`*^9, 
   3.696170017009848*^9}, {3.6961700553549232`*^9, 3.696170086868808*^9}, {
   3.696170163107408*^9, 3.6961701814566517`*^9}, {3.6961702450598593`*^9, 
   3.6961702610064096`*^9}, {3.6961705582279353`*^9, 3.6961705711466084`*^9}, 
   3.6961706335282717`*^9, {3.6961707824291086`*^9, 3.6961707949249997`*^9}, {
   3.696170828378927*^9, 3.6961708451917305`*^9}, {3.6961775244960194`*^9, 
   3.696177536639609*^9}, {3.6961777114223776`*^9, 3.6961778726060057`*^9}, {
   3.6961779536871257`*^9, 3.696178001287077*^9}, {3.6961780446438513`*^9, 
   3.6961780491063614`*^9}, {3.69617808066495*^9, 3.6961782203938217`*^9}, {
   3.696178433914888*^9, 3.6961784492746*^9}, {3.696178482911583*^9, 
   3.6961785279941273`*^9}, {3.6963358148945017`*^9, 3.696335824944496*^9}, {
   3.696336702720662*^9, 3.696336711565955*^9}, {3.6963367506934752`*^9, 
   3.696336898626133*^9}, {3.6963369663555574`*^9, 3.6963370245934205`*^9}, {
   3.6963370579884453`*^9, 3.6963370911332693`*^9}, {3.69633713867729*^9, 
   3.69633714758457*^9}, {3.6963371784547625`*^9, 3.696337330668229*^9}, 
   3.696337506286955*^9, {3.696342030265442*^9, 3.696342055614204*^9}, {
   3.6965973436925826`*^9, 3.6965973584907165`*^9}, {3.6965973978907404`*^9, 
   3.6965974400600586`*^9}, {3.6965980687982664`*^9, 3.696598082182392*^9}, {
   3.6965987379952097`*^9, 3.69659875237007*^9}, {3.6965991595664005`*^9, 
   3.696599161357998*^9}, {3.6966041446608152`*^9, 3.6966042105828886`*^9}, {
   3.696604264613673*^9, 3.69660426850031*^9}, {3.6966042987761164`*^9, 
   3.696604362039445*^9}, {3.696604415473429*^9, 3.696604443979203*^9}, {
   3.6966044989890485`*^9, 3.6966045013103867`*^9}, {3.696610914922676*^9, 
   3.6966109153078117`*^9}, {3.696950003267107*^9, 3.69695000492143*^9}, 
   3.697995540885202*^9, {3.69799566194641*^9, 3.69799566224811*^9}, {
   3.6979957004319425`*^9, 3.6979958659780674`*^9}, {3.697995991555769*^9, 
   3.6979960054415*^9}, {3.6979962537211037`*^9, 3.697996260026286*^9}, {
   3.6979963909522963`*^9, 3.6979964058568335`*^9}, {3.698058369377993*^9, 
   3.6980584397127724`*^9}, {3.698072481305226*^9, 3.698072481323738*^9}, {
   3.6982767055230107`*^9, 3.6982769867686496`*^9}, {3.6982770477143927`*^9, 
   3.698277084070335*^9}, {3.698277363050057*^9, 3.698277378524715*^9}, {
   3.6982777503800545`*^9, 3.698277789489343*^9}, {3.6982778195086*^9, 
   3.698277825100151*^9}, {3.6982781608132734`*^9, 3.6982782111922708`*^9}, {
   3.698278364609772*^9, 3.6982783666122537`*^9}, 3.698278459380054*^9, {
   3.700314326154815*^9, 3.7003143261704407`*^9}, {3.70272171574891*^9, 
   3.702721775415797*^9}, {3.7027219332196655`*^9, 3.702721937385425*^9}, {
   3.7027220174543805`*^9, 3.702722189843503*^9}, {3.702722228626461*^9, 
   3.702722237594743*^9}, {3.70272227525725*^9, 3.7027224005488477`*^9}, {
   3.7027224342108183`*^9, 3.702722472304862*^9}, {3.702722543345603*^9, 
   3.7027225659706087`*^9}, {3.70273031811456*^9, 3.702730321156896*^9}, {
   3.7027306674365206`*^9, 3.702730669627152*^9}, {3.702730759901149*^9, 
   3.702730771403966*^9}, {3.7027312497473345`*^9, 3.7027312523926687`*^9}, {
   3.702731321570535*^9, 3.7027313412035847`*^9}, {3.7095446696087575`*^9, 
   3.709544686676439*^9}, {3.7095468686894264`*^9, 3.709546891862574*^9}, {
   3.709546972081297*^9, 3.709546975350305*^9}, 3.709547168479164*^9, {
   3.709547356642786*^9, 3.709547410947468*^9}, {3.709547509667124*^9, 
   3.7095475657439833`*^9}, {3.7095476141189475`*^9, 3.709547627280094*^9}, {
   3.709547717513586*^9, 3.7095477198484974`*^9}, {3.7095479480851874`*^9, 
   3.709547949086485*^9}, {3.709548659510627*^9, 3.7095486680239086`*^9}, 
   3.7095491199102087`*^9, {3.7095498278748865`*^9, 3.7095498299266424`*^9}}],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`branches$$ = {{0, 0, 0, 0, 0, 0}, {0, 0, 0, 0,
   0, 0}, {0, 1, 0, 0, 0, 0}}, $CellContext`b$$ = {0, 1, 0, 0, 0, 
  0}, $CellContext`s$$ = {}, $CellContext`node$$ = 
  7, $CellContext`X$$ = {{0, 0, 
   0}, {-1.526, 0, 0}, {-2.0337555109089696`, 1.4390484151485563`, 
    0}, {-3.5534650598980075`, 
   1.4412679451749937`, -0.13839783379084228`}, {-3.9345767406470333`, 
   1.033480460644882, -1.5586581107320994`}, {-3.2762489977517952`, \
-0.30079140955279937`, -1.8977733703911754`}, {-3.726567258090348, \
-0.7512513977760367, -3.2844872065576647`}, {-3.0002874308929357`, \
-2.039557382468212, -3.6606006235111455`}, {-3.3318245090710663`, \
-3.1255383051189396`, -2.6410886807504026`}}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`BP$$ = True, $CellContext`Sym$$ = 
     False, $CellContext`\[Omega]4$$ = 0, $CellContext`\[Omega]5$$ = 
     1, $CellContext`\[Omega]6$$ = 0, $CellContext`\[Omega]7$$ = 
     0, $CellContext`\[Omega]8$$ = 0, $CellContext`\[Omega]9$$ = 0, 
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
     Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
     1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
       Hold[
        Style["Branches", Bold, Medium]], Manipulate`Dump`ThisIsNotAControl}, {
       Hold[$CellContext`\[Omega]4$$], {0, 1}}, {
       Hold[$CellContext`\[Omega]5$$], {0, 1}}, {
       Hold[$CellContext`\[Omega]6$$], {0, 1}}, {
       Hold[$CellContext`\[Omega]7$$], {0, 1}}, {
       Hold[$CellContext`\[Omega]8$$], {0, 1}}, {
       Hold[$CellContext`\[Omega]9$$], {0, 1}}, {
       Hold[
        Button[
        "Try", {$CellContext`b$$ = {$CellContext`\[Omega]4$$, $CellContext`\
\[Omega]5$$, $CellContext`\[Omega]6$$, $CellContext`\[Omega]7$$, \
$CellContext`\[Omega]8$$, $CellContext`\[Omega]9$$}, 
          
          For[$CellContext`node$$ = 1, $CellContext`node$$ <= 
           Length[$CellContext`b$$], 
           Increment[$CellContext`node$$], 
           Part[$CellContext`X$$, $CellContext`node$$ + 
              3] = $CellContext`DGBPGetX[$CellContext`G, $CellContext`X$$, 
              
              Part[$CellContext`b$$, $CellContext`node$$], \
$CellContext`nodes, $CellContext`node$$ + 3]; Null], 
          
          AppendTo[$CellContext`branches$$, {$CellContext`\[Omega]4$$, \
$CellContext`\[Omega]5$$, $CellContext`\[Omega]6$$, $CellContext`\[Omega]7$$, \
$CellContext`\[Omega]8$$, $CellContext`\[Omega]9$$}]}, Background -> 
         RGBColor[0.87, 0.94, 1]]], Manipulate`Dump`ThisIsNotAControl}, {
       Hold[
        Style["Options", Bold, Medium]], Manipulate`Dump`ThisIsNotAControl}, {
       Hold[$CellContext`BP$$], {False, True}}, {
       Hold[$CellContext`Sym$$], {False, True}}, {
       Hold[
        Style["Solutions", Bold, Medium]], 
       Manipulate`Dump`ThisIsNotAControl}, {
       Hold[
        Button["Show", {$CellContext`s$$ = Part[
            $CellContext`DGBPSolver[$CellContext`G, $CellContext`nodes], 1][
           "Branches"], $CellContext`s$$ = Table[
            Part[
             
             Part[$CellContext`s$$, $CellContext`i], $CellContext`j], \
{$CellContext`i, 
             Length[$CellContext`s$$]}, {$CellContext`j, 4, 
             9}], $CellContext`branches$$ = 
          Union[$CellContext`branches$$, $CellContext`s$$]}, Background -> 
         RGBColor[1, 0.85, 0.85]]], Manipulate`Dump`ThisIsNotAControl}, {
       Hold[
        Button["Reset", {$CellContext`G = $CellContext`DGProblem[
            $CellContext`DGRandom3DBackbone[9]["Points"], $CellContext`edges][
           "G"], $CellContext`branches$$ = {}, $CellContext`b$$ = {}, \
$CellContext`s$$ = {}}, Background -> RGBColor[1, 0.85, 0.85]]], 
       Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
     644., {211., 218.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`\[Omega]4$54601$$ = 
     False, $CellContext`\[Omega]5$54602$$ = 
     False, $CellContext`\[Omega]6$54603$$ = 
     False, $CellContext`\[Omega]7$54604$$ = 
     False, $CellContext`\[Omega]8$54605$$ = 
     False, $CellContext`\[Omega]9$54606$$ = False, $CellContext`BP$54607$$ = 
     False, $CellContext`Sym$54608$$ = False}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, 
       "Variables" :> {$CellContext`BP$$ = False, $CellContext`Sym$$ = 
         False, $CellContext`\[Omega]4$$ = 0, $CellContext`\[Omega]5$$ = 
         0, $CellContext`\[Omega]6$$ = 0, $CellContext`\[Omega]7$$ = 
         0, $CellContext`\[Omega]8$$ = 0, $CellContext`\[Omega]9$$ = 0}, 
       "ControllerVariables" :> {
         Hold[$CellContext`\[Omega]4$$, $CellContext`\[Omega]4$54601$$, 
          False], 
         Hold[$CellContext`\[Omega]5$$, $CellContext`\[Omega]5$54602$$, 
          False], 
         Hold[$CellContext`\[Omega]6$$, $CellContext`\[Omega]6$54603$$, 
          False], 
         Hold[$CellContext`\[Omega]7$$, $CellContext`\[Omega]7$54604$$, 
          False], 
         Hold[$CellContext`\[Omega]8$$, $CellContext`\[Omega]8$54605$$, 
          False], 
         Hold[$CellContext`\[Omega]9$$, $CellContext`\[Omega]9$54606$$, 
          False], 
         Hold[$CellContext`BP$$, $CellContext`BP$54607$$, False], 
         Hold[$CellContext`Sym$$, $CellContext`Sym$54608$$, False]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Row[{
          $CellContext`DGByHandTreeFromBranches[$CellContext`G, \
{$CellContext`\[Omega]4$$, $CellContext`\[Omega]5$$, \
$CellContext`\[Omega]6$$, $CellContext`\[Omega]7$$, $CellContext`\[Omega]8$$, \
$CellContext`\[Omega]9$$}, $CellContext`branches$$, $CellContext`BP$$], 
          Column[{
            $CellContext`DGPlotAdjacencyMatrix[$CellContext`G, \
$CellContext`Sym$$], 
            Graphics3D[{{Red, 
               Tube[$CellContext`X$$]}, {
               PointSize[Large], Blue, 
               Point[$CellContext`X$$]}}], 
            
            MatrixForm[$CellContext`s$$, 
             TableHeadings -> {
              None, {"\[Omega]4", "\[Omega]5", "\[Omega]6", "\[Omega]7", 
                "\[Omega]8", "\[Omega]9"}}]}]}], "Specifications" :> {
         Style[
         "Branches", Bold, Medium], {$CellContext`\[Omega]4$$, {0, 1}, 
          ControlType -> SetterBar}, {$CellContext`\[Omega]5$$, {0, 1}, 
          ControlType -> SetterBar}, {$CellContext`\[Omega]6$$, {0, 1}, 
          ControlType -> SetterBar}, {$CellContext`\[Omega]7$$, {0, 1}, 
          ControlType -> SetterBar}, {$CellContext`\[Omega]8$$, {0, 1}, 
          ControlType -> SetterBar}, {$CellContext`\[Omega]9$$, {0, 1}, 
          ControlType -> SetterBar}, 
         Button[
         "Try", {$CellContext`b$$ = {$CellContext`\[Omega]4$$, $CellContext`\
\[Omega]5$$, $CellContext`\[Omega]6$$, $CellContext`\[Omega]7$$, \
$CellContext`\[Omega]8$$, $CellContext`\[Omega]9$$}, 
           
           For[$CellContext`node$$ = 1, $CellContext`node$$ <= 
            Length[$CellContext`b$$], 
            Increment[$CellContext`node$$], 
            Part[$CellContext`X$$, $CellContext`node$$ + 
               3] = $CellContext`DGBPGetX[$CellContext`G, $CellContext`X$$, 
               
               Part[$CellContext`b$$, $CellContext`node$$], \
$CellContext`nodes, $CellContext`node$$ + 3]; Null], 
           
           AppendTo[$CellContext`branches$$, {$CellContext`\[Omega]4$$, \
$CellContext`\[Omega]5$$, $CellContext`\[Omega]6$$, $CellContext`\[Omega]7$$, \
$CellContext`\[Omega]8$$, $CellContext`\[Omega]9$$}]}, Background -> 
          RGBColor[0.87, 0.94, 1]], Delimiter, 
         Style[
         "Options", Bold, Medium], {$CellContext`BP$$, {False, True}, 
          ControlType -> Checkbox}, {$CellContext`Sym$$, {False, True}, 
          ControlType -> Checkbox}, Delimiter, 
         Style["Solutions", Bold, Medium], 
         Button["Show", {$CellContext`s$$ = Part[
             $CellContext`DGBPSolver[$CellContext`G, $CellContext`nodes], 1][
            "Branches"], $CellContext`s$$ = Table[
             Part[
              
              Part[$CellContext`s$$, $CellContext`i], $CellContext`j], \
{$CellContext`i, 
              Length[$CellContext`s$$]}, {$CellContext`j, 4, 
              9}], $CellContext`branches$$ = 
           Union[$CellContext`branches$$, $CellContext`s$$]}, Background -> 
          RGBColor[1, 0.85, 0.85]], 
         Button["Reset", {$CellContext`G = $CellContext`DGProblem[
             $CellContext`DGRandom3DBackbone[9][
             "Points"], $CellContext`edges][
            "G"], $CellContext`branches$$ = {}, $CellContext`b$$ = {}, \
$CellContext`s$$ = {}}, Background -> RGBColor[1, 0.85, 0.85]]}, 
       "Options" :> {}, "DefaultOptions" :> {}],
      ImageSizeCache->{751., {243., 250.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  ControlPlacement -> Left,
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{
  3.709547092113737*^9, 3.709547174976904*^9, {3.709547390869236*^9, 
   3.709547412213322*^9}, 3.70954752441389*^9, 3.7095477274600067`*^9, 
   3.7095479498180923`*^9, 3.7095482527719927`*^9, 3.70954829962901*^9, {
   3.70954866855692*^9, 3.7095486747996674`*^9}, 3.7095491208798532`*^9, 
   3.709549430338997*^9, 3.7095498453100023`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"DGPrintGraph", "[", 
  RowBox[{"P", "[", "\"\<G\>\"", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"X", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.526"}], ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2.03376"}], ",", "1.43905", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3.55962"}], ",", "1.43909", ",", 
      RowBox[{"-", "0.0200301"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4.05005"}], ",", "0.86139", ",", 
      RowBox[{"-", "1.34457"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5.56218"}], ",", "0.665224", ",", 
      RowBox[{"-", "1.28411"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "6.08054"}], ",", "0.298461", ",", 
      RowBox[{"-", "2.67396"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7.5502"}], ",", 
      RowBox[{"-", "0.100461"}], ",", 
      RowBox[{"-", "2.57583"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "8.10731"}], ",", 
      RowBox[{"-", "0.335017"}], ",", 
      RowBox[{"-", "3.977"}]}], "}"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"EuclideanDistance", "[", 
  RowBox[{
   RowBox[{"X", "[", 
    RowBox[{"[", "6", "]"}], "]"}], ",", 
   RowBox[{"X", "[", 
    RowBox[{"[", "7", "]"}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.709548771279129*^9, 3.7095489021010265`*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["\<\"i\"\>",
       HoldForm], 
      TagBox["\<\"j\"\>",
       HoldForm], 
      TagBox["\<\"dij\"\>",
       HoldForm], 
      TagBox["\<\"lij\"\>",
       HoldForm], 
      TagBox["\<\"uij\"\>",
       HoldForm]},
     {
      TagBox["1",
       HoldForm], "1", "2", "1.526`", "1.526`", "1.526`"},
     {
      TagBox["2",
       HoldForm], "1", "3", "2.491389535840226`", "2.491389535840226`", 
      "2.491389535840226`"},
     {
      TagBox["3",
       HoldForm], "1", "4", "3.048192427721125`", "3.048192427721125`", 
      "3.048192427721125`"},
     {
      TagBox["4",
       HoldForm], "2", "3", "1.526`", "1.526`", "1.526`"},
     {
      TagBox["5",
       HoldForm], "2", "4", "2.491389535840226`", "2.491389535840226`", 
      "2.491389535840226`"},
     {
      TagBox["6",
       HoldForm], "2", "5", "3.8373524632633984`", "3.8373524632633984`", 
      "3.8373524632633984`"},
     {
      TagBox["7",
       HoldForm], "3", "4", "1.526`", "1.526`", "1.526`"},
     {
      TagBox["8",
       HoldForm], "3", "5", "2.491389535840226`", "2.491389535840226`", 
      "2.491389535840226`"},
     {
      TagBox["9",
       HoldForm], "3", "6", "2.951619081837147`", "2.951619081837147`", 
      "2.951619081837147`"},
     {
      TagBox["10",
       HoldForm], "4", "5", "1.5260000000000002`", "1.5260000000000002`", 
      "1.5260000000000002`"},
     {
      TagBox["11",
       HoldForm], "4", "6", "2.4913895358402254`", "2.4913895358402254`", 
      "2.4913895358402254`"},
     {
      TagBox["12",
       HoldForm], "4", "7", "2.9094349025648536`", "2.9094349025648536`", 
      "2.9094349025648536`"},
     {
      TagBox["13",
       HoldForm], "5", "6", "1.5259999999999996`", "1.5259999999999996`", 
      "1.5259999999999996`"},
     {
      TagBox["14",
       HoldForm], "5", "7", "2.491389535840226`", "2.491389535840226`", 
      "2.491389535840226`"},
     {
      TagBox["15",
       HoldForm], "5", "8", "3.839623941925149`", "3.839623941925149`", 
      "3.839623941925149`"},
     {
      TagBox["16",
       HoldForm], "6", "7", "1.5260000000000005`", "1.5260000000000005`", 
      "1.5260000000000005`"},
     {
      TagBox["17",
       HoldForm], "6", "8", "2.491389535840226`", "2.491389535840226`", 
      "2.491389535840226`"},
     {
      TagBox["18",
       HoldForm], "6", "9", "3.835062467070012`", "3.835062467070012`", 
      "3.835062467070012`"},
     {
      TagBox["19",
       HoldForm], "7", "8", "1.5259999999999998`", "1.5259999999999998`", 
      "1.5259999999999998`"},
     {
      TagBox["20",
       HoldForm], "7", "9", "2.491389535840226`", "2.491389535840226`", 
      "2.491389535840226`"},
     {
      TagBox["21",
       HoldForm], "8", "9", "1.5260000000000002`", "1.5260000000000002`", 
      "1.5260000000000002`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
      17, 18, 19, 20, 21}, {"i", "j", "dij", "lij", "uij"}}]]]], "Print",
 CellChangeTimes->{{3.7095487869116106`*^9, 3.7095488660144396`*^9}, 
   3.709548903120957*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.526`"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.03376`"}], ",", "1.43905`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.55962`"}], ",", "1.43909`", ",", 
     RowBox[{"-", "0.0200301`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.05005`"}], ",", "0.86139`", ",", 
     RowBox[{"-", "1.34457`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "5.56218`"}], ",", "0.665224`", ",", 
     RowBox[{"-", "1.28411`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6.08054`"}], ",", "0.298461`", ",", 
     RowBox[{"-", "2.67396`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "7.5502`"}], ",", 
     RowBox[{"-", "0.100461`"}], ",", 
     RowBox[{"-", "2.57583`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8.10731`"}], ",", 
     RowBox[{"-", "0.335017`"}], ",", 
     RowBox[{"-", "3.977`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7095488119475937`*^9, 3.7095488661620398`*^9}, 
   3.709548903120957*^9}],

Cell[BoxData["1.5280363903614993`"], "Output",
 CellChangeTimes->{{3.7095488119475937`*^9, 3.7095488661620398`*^9}, 
   3.7095489031365824`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5) Solving IMDGP using Rotations", "Chapter",
 CellChangeTimes->{
  3.6896820831181965`*^9, {3.6957184087362404`*^9, 3.695718419041832*^9}, {
   3.698067376091146*^9, 3.6980673786551833`*^9}, {3.698080445180032*^9, 
   3.698080464298929*^9}, {3.6980805484661093`*^9, 3.6980805555092807`*^9}, {
   3.6981366838232155`*^9, 3.6981367362664995`*^9}, 3.6982697383364143`*^9, {
   3.6982698149338293`*^9, 3.6982698227630577`*^9}, {3.698572390735381*^9, 
   3.6985723924870296`*^9}, {3.6985725480912857`*^9, 
   3.6985725546008253`*^9}, {3.7026482856328583`*^9, 3.702648293701703*^9}},
 Background->RGBColor[1, 1, 0.85]],

Cell[CellGroupData[{

Cell["DGRotAngleInterval", "Subsection",
 CellChangeTimes->{{3.702667191258362*^9, 3.702667202900814*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DGGetRotAngleInterval", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGGetRotAngleInterval", "[", 
   RowBox[{
   "dab_", ",", "dac_", ",", "dbc_", ",", "dax_", ",", "dbx_", ",", "lcx_", 
    ",", "ucx_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "a", ",", "b", ",", "c", ",", "r", ",", "q", ",", "\[Omega]", ",", 
      "\[Theta]", ",", "\[Chi]", ",", "\[Rho]", ",", "lcxMin", ",", "ucxMax", 
      ",", 
      RowBox[{"verbose", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"creates", " ", "the", " ", "base", " ", "triangle"}], " ", 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"b", "=", 
      RowBox[{"{", 
       RowBox[{"dab", ",", "0", ",", "0"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Theta]", "=", 
      RowBox[{"ArcCos", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"dab", "^", "2"}], "+", 
          RowBox[{"dac", "^", "2"}], "-", 
          RowBox[{"dbc", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2", "*", "dac", "*", "dab"}], ")"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"c", "=", 
      RowBox[{"dac", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
         RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", "0"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"verbose", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<{a,b,c}=\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "intersection", " ", "of", " ", "the", " ", "circunference", " ", 
        "and", " ", "the", " ", "positive", " ", "quadrant", " ", "of", " ", 
        "XY"}], "-", "Plane"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\[Theta]", "=", 
      RowBox[{"ArcCos", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"dab", "^", "2"}], "+", 
          RowBox[{"dax", "^", "2"}], "-", 
          RowBox[{"dbx", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2", "*", "dab", "*", "dax"}], ")"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"verbose", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<\[Theta]=\>\"", ",", "\[Theta]"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"q", "=", 
      RowBox[{"dax", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
         RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", "0"}], "}"}]}]}], ";", 
     " ", 
     RowBox[{"(*", " ", "intersection", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"q", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ";", 
     RowBox[{"(*", " ", 
      RowBox[{"circle", " ", "radius"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"verbose", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<{q,r}=\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"q", ",", "r"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"verbose", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<{daq,dbq}=\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Norm", "[", 
            RowBox[{"a", "-", "q"}], "]"}], ",", 
           RowBox[{"Norm", "[", 
            RowBox[{"b", "-", "q"}], "]"}]}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"circunference", " ", "parametrization"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\[Chi]", "[", "\[Theta]_", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"q", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"r", "*", 
         RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", 
        RowBox[{"r", "*", 
         RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"verbose", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<{lcx,ucx}=\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"lcx", ",", "ucx"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lcxMin", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"lcx", ",", 
        RowBox[{"Norm", "[", 
         RowBox[{"c", "-", 
          RowBox[{"\[Chi]", "[", "0.01", "]"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ucxMax", "=", 
      RowBox[{"Min", "[", 
       RowBox[{"ucx", ",", 
        RowBox[{"Norm", "[", 
         RowBox[{"c", "-", 
          RowBox[{"\[Chi]", "[", 
           RowBox[{"\[Pi]", "-", "0.01"}], "]"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"verbose", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<{lcxMin,ucxMax}=\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"lcxMin", ",", "ucxMax"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "calculates", " ", "rotation", " ", "angle", " ", "given", " ", "a", 
       " ", "distance", " ", "to", " ", "point", " ", "c"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\[Rho]", "[", "\[Delta]_", "]"}], ":=", 
      RowBox[{"ArcCos", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "-", 
             RowBox[{"c", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "^", "2"}], "+", 
          RowBox[{"r", "^", "2"}], "+", 
          RowBox[{
           RowBox[{"c", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "^", "2"}], "-", 
          RowBox[{"\[Delta]", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2", "r", "*", 
          RowBox[{"c", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Omega]", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Rho]", "[", "lcxMin", "]"}], ",", 
        RowBox[{"\[Rho]", "[", "ucxMax", "]"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "\[Omega]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.7025849436368012`*^9, 3.702585225357638*^9}, {
   3.7025852591754107`*^9, 3.7025857138940496`*^9}, {3.7025857565632687`*^9, 
   3.702585903118622*^9}, {3.7025860436832285`*^9, 3.7025860476533823`*^9}, {
   3.7025861635004416`*^9, 3.7025863147989535`*^9}, {3.702586430620968*^9, 
   3.702586445561121*^9}, {3.70258657487226*^9, 3.702586575756974*^9}, {
   3.7025866391056137`*^9, 3.7025867215501156`*^9}, {3.7025867527108927`*^9, 
   3.7025867916388707`*^9}, 3.702587331764036*^9, {3.702587459676263*^9, 
   3.7025874659953156`*^9}, {3.7025875826488247`*^9, 
   3.7025875858814373`*^9}, {3.7025876481335454`*^9, 3.702587649270815*^9}, {
   3.702588255078732*^9, 3.702588292389495*^9}, {3.702630969216283*^9, 
   3.702631072151683*^9}, {3.7026311378776245`*^9, 3.702631214363267*^9}, {
   3.702631260295026*^9, 3.702631519663731*^9}, {3.7026315518069363`*^9, 
   3.7026316225921144`*^9}, {3.702634362216016*^9, 3.7026343818031397`*^9}, {
   3.702634422481219*^9, 3.7026344364337544`*^9}, {3.7026344933507614`*^9, 
   3.7026345371882915`*^9}, {3.7026349425169935`*^9, 
   3.7026349810576572`*^9}, {3.702644783859481*^9, 3.7026447841389008`*^9}, {
   3.7026448331592035`*^9, 3.702644901939868*^9}, 3.7026453149856663`*^9, {
   3.702648300284288*^9, 3.702648347022227*^9}, {3.702661215483858*^9, 
   3.702661225833205*^9}, {3.7026612564268284`*^9, 3.7026612993293605`*^9}, {
   3.7026614086918707`*^9, 3.7026614836580124`*^9}, {3.702661515331992*^9, 
   3.7026618629115076`*^9}, {3.702661911599752*^9, 3.7026619271410403`*^9}, {
   3.702662046008308*^9, 3.7026622347484393`*^9}, {3.702662396744067*^9, 
   3.702662501452999*^9}, {3.7026625645682664`*^9, 3.702662568861965*^9}, {
   3.70266265335056*^9, 3.7026628004748645`*^9}, {3.702662839687356*^9, 
   3.702662880985922*^9}, {3.7026629460938168`*^9, 3.70266308084925*^9}, {
   3.702663124856131*^9, 3.7026631638642344`*^9}, {3.7026633593211184`*^9, 
   3.7026633662045236`*^9}, {3.702663684901252*^9, 3.7026638076941195`*^9}, {
   3.7026638379649143`*^9, 3.7026640065720806`*^9}, {3.7026640557126565`*^9, 
   3.702664241092295*^9}, {3.7026643351504836`*^9, 3.702664449793388*^9}, {
   3.702664589938775*^9, 3.702664736540487*^9}, {3.7026647674144564`*^9, 
   3.7026650052647977`*^9}, {3.702665122778717*^9, 3.7026654088639297`*^9}, {
   3.7026659169400883`*^9, 3.7026659633030586`*^9}, {3.702666134124052*^9, 
   3.702666134255231*^9}, {3.70266616661606*^9, 3.702666227237485*^9}, {
   3.7026663558776674`*^9, 3.702666425489391*^9}, 3.7026664829392333`*^9, {
   3.70266652751575*^9, 3.7026665284225044`*^9}, {3.7026665703184357`*^9, 
   3.7026666700317545`*^9}, {3.7026668892991433`*^9, 3.702666896318932*^9}, {
   3.702666959854605*^9, 3.702666977200746*^9}, {3.7026672968919373`*^9, 
   3.7026673108613815`*^9}, {3.7026674288436193`*^9, 
   3.7026674419812307`*^9}, {3.702667581808366*^9, 3.702667664519201*^9}, {
   3.702668108800061*^9, 3.7026681347733264`*^9}, {3.702668186733611*^9, 
   3.7026682207794943`*^9}, {3.7026683310922623`*^9, 
   3.7026683401459484`*^9}, {3.7026684008277397`*^9, 
   3.7026684303024073`*^9}, {3.702675060885282*^9, 3.702675112744052*^9}}],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.7026671619226885`*^9, 3.7026671767268395`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"calculating", " ", "rotation", " ", "angle", " ", "bounds"}], " ",
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"a", "=", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ";", 
    RowBox[{"b", "=", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], ";", 
    RowBox[{"c", "=", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "0"}], "}"}]}], ";", 
    RowBox[{"x", "=", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Epsilon]", "=", "0.1"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dab", "=", 
     RowBox[{"Norm", "[", 
      RowBox[{"a", "-", "b"}], "]"}]}], ";", 
    RowBox[{"dac", "=", 
     RowBox[{"Norm", "[", 
      RowBox[{"a", "-", "c"}], "]"}]}], ";", 
    RowBox[{"dbc", "=", 
     RowBox[{"Norm", "[", 
      RowBox[{"b", "-", "c"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dax", "=", 
     RowBox[{"Norm", "[", 
      RowBox[{"a", "-", "x"}], "]"}]}], ";", 
    RowBox[{"dbx", "=", 
     RowBox[{"Norm", "[", 
      RowBox[{"b", "-", "x"}], "]"}]}], ";", 
    RowBox[{"dcx", "=", 
     RowBox[{"Norm", "[", 
      RowBox[{"c", "-", "x"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ucx", "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Epsilon]"}], ")"}], "*", "dcx"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lcx", "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", "\[Epsilon]"}], ")"}], "*", "dcx"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"\[Omega]", "=", 
    RowBox[{"DGGetRotAngleInterval", "[", 
     RowBox[{
     "dab", ",", "dac", ",", "dbc", ",", "dax", ",", "dbx", ",", "lcx", ",", 
      "ucx"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7026655093224525`*^9, 3.702665554563734*^9}, {
   3.7026655902521696`*^9, 3.7026657447290707`*^9}, {3.7026657949966373`*^9, 
   3.7026658281277657`*^9}, 3.702665892123801*^9, {3.7026659690715313`*^9, 
   3.7026659883743114`*^9}, 3.702666085747013*^9, {3.7026662804870453`*^9, 
   3.70266628066825*^9}, {3.702667120041193*^9, 3.7026671205853405`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["DGGetAllRotAngleInterval", "Subsection",
 CellChangeTimes->{{3.702667191258362*^9, 3.7026672225036063`*^9}, {
  3.7026744325981674`*^9, 3.7026744339580617`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DGGetAllRotAngleInterval", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DGGetAllRotAngleInterval", "[", "G_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "natoms", ",", "\[Omega]", ",", "dab", ",", "dac", ",", "dbc", ",", 
       "dax", ",", "dbx", ",", "lcx", ",", "ucx", ",", "i", ",", "j"}], "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"natoms", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Omega]", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "natoms"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "2"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "4"}], ",", 
        RowBox[{"i", "\[LessEqual]", "natoms"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"dab", "=", 
          RowBox[{"DGEdgeWeight", "[", 
           RowBox[{"G", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"i", "-", "1"}], ")"}], "\[UndirectedEdge]", 
             RowBox[{"(", 
              RowBox[{"i", "-", "2"}], ")"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dac", "=", 
          RowBox[{"DGEdgeWeight", "[", 
           RowBox[{"G", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"i", "-", "1"}], ")"}], "\[UndirectedEdge]", 
             RowBox[{"(", 
              RowBox[{"i", "-", "3"}], ")"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dbc", "=", 
          RowBox[{"DGEdgeWeight", "[", 
           RowBox[{"G", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"i", "-", "2"}], ")"}], "\[UndirectedEdge]", 
             RowBox[{"(", 
              RowBox[{"i", "-", "3"}], ")"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dax", "=", 
          RowBox[{"DGEdgeWeight", "[", 
           RowBox[{"G", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"i", "-", "1"}], ")"}], "\[UndirectedEdge]", "i"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"dbx", "=", 
          RowBox[{"DGEdgeWeight", "[", 
           RowBox[{"G", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"i", "-", "2"}], ")"}], "\[UndirectedEdge]", "i"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"lcx", ",", "ucx"}], "}"}], "=", 
          RowBox[{"DGEdgeDistanceBounds", "[", 
           RowBox[{"G", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"i", "-", "3"}], ")"}], "\[UndirectedEdge]", "i"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\[Omega]", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "=", 
          RowBox[{"DGGetRotAngleInterval", "[", 
           RowBox[{
           "dab", ",", "dac", ",", "dbc", ",", "dax", ",", "dbx", ",", "lcx", 
            ",", "ucx"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "\[Omega]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.702666989546089*^9, 3.702666997100268*^9}, {
  3.7026670869120684`*^9, 3.702667087138389*^9}, {3.7026672321214447`*^9, 
  3.7026672373297553`*^9}, {3.7026684671240573`*^9, 3.7026684979152117`*^9}, {
  3.702674906228129*^9, 3.7026749065957527`*^9}, {3.7026751297842484`*^9, 
  3.702675133116129*^9}}],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.7026671619226885`*^9, 3.7026671767268395`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Creates", " ", "a", " ", "random", " ", "problem"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGRandomMDGP", "[", 
      RowBox[{"5", ",", "0.1", ",", "5", ",", "0"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"G", "=", 
     RowBox[{"P", "[", "\"\<G\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"DGPlotAdjacencyMatrix", "[", "G", "]"}], "\[IndentingNewLine]", 
   RowBox[{"\[Omega]", "=", 
    RowBox[{"DGGetAllRotAngleInterval", "[", "G", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.702644906261314*^9, 3.7026449100171323`*^9}, {
   3.702645036161538*^9, 3.702645094031803*^9}, {3.7026451246550045`*^9, 
   3.7026451295210896`*^9}, {3.702645169536258*^9, 3.7026451721829042`*^9}, {
   3.702662516787837*^9, 3.702662527822175*^9}, {3.7026626074976935`*^9, 
   3.702662617656565*^9}, 3.70266550309933*^9, {3.7026670078134966`*^9, 
   3.702667009583333*^9}, {3.702667074676117*^9, 3.7026670821914744`*^9}, {
   3.7026751439485674`*^9, 3.7026751464737434`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["DGSolverRot", "Subsection",
 CellChangeTimes->{{3.702667191258362*^9, 3.7026672225036063`*^9}, {
  3.7026744325981674`*^9, 3.7026744339580617`*^9}, {3.702674958850687*^9, 
  3.7026749624664736`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DGSolverRot", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DGSolverRot", "[", 
   RowBox[{"G_", ",", "\[Beta]_", ",", "nodes_", ",", "nsample_"}], "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "natoms", ",", "\[Omega]", ",", "i", ",", "j", ",", "\[Theta]", ",", 
      "\[Phi]", ",", "\[Rho]", ",", "\[Epsilon]", ",", "a", ",", "b", ",", 
      "c", ",", "n", ",", "p", ",", "q", ",", "x", ",", "dab", ",", "dac", 
      ",", "dbc", ",", "dax", ",", "dbx", ",", "dcx", ",", "X", ",", 
      "isSolution"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"natoms", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Omega]", "=", 
      RowBox[{"DGGetAllRotAngleInterval", "[", "G", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"set", " ", "the", " ", "first", " ", "triangle"}], " ", "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"dab", "=", 
      RowBox[{"DGEdgeWeight", "[", 
       RowBox[{"G", ",", 
        RowBox[{"1", "\[UndirectedEdge]", "2"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dac", "=", 
      RowBox[{"DGEdgeWeight", "[", 
       RowBox[{"G", ",", 
        RowBox[{"1", "\[UndirectedEdge]", "3"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dbc", "=", 
      RowBox[{"DGEdgeWeight", "[", 
       RowBox[{"G", ",", 
        RowBox[{"2", "\[UndirectedEdge]", "3"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"X", "=", 
      RowBox[{"{", "}"}]}], ";", 
     RowBox[{"isSolution", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"j", "=", "1"}], ",", 
       RowBox[{"j", "\[LessEqual]", "nsample"}], ",", 
       RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"x", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "natoms"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"x", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "=", 
         RowBox[{"{", 
          RowBox[{"dab", ",", "0", ",", "0"}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"\[Theta]", "=", 
         RowBox[{"ArcCos", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dab", "^", "2"}], "+", 
             RowBox[{"dac", "^", "2"}], "-", 
             RowBox[{"dbc", "^", "2"}]}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"2", "*", "dac", "*", "dab"}], ")"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"x", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "=", 
         RowBox[{"dac", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", "0"}], "}"}]}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<x[1]=\>\"", ",", 
            RowBox[{"x", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ";"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<x[2]=\>\"", ",", 
            RowBox[{"x", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ";"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<x[3]=\>\"", ",", 
            RowBox[{"x", "[", 
             RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ";"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"select", " ", "random", " ", "rotation", " ", "angles"}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "4"}], ",", 
          RowBox[{"i", "\[LessEqual]", "natoms"}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"get", " ", "distances"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"dab", "=", 
            RowBox[{"DGEdgeWeight", "[", 
             RowBox[{"G", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"i", "-", "1"}], ")"}], "\[UndirectedEdge]", 
               RowBox[{"(", 
                RowBox[{"i", "-", "2"}], ")"}]}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"dac", "=", 
            RowBox[{"DGEdgeWeight", "[", 
             RowBox[{"G", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"i", "-", "1"}], ")"}], "\[UndirectedEdge]", 
               RowBox[{"(", 
                RowBox[{"i", "-", "3"}], ")"}]}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"dbc", "=", 
            RowBox[{"DGEdgeWeight", "[", 
             RowBox[{"G", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"i", "-", "2"}], ")"}], "\[UndirectedEdge]", 
               RowBox[{"(", 
                RowBox[{"i", "-", "3"}], ")"}]}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"dax", "=", 
            RowBox[{"DGEdgeWeight", "[", 
             RowBox[{"G", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"i", "-", "1"}], ")"}], "\[UndirectedEdge]", "i"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"dbx", "=", 
            RowBox[{"DGEdgeWeight", "[", 
             RowBox[{"G", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"i", "-", "2"}], ")"}], "\[UndirectedEdge]", "i"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"\"\<dax=\>\"", ",", "dax"}], "]"}], ";"}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"a", "=", 
            RowBox[{"x", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ";", 
           RowBox[{"b", "=", 
            RowBox[{"x", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "2"}], "]"}], "]"}]}], ";", 
           RowBox[{"c", "=", 
            RowBox[{"x", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "3"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"circunference", " ", "center"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"\[Theta]", "=", 
            RowBox[{"ArcCos", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"dab", "^", "2"}], "+", 
                RowBox[{"dax", "^", "2"}], "-", 
                RowBox[{"dbx", "^", "2"}]}], ")"}], "/", 
              RowBox[{"(", 
               RowBox[{"2", "dab", "*", "dax"}], ")"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"p", "=", 
            RowBox[{"a", "+", 
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"b", "-", "a"}], "]"}], "*", 
              RowBox[{"Cos", "[", "\[Theta]", "]"}], "*", "dax"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"\"\<{\[Theta],p}=\>\"", ",", 
               RowBox[{"{", 
                RowBox[{"\[Theta]", ",", "p"}], "}"}]}], "]"}], ";"}], "*)"}],
            "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "intersection", " ", "of", " ", "circunference", " ", "and", " ", 
             "the", " ", "triangle", " ", "abc"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Cross", "[", 
             RowBox[{
              RowBox[{"b", "-", "a"}], ",", 
              RowBox[{"c", "-", "a"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"q", "=", 
            RowBox[{"p", "+", 
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"Cross", "[", 
                RowBox[{"n", ",", 
                 RowBox[{"b", "-", "a"}]}], "]"}], "]"}], "*", 
              RowBox[{"Sin", "[", "\[Theta]", "]"}], "*", "dax"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"\"\<{n,q}=\>\"", ",", 
               RowBox[{"{", 
                RowBox[{"n", ",", "q"}], "}"}]}], "]"}], ";"}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"\"\<{daq,dbq}=\>\"", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Norm", "[", 
                  RowBox[{"a", "-", "q"}], "]"}], ",", 
                 RowBox[{"Norm", "[", 
                  RowBox[{"b", "-", "q"}], "]"}]}], "}"}]}], "]"}], ";"}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"random", " ", "rotation", " ", "angle"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"\[Phi]", "=", 
            RowBox[{"RandomReal", "[", 
             RowBox[{"\[Omega]", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"\[Rho]", "=", 
            RowBox[{"RotationTransform", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "^", 
                RowBox[{"\[Beta]", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}], "*", "\[Phi]"}], ",", 
              RowBox[{"b", "-", "a"}], ",", "a"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "=", 
            RowBox[{"\[Rho]", "[", "q", "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"X", ",", "x"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "X", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJwdzmlI0wEcxvGpICxkq0wzGYGsyIYX6YtKEbdi4dwY/V1sHrU1CGuYSzwq
UqIX2aVdyASDLaPDICKPiSZk5tC1MCRwaKcplKgdhIsgZ+37f/Hj8+L38PCk
2J3CkWiJRLItcvhr3vNC51pUBzdce4U7hn1hrNqrkBZFrA0MytFkK0zEG5ta
k3HC7VGi/bYqHTPK8zNx2ZOZjTUv9wuYOD1cgg71m3IxN7JQjWkdz2rxcejT
BZx7625HoULvEXvMPzowv6vhPra6ZI8wL5TrFf9/FkW/d2r9Yn9M9DjumTkV
FvdpjTF69k2q4jBj6Uk8njjzeSPWFRxVoFQ+lorrTZfSsDTqpB4bvLMGFHST
gphTjx5Af7DtIH4rnqvE37uSLuPKg5Yr+HRt7HXc8s7iwvqbhls48bHxLs7+
7e/GGeV5Lw4UnB3AYPrqIL6/2jKGP895/aia6ltCy+7OELb7VsK4dcG9ikb7
Q5kh4tDre3LU1JiLbBGtx5yiljtOM/4b2W7H0tgPQ/i1rek51ktPT+EXWfU0
appz1hymd9wfhxatMgEDVYHNeMjUlYPWZYcG+3p0+3CnwliIWRetZTjv67Xh
unCxA7ubjcfxP6VxQUA=
  "]],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.7026671619226885`*^9, 3.7026671767268395`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Creates", " ", "a", " ", "random", " ", "problem"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"natoms", "=", "7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"P", "=", 
     RowBox[{"DGRandomMDGP", "[", 
      RowBox[{"natoms", ",", "0.1", ",", "5", ",", "0"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"G", "=", 
     RowBox[{"P", "[", "\"\<G\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"DGPlotAdjacencyMatrix", "[", "G", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nodes", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"i", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "natoms"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Beta]", "=", 
     RowBox[{"RandomChoice", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", "natoms"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.702644906261314*^9, 3.7026449100171323`*^9}, {
   3.702645036161538*^9, 3.702645094031803*^9}, {3.7026451246550045`*^9, 
   3.7026451295210896`*^9}, {3.702645169536258*^9, 3.7026451721829042`*^9}, {
   3.702662516787837*^9, 3.702662527822175*^9}, {3.7026626074976935`*^9, 
   3.702662617656565*^9}, 3.70266550309933*^9, {3.7026670078134966`*^9, 
   3.702667009583333*^9}, {3.702667074676117*^9, 3.7026670821914744`*^9}, {
   3.7026751439485674`*^9, 3.7026751464737434`*^9}, {3.7026783946413198`*^9, 
   3.7026784394789658`*^9}, {3.7026784992743807`*^9, 3.702678522562768*^9}, {
   3.70272017770084*^9, 3.7027201780690255`*^9}, 3.7027205533181133`*^9, {
   3.70272129436683*^9, 3.702721318408942*^9}, {3.702725196863783*^9, 
   3.702725203964079*^9}, {3.7027257393963566`*^9, 3.702725739543911*^9}, 
   3.7027321932831993`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"DGSolverRot", "[", 
    RowBox[{"G", ",", "\[Beta]", ",", "nodes", ",", "5"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DGPlot3DBackbone", "[", 
  RowBox[{"x", ",", "0.2", ",", "0.08"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", 
      RowBox[{"Length", "[", "x", "]"}]}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
      "\"\<Maximum Relative Residue of x[\>\"", ",", "i", ",", "\"\<]: \>\"", 
       ",", 
       RowBox[{"Max", "[", 
        RowBox[{"DGRelativeResidue", "[", 
         RowBox[{"G", ",", 
          RowBox[{"x", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], " "}]}], "Input",
 CellChangeTimes->{{3.7027207842406006`*^9, 3.7027207881272287`*^9}, 
   3.702721111023469*^9, {3.7027211477836103`*^9, 3.7027212137574453`*^9}, {
   3.7027250159545083`*^9, 3.7027250359828978`*^9}, {3.7027251989949484`*^9, 
   3.7027252186817074`*^9}, 3.702725710337193*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
},
WindowSize->{1600, 827},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{594.9599999999999, 842.04}},
InputAliases->{"intt" -> RowBox[{"\[Integral]", 
     RowBox[{"\[SelectionPlaceholder]", 
       RowBox[{"\[DifferentialD]", "\[Placeholder]"}]}]}], "dintt" -> RowBox[{
     SubsuperscriptBox[
     "\[Integral]", "\[SelectionPlaceholder]", "\[Placeholder]"], 
     RowBox[{"\[Placeholder]", 
       RowBox[{"\[DifferentialD]", "\[Placeholder]"}]}]}], "sumt" -> RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"\[SelectionPlaceholder]", "=", "\[Placeholder]"}], 
      "\[Placeholder]"], "\[Placeholder]"}], "prodt" -> RowBox[{
     UnderoverscriptBox["\[Product]", 
      RowBox[{"\[SelectionPlaceholder]", "=", "\[Placeholder]"}], 
      "\[Placeholder]"], "\[Placeholder]"}], "dt" -> RowBox[{
     SubscriptBox["\[PartialD]", "\[Placeholder]"], " ", 
     "\[SelectionPlaceholder]"}], "ia" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "Inactive"], "cbrt" -> 
  RadicalBox[
   "\[SelectionPlaceholder]", "3", SurdForm -> True, MultilineFunction -> 
    None], "surd" -> 
  RadicalBox[
   "\[SelectionPlaceholder]", "\[Placeholder]", SurdForm -> True, 
    MultilineFunction -> None], "ket" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "Ket"], "bra" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "Bra"], "braket" -> 
  TemplateBox[{"\[SelectionPlaceholder]", "\[Placeholder]"}, "BraKet"], 
  "delay" -> TemplateBox[{"\[SelectionPlaceholder]"}, "SystemsModelDelay"], 
  "grad" -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], "\[Placeholder]"}], 
  "del." -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], ".", 
     "\[Placeholder]"}], "delx" -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], "\[Cross]", 
     "\[Placeholder]"}], "del2" -> RowBox[{
     SubsuperscriptBox["\[Del]", "\[SelectionPlaceholder]", 2], 
     "\[Placeholder]"}], "notation" -> RowBox[{"Notation", "[", 
     RowBox[{
       TemplateBox[{"\[SelectionPlaceholder]"}, "NotationTemplateTag"], " ", 
       "\[DoubleLongLeftRightArrow]", " ", 
       TemplateBox[{"\[Placeholder]"}, "NotationTemplateTag"]}], "]"}], 
  "notation>" -> RowBox[{"Notation", "[", 
     RowBox[{
       TemplateBox[{"\[SelectionPlaceholder]"}, "NotationTemplateTag"], " ", 
       "\[DoubleLongRightArrow]", " ", 
       TemplateBox[{"\[Placeholder]"}, "NotationTemplateTag"]}], "]"}], 
  "notation<" -> RowBox[{"Notation", "[", 
     RowBox[{
       TemplateBox[{"\[SelectionPlaceholder]"}, "NotationTemplateTag"], " ", 
       "\[DoubleLongLeftArrow]", " ", 
       TemplateBox[{"\[Placeholder]"}, "NotationTemplateTag"]}], "]"}], 
  "symb" -> RowBox[{"Symbolize", "[", 
     TemplateBox[{"\[SelectionPlaceholder]"}, "NotationTemplateTag"], "]"}], 
  "infixnotation" -> RowBox[{"InfixNotation", "[", 
     RowBox[{
       TemplateBox[{"\[SelectionPlaceholder]"}, "NotationTemplateTag"], ",", 
       "\[Placeholder]"}], "]"}], "addia" -> RowBox[{"AddInputAlias", "[", 
     RowBox[{"\"\[SelectionPlaceholder]\"", "\[Rule]", 
       TemplateBox[{"\[Placeholder]"}, "NotationTemplateTag"]}], "]"}], 
  "pattwraper" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "NotationPatternTag"], 
  "madeboxeswraper" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "NotationMadeBoxesTag"], "er" -> 
  SubscriptBox["e", "r"], "es" -> SubscriptBox["e", "s"], "e0" -> 
  SubscriptBox["e", "0"], "e1" -> SubscriptBox["e", "1"], "e2" -> 
  SubscriptBox["e", "2"], "e3" -> SubscriptBox["e", "3"], "einf" -> 
  SubscriptBox["e", "\[Infinity]"], "I5" -> SubscriptBox["I", "5"]},
FrontEndVersion->"10.4 for Microsoft Windows (64-bit) (April 11, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "DGProblem"->{
  Cell[52723, 903, 31310, 771, 2632, "Input",
   CellTags->"DGProblem"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"DGProblem", 1227638, 23542}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 232, 4, 117, "Title"],
Cell[CellGroupData[{
Cell[837, 30, 458, 6, 88, "Chapter"],
Cell[CellGroupData[{
Cell[1320, 40, 51226, 855, 338, "Subchapter"],
Cell[CellGroupData[{
Cell[52571, 899, 149, 2, 70, "Section"],
Cell[52723, 903, 31310, 771, 2632, "Input",
 CellTags->"DGProblem"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84070, 1679, 176, 2, 70, "Section"],
Cell[84249, 1683, 2010, 43, 112, "Input"],
Cell[86262, 1728, 1823, 43, 112, "Input"],
Cell[88088, 1773, 1975, 49, 132, "Input"],
Cell[90066, 1824, 1326, 32, 92, "Input"],
Cell[91395, 1858, 94, 1, 31, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[91538, 1865, 1408, 27, 101, "Subchapter"],
Cell[CellGroupData[{
Cell[92971, 1896, 887, 12, 70, "Section"],
Cell[CellGroupData[{
Cell[93883, 1912, 1089, 18, 49, "Subsection"],
Cell[94975, 1932, 190655, 3131, 283, "Subsubsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[285667, 5068, 1219, 19, 49, "Subsection"],
Cell[286889, 5089, 100142, 1647, 237, 47831, 788, "CachedBoxData", "BoxData", \
"Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[387068, 6741, 213, 6, 49, "Subsection"],
Cell[387284, 6749, 116922, 1923, 305, 56091, 924, "CachedBoxData", "BoxData", \
"Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[504243, 8677, 185, 6, 49, "Subsection"],
Cell[504431, 8685, 63253, 1041, 443, "Input"]
}, Open  ]],
Cell[567699, 9729, 331, 8, 49, "Subsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568067, 9742, 98, 1, 70, "Section"],
Cell[568168, 9745, 61785, 1347, 3620, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[629990, 11097, 97, 1, 56, "Section"],
Cell[630090, 11100, 447, 10, 50, "Input"],
Cell[630540, 11112, 1080, 23, 69, "Input"],
Cell[631623, 11137, 693, 20, 50, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[632365, 11163, 358, 10, 74, "Subchapter"],
Cell[CellGroupData[{
Cell[632748, 11177, 98, 1, 70, "Section"],
Cell[632849, 11180, 11453, 272, 2646, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[644339, 11457, 95, 1, 56, "Section"],
Cell[644437, 11460, 929, 20, 72, "Input"],
Cell[645369, 11482, 559, 15, 72, "Input"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[645989, 11504, 339, 5, 77, "Chapter"],
Cell[CellGroupData[{
Cell[646353, 11513, 621, 15, 86, "Subchapter"],
Cell[CellGroupData[{
Cell[646999, 11532, 149, 2, 70, "Section"],
Cell[647151, 11536, 15027, 354, 1372, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[662215, 11895, 93, 1, 70, "Section"],
Cell[662311, 11898, 2264, 53, 152, "Input"],
Cell[CellGroupData[{
Cell[664600, 11955, 1986, 51, 132, "Input"],
Cell[666589, 12008, 346, 5, 31, "Output"]
}, Open  ]],
Cell[666950, 12016, 1994, 52, 132, "Input"],
Cell[668947, 12070, 1819, 49, 132, "Input"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[670815, 12125, 487, 9, 70, "Subchapter"],
Cell[CellGroupData[{
Cell[671327, 12138, 222, 3, 70, "Section"],
Cell[CellGroupData[{
Cell[671574, 12145, 129, 2, 49, "Subsection"],
Cell[671706, 12149, 4152, 135, 208, "Text"],
Cell[CellGroupData[{
Cell[675883, 12288, 278, 3, 39, "Subsubsection"],
Cell[676164, 12293, 14497, 260, 305, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[690698, 12558, 219, 3, 39, "Subsubsection"],
Cell[690920, 12563, 66715, 1099, 521, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[757684, 13668, 99, 1, 49, "Subsection"],
Cell[757786, 13671, 9282, 215, 512, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[767105, 13891, 151, 2, 41, "Subsection"],
Cell[CellGroupData[{
Cell[767281, 13897, 181, 2, 39, "Subsubsection"],
Cell[767465, 13901, 3570, 82, 152, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[771072, 13988, 291, 3, 39, "Subsubsection"],
Cell[771366, 13993, 2830, 64, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[774233, 14062, 156, 2, 39, "Subsubsection"],
Cell[774392, 14066, 1632, 47, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[776061, 14118, 289, 3, 39, "Subsubsection"],
Cell[776353, 14123, 1564, 39, 232, "Input"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[777978, 14169, 113, 1, 56, "Section"],
Cell[CellGroupData[{
Cell[778116, 14174, 129, 2, 49, "Subsection"],
Cell[CellGroupData[{
Cell[778270, 14180, 299, 5, 32, "Subsubsection"],
Cell[778572, 14187, 64358, 1085, 300, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[842967, 15277, 447, 8, 32, "Subsubsection"],
Cell[843417, 15287, 357, 10, 34, "Text"],
Cell[843777, 15299, 27824, 462, 363, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[871638, 15766, 219, 3, 39, "Subsubsection"],
Cell[871860, 15771, 62945, 1036, 368, "Input"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[934854, 16813, 229, 3, 41, "Subsection"],
Cell[935086, 16818, 173, 3, 31, "Input"],
Cell[935262, 16823, 4563, 120, 372, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[939862, 16948, 95, 1, 41, "Subsection"],
Cell[939960, 16951, 1907, 56, 132, "Input"],
Cell[941870, 17009, 1896, 52, 252, "Input"],
Cell[943769, 17063, 3886, 85, 312, "Input"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[947704, 17154, 429, 5, 56, "Section"],
Cell[CellGroupData[{
Cell[948158, 17163, 129, 2, 49, "Subsection"],
Cell[CellGroupData[{
Cell[948312, 17169, 353, 5, 39, "Subsubsection"],
Cell[948668, 17176, 2557, 76, 470, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[951274, 17258, 101, 1, 41, "Subsection"],
Cell[951378, 17261, 5119, 127, 450, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[956534, 17393, 98, 1, 41, "Subsection"],
Cell[CellGroupData[{
Cell[956657, 17398, 282, 4, 39, "Subsubsection"],
Cell[956942, 17404, 2898, 76, 392, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[959877, 17485, 232, 3, 39, "Subsubsection"],
Cell[960112, 17490, 907, 25, 92, "Input"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[961104, 17524, 463, 7, 88, "Chapter"],
Cell[CellGroupData[{
Cell[961592, 17535, 337, 7, 86, "Subchapter"],
Cell[CellGroupData[{
Cell[961954, 17546, 99, 1, 49, "Subsection"],
Cell[962056, 17549, 8275, 202, 932, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[970368, 17756, 230, 4, 49, "Subsection"],
Cell[CellGroupData[{
Cell[970623, 17764, 187, 2, 39, "Subsubsection"],
Cell[970813, 17768, 1698, 37, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[972548, 17810, 138, 1, 39, "Subsubsection"],
Cell[972689, 17813, 2619, 54, 92, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[975369, 17874, 342, 7, 86, "Subchapter"],
Cell[975714, 17883, 15980, 404, 1052, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[991731, 18292, 364, 7, 86, "Subchapter"],
Cell[CellGroupData[{
Cell[992120, 18303, 103, 1, 49, "Subsection"],
Cell[992226, 18306, 22725, 420, 6693, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1014988, 18731, 97, 1, 41, "Subsection"],
Cell[CellGroupData[{
Cell[1015110, 18736, 216, 3, 39, "Subsubsection"],
Cell[1015329, 18741, 2228, 60, 152, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1017594, 18806, 291, 4, 39, "Subsubsection"],
Cell[1017888, 18812, 2894, 74, 152, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1020819, 18891, 113, 1, 39, "Subsubsection"],
Cell[1020935, 18894, 3850, 93, 172, "Input"],
Cell[1024788, 18989, 820, 24, 92, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1025669, 19020, 202, 3, 67, "Subchapter"],
Cell[CellGroupData[{
Cell[1025896, 19027, 98, 1, 70, "Section"],
Cell[1025997, 19030, 35684, 659, 1372, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1061718, 19694, 165, 2, 70, "Section"],
Cell[1061886, 19698, 3904, 94, 212, "Input"],
Cell[1065793, 19794, 807, 16, 31, "Input"],
Cell[CellGroupData[{
Cell[1066625, 19814, 155, 2, 49, "Subsection"],
Cell[1066783, 19818, 3270, 85, 312, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1070090, 19908, 117, 1, 49, "Subsection"],
Cell[1070210, 19911, 2228, 48, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1072475, 19964, 175, 2, 49, "Subsection"],
Cell[1072653, 19968, 1747, 43, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1074437, 20016, 289, 6, 49, "Subsection"],
Cell[1074729, 20024, 6382, 162, 2693, "Input"]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1081172, 20193, 199, 3, 67, "Subchapter"],
Cell[CellGroupData[{
Cell[1081396, 20200, 98, 1, 70, "Section"],
Cell[1081497, 20203, 20588, 447, 1372, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1102122, 20655, 165, 2, 56, "Section"],
Cell[CellGroupData[{
Cell[1102312, 20661, 162, 2, 49, "Subsection"],
Cell[1102477, 20665, 1060, 27, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1103574, 20697, 127, 1, 49, "Subsection"],
Cell[1103704, 20700, 4366, 63, 52, "Input"],
Cell[1108073, 20765, 583, 17, 52, "Input"],
Cell[1108659, 20784, 533, 16, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1109229, 20805, 130, 1, 49, "Subsection"],
Cell[1109362, 20808, 4275, 102, 492, "Input"],
Cell[1113640, 20912, 1129, 32, 72, "Input"],
Cell[1114772, 20946, 745, 19, 52, "Input"],
Cell[1115520, 20967, 1787, 45, 72, "Input"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1117380, 21020, 493, 8, 88, "Chapter"],
Cell[CellGroupData[{
Cell[1117898, 21032, 315, 4, 67, "Subchapter"],
Cell[CellGroupData[{
Cell[1118238, 21040, 93, 1, 70, "Section"],
Cell[1118334, 21043, 23803, 528, 1512, "Input"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1142186, 21577, 303, 4, 51, "Subchapter"],
Cell[CellGroupData[{
Cell[1142514, 21585, 95, 1, 70, "Section"],
Cell[CellGroupData[{
Cell[1142634, 21590, 31064, 629, 2172, "Input"],
Cell[1173701, 22221, 9804, 190, 543, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1183542, 22416, 1568, 46, 92, "Input"],
Cell[1185113, 22464, 3870, 118, 336, "Print"],
Cell[1188986, 22584, 1254, 38, 52, "Output"],
Cell[1190243, 22624, 144, 2, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1190460, 22634, 619, 9, 88, "Chapter"],
Cell[CellGroupData[{
Cell[1191104, 22647, 106, 1, 47, "Subsection"],
Cell[1191213, 22650, 9908, 226, 4736, "Input"],
Cell[CellGroupData[{
Cell[1201146, 22880, 102, 1, 315, "Subsubsection"],
Cell[1201251, 22883, 2264, 63, 1463, "Input"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1203564, 22952, 167, 2, 38, "Subsection"],
Cell[1203734, 22956, 3819, 96, 2671, "Input"],
Cell[CellGroupData[{
Cell[1207578, 23056, 102, 1, 315, "Subsubsection"],
Cell[1207683, 23059, 1115, 23, 949, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1208847, 23088, 205, 3, 38, "Subsection"],
Cell[1209055, 23093, 11412, 283, 917, "Input"],
Cell[CellGroupData[{
Cell[1220492, 23380, 102, 1, 54, "Subsubsection"],
Cell[1220597, 23383, 1855, 42, 205, "Input"],
Cell[1222455, 23427, 1189, 29, 178, "Input"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}
]
*)

